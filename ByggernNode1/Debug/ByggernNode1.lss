
ByggernNode1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00000d94  00000e28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001a2  008001a2  00000eca  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00000ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000272  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001e2e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000358  00000000  00000000  00001e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003062  00000000  00000000  000021b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000156e  00000000  00000000  00005217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bb8  00000000  00000000  00006785  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f8  00000000  00000000  00008340  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000093f  00000000  00000000  00008a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002055  00000000  00000000  00009377  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000248  00000000  00000000  0000b3cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	
	//Wait for the data to be read
	while(test_bit(PINE, PINE0));
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	
	return *adc;
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(0);
	//Read position y from channel 1
	y = ADC_read(1);
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	
	//Calculate position x percentage
	if(x > mid_x) {
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	} else if (x < mid_x) {
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
	} else {
		position.x = 0;
  74:	cf ef       	ldi	r28, 0xFF	; 255
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e9       	ldi	r30, 0x94	; 148
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 3a       	cpi	r26, 0xA2	; 162
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 ea       	ldi	r26, 0xA2	; 162
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 3a       	cpi	r26, 0xAE	; 174
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
	} else if (y < mid_y) {
  a2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
  a6:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
  ae:	0e 94 e6 01 	call	0x3cc	; 0x3cc <mcp2515_init>
  b2:	40 e4       	ldi	r20, 0x40	; 64
  b4:	60 ee       	ldi	r22, 0xE0	; 224
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	0e 94 c4 01 	call	0x388	; 0x388 <mcp2515_bit_modify>
  bc:	43 e0       	ldi	r20, 0x03	; 3
  be:	63 e0       	ldi	r22, 0x03	; 3
  c0:	8b e2       	ldi	r24, 0x2B	; 43
  c2:	0e 94 c4 01 	call	0x388	; 0x388 <mcp2515_bit_modify>
	} else {
		position.y = 0;
	}
	
	return position;
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	60 ee       	ldi	r22, 0xE0	; 224
  ca:	8f e0       	ldi	r24, 0x0F	; 15
}
  cc:	0e 94 c4 01 	call	0x388	; 0x388 <mcp2515_bit_modify>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	08 95       	ret

000000d4 <CAN_send_message>:
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	16 2f       	mov	r17, r22
  e2:	0e 94 02 02 	call	0x404	; 0x404 <mcp2515_read_status>
	uint8_t status = mcp2515_read_status();
	
	uint8_t can_buffer = 0;
	
	//Check if there is no pending transmission(CAN_transmission_complete can maybe used to this)
	if(!(status&(1<<TXB0CTRL_TXREQ))){
  e6:	82 ff       	sbrs	r24, 2
  e8:	09 c0       	rjmp	.+18     	; 0xfc <CAN_send_message+0x28>
		can_buffer = MCP_TXB0CTRL;
	}else if(!(status&(1<<TXB1CTRL_TXREQ))){
  ea:	84 ff       	sbrs	r24, 4
  ec:	0c c0       	rjmp	.+24     	; 0x106 <CAN_send_message+0x32>
		can_buffer = MCP_TXB1CTRL;
	}else if(!(status&(1<<TXB2CTRL_TXREQ))){
  ee:	83 fd       	sbrc	r24, 3
  f0:	51 c0       	rjmp	.+162    	; 0x194 <CAN_send_message+0xc0>
		can_buffer = MCP_TXB2CTRL;
  f2:	0f 2e       	mov	r0, r31
  f4:	f0 e5       	ldi	r31, 0x50	; 80
  f6:	ff 2e       	mov	r15, r31
  f8:	f0 2d       	mov	r31, r0
  fa:	08 c0       	rjmp	.+16     	; 0x10c <CAN_send_message+0x38>
	
	uint8_t can_buffer = 0;
	
	//Check if there is no pending transmission(CAN_transmission_complete can maybe used to this)
	if(!(status&(1<<TXB0CTRL_TXREQ))){
		can_buffer = MCP_TXB0CTRL;
  fc:	0f 2e       	mov	r0, r31
  fe:	f0 e3       	ldi	r31, 0x30	; 48
 100:	ff 2e       	mov	r15, r31
 102:	f0 2d       	mov	r31, r0
 104:	03 c0       	rjmp	.+6      	; 0x10c <CAN_send_message+0x38>
	}else if(!(status&(1<<TXB1CTRL_TXREQ))){
		can_buffer = MCP_TXB1CTRL;
 106:	68 94       	set
 108:	ff 24       	eor	r15, r15
 10a:	f6 f8       	bld	r15, 6
		can_buffer = MCP_TXB2CTRL;
	}else{
		return 1; //return 1 when all the buffers are full
	};
	
	if (priority > 3){
 10c:	14 30       	cpi	r17, 0x04	; 4
 10e:	30 f0       	brcs	.+12     	; 0x11c <CAN_send_message+0x48>
		priority = 3;
		mcp2515_bit_modify(can_buffer,0x03,priority);
 110:	43 e0       	ldi	r20, 0x03	; 3
 112:	63 e0       	ldi	r22, 0x03	; 3
 114:	8f 2d       	mov	r24, r15
 116:	0e 94 c4 01 	call	0x388	; 0x388 <mcp2515_bit_modify>
 11a:	05 c0       	rjmp	.+10     	; 0x126 <CAN_send_message+0x52>
	}else if(priority < 0){
		priority = 0;
		mcp2515_bit_modify(can_buffer,0x03,priority);
	}else{
		mcp2515_bit_modify(can_buffer,0x03,priority);
 11c:	41 2f       	mov	r20, r17
 11e:	63 e0       	ldi	r22, 0x03	; 3
 120:	8f 2d       	mov	r24, r15
 122:	0e 94 c4 01 	call	0x388	; 0x388 <mcp2515_bit_modify>
}

ISR(INT0_vect){
	//set interupt vectore value
	return INT0_vect;
 126:	68 81       	ld	r22, Y
 128:	79 81       	ldd	r23, Y+1	; 0x01
 12a:	77 27       	eor	r23, r23
	}else{
		mcp2515_bit_modify(can_buffer,0x03,priority);
	}
	
	
	mcp2515_write((can_buffer + 0x02),(((uint8_t)(message->id&0x7))<<5)); //Set CAN LO ID (maybe delete MCP_TXB0IDH &LO)
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	62 95       	swap	r22
 132:	72 95       	swap	r23
 134:	70 7f       	andi	r23, 0xF0	; 240
 136:	76 27       	eor	r23, r22
 138:	60 7f       	andi	r22, 0xF0	; 240
 13a:	76 27       	eor	r23, r22
 13c:	8f 2d       	mov	r24, r15
 13e:	8e 5f       	subi	r24, 0xFE	; 254
 140:	0e 94 9b 01 	call	0x336	; 0x336 <mcp2515_write>
	mcp2515_write((can_buffer + 0x01),(uint8_t)((message->id)>>3) & 0xff); //Set CAN HI ID
 144:	68 81       	ld	r22, Y
 146:	79 81       	ldd	r23, Y+1	; 0x01
 148:	76 95       	lsr	r23
 14a:	67 95       	ror	r22
 14c:	76 95       	lsr	r23
 14e:	67 95       	ror	r22
 150:	76 95       	lsr	r23
 152:	67 95       	ror	r22
 154:	8f 2d       	mov	r24, r15
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	0e 94 9b 01 	call	0x336	; 0x336 <mcp2515_write>
	
	//Set data bytes (max. 8 bytes)
	for(uint8_t i = 0; i < message->length; i++){
 15c:	6a 81       	ldd	r22, Y+2	; 0x02
 15e:	66 23       	and	r22, r22
 160:	79 f0       	breq	.+30     	; 0x180 <CAN_send_message+0xac>
 162:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(can_buffer+0x06+i, message->data[i]);
 164:	0f 2d       	mov	r16, r15
 166:	0a 5f       	subi	r16, 0xFA	; 250
 168:	fe 01       	movw	r30, r28
 16a:	e1 0f       	add	r30, r17
 16c:	f1 1d       	adc	r31, r1
 16e:	63 81       	ldd	r22, Z+3	; 0x03
 170:	80 2f       	mov	r24, r16
 172:	81 0f       	add	r24, r17
 174:	0e 94 9b 01 	call	0x336	; 0x336 <mcp2515_write>
	
	mcp2515_write((can_buffer + 0x02),(((uint8_t)(message->id&0x7))<<5)); //Set CAN LO ID (maybe delete MCP_TXB0IDH &LO)
	mcp2515_write((can_buffer + 0x01),(uint8_t)((message->id)>>3) & 0xff); //Set CAN HI ID
	
	//Set data bytes (max. 8 bytes)
	for(uint8_t i = 0; i < message->length; i++){
 178:	1f 5f       	subi	r17, 0xFF	; 255
 17a:	6a 81       	ldd	r22, Y+2	; 0x02
 17c:	16 17       	cp	r17, r22
 17e:	a0 f3       	brcs	.-24     	; 0x168 <CAN_send_message+0x94>
		mcp2515_write(can_buffer+0x06+i, message->data[i]);
	}
	
	//Set data length and use data frame (RTR = 0)	
	//mcp2515_write(MCP_TXB0DLC, (uint8_t)(message->length << 4));
	mcp2515_write(can_buffer+0x05,(0x0f & message->length));
 180:	6f 70       	andi	r22, 0x0F	; 15
 182:	8f 2d       	mov	r24, r15
 184:	8b 5f       	subi	r24, 0xFB	; 251
 186:	0e 94 9b 01 	call	0x336	; 0x336 <mcp2515_write>
	{
	}
	
	//mcp2515_write(can_buffer, (1<<3));
	//mcp2515_request_to_send(0)
	mcp2515_request_to_send(1);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 af 01 	call	0x35e	; 0x35e <mcp2515_request_to_send>
	return 0;
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	01 c0       	rjmp	.+2      	; 0x196 <CAN_send_message+0xc2>
	}else if(!(status&(1<<TXB1CTRL_TXREQ))){
		can_buffer = MCP_TXB1CTRL;
	}else if(!(status&(1<<TXB2CTRL_TXREQ))){
		can_buffer = MCP_TXB2CTRL;
	}else{
		return 1; //return 1 when all the buffers are full
 194:	81 e0       	ldi	r24, 0x01	; 1
	
	//mcp2515_write(can_buffer, (1<<3));
	//mcp2515_request_to_send(0)
	mcp2515_request_to_send(1);
	return 0;
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	08 95       	ret

000001a2 <CAN_receive_data>:
int CAN_int_vect(void) {
	//TODO
	return 0;
}

CAN_message_t* CAN_receive_data(CAN_message_t* message) {
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
		if(status&((1<<MCP)))
	}*/
	
	uint8_t can_buffer = MCP_RXB0CTRL;
	
	message->length = mcp2515_read(can_buffer+0x05) & 0x0f;
 1aa:	85 e6       	ldi	r24, 0x65	; 101
 1ac:	0e 94 89 01 	call	0x312	; 0x312 <mcp2515_read>
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i = 0; i <message->length; i++)
 1b4:	88 23       	and	r24, r24
 1b6:	69 f0       	breq	.+26     	; 0x1d2 <CAN_receive_data+0x30>
 1b8:	10 e0       	ldi	r17, 0x00	; 0
	{
		message->data[i] = mcp2515_read(can_buffer+0x06+i);
 1ba:	81 2f       	mov	r24, r17
 1bc:	8a 59       	subi	r24, 0x9A	; 154
 1be:	0e 94 89 01 	call	0x312	; 0x312 <mcp2515_read>
 1c2:	fe 01       	movw	r30, r28
 1c4:	e1 0f       	add	r30, r17
 1c6:	f1 1d       	adc	r31, r1
 1c8:	83 83       	std	Z+3, r24	; 0x03
	}*/
	
	uint8_t can_buffer = MCP_RXB0CTRL;
	
	message->length = mcp2515_read(can_buffer+0x05) & 0x0f;
	for (uint8_t i = 0; i <message->length; i++)
 1ca:	1f 5f       	subi	r17, 0xFF	; 255
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	18 17       	cp	r17, r24
 1d0:	a0 f3       	brcs	.-24     	; 0x1ba <CAN_receive_data+0x18>
	{
		message->data[i] = mcp2515_read(can_buffer+0x06+i);
	}
	
	message->id  = mcp2515_read(can_buffer+0x01); //read CAN HI
 1d2:	81 e6       	ldi	r24, 0x61	; 97
 1d4:	0e 94 89 01 	call	0x312	; 0x312 <mcp2515_read>
 1d8:	88 83       	st	Y, r24
 1da:	19 82       	std	Y+1, r1	; 0x01
	
	//message->id  = (uint8_t)(mcp2515_read(MCP_RXB0SIDH) << 3);
	//message->id  = (uint8_t)(mcp2515_read(MCP_RXB0SIDL) >> 5);
	
	mcp2515_bit_modify(MCP_CANINTF, (1<<0)/*0x01*/,0x00);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	8c e2       	ldi	r24, 0x2C	; 44
 1e2:	0e 94 c4 01 	call	0x388	; 0x388 <mcp2515_bit_modify>
	
	return message;
}
 1e6:	8c 2f       	mov	r24, r28
 1e8:	9d 2f       	mov	r25, r29
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	08 95       	ret

000001f2 <main>:
#include <stdlib.h>
//end retard

#define MYUBRR F_OSC/16/BAUD-1

int main(void) {
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	66 97       	sbiw	r28, 0x16	; 22
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message_send;
	CAN_message_t message_receive;
	CAN_message_t* message_received = malloc(sizeof(CAN_message_t));
	
	UART_init(MYUBRR);
 206:	8f e1       	ldi	r24, 0x1F	; 31
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 31 02 	call	0x462	; 0x462 <UART_init>
	printf("Uart initiated\n\r");
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	9f 93       	push	r25
 214:	8f 93       	push	r24
 216:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
	CAN_init();
 21a:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	printf("CAN initiated\n\r");
 21e:	87 e1       	ldi	r24, 0x17	; 23
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	9f 93       	push	r25
 224:	8f 93       	push	r24
 226:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
	
	message_send.id = 3;
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	9a 83       	std	Y+2, r25	; 0x02
 230:	89 83       	std	Y+1, r24	; 0x01
	message_send.length = 1;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	8b 83       	std	Y+3, r24	; 0x03
	message_send.data[0] = (uint8_t) 1;
 236:	8c 83       	std	Y+4, r24	; 0x04
	CAN_send_message(&message_send,0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	0e 94 6a 00 	call	0xd4	; 0xd4 <CAN_send_message>
	printf("Message sent\n\r");
 242:	87 e2       	ldi	r24, 0x27	; 39
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	9f 93       	push	r25
 248:	8f 93       	push	r24
 24a:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	24 e0       	ldi	r18, 0x04	; 4
 250:	30 e8       	ldi	r19, 0x80	; 128
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	21 50       	subi	r18, 0x01	; 1
 256:	30 40       	sbci	r19, 0x00	; 0
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x62>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x6c>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x6e>
	
	_delay_ms(100);
	
	message_received = CAN_receive_data(&message_receive);
 260:	ce 01       	movw	r24, r28
 262:	0c 96       	adiw	r24, 0x0c	; 12
 264:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <CAN_receive_data>
 268:	7c 01       	movw	r14, r24
	printf("Message id: %i\n\r", message_receive.id);
 26a:	8d 85       	ldd	r24, Y+13	; 0x0d
 26c:	8f 93       	push	r24
 26e:	8c 85       	ldd	r24, Y+12	; 0x0c
 270:	8f 93       	push	r24
 272:	86 e3       	ldi	r24, 0x36	; 54
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	9f 93       	push	r25
 278:	8f 93       	push	r24
 27a:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
	printf("Message length: %i\n\r", message_receive.length);
 27e:	8e 85       	ldd	r24, Y+14	; 0x0e
 280:	1f 92       	push	r1
 282:	8f 93       	push	r24
 284:	87 e4       	ldi	r24, 0x47	; 71
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	9f 93       	push	r25
 28a:	8f 93       	push	r24
 28c:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
	for(int i = 0; i < message_receive.length; i++) {
 290:	8e 85       	ldd	r24, Y+14	; 0x0e
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	88 23       	and	r24, r24
 29e:	01 f1       	breq	.+64     	; 0x2e0 <main+0xee>
 2a0:	6e 01       	movw	r12, r28
 2a2:	ff e0       	ldi	r31, 0x0F	; 15
 2a4:	cf 0e       	add	r12, r31
 2a6:	d1 1c       	adc	r13, r1
 2a8:	00 e0       	ldi	r16, 0x00	; 0
 2aa:	10 e0       	ldi	r17, 0x00	; 0
		printf("Message data: %i\n\r", message_receive.data[i]);
 2ac:	0f 2e       	mov	r0, r31
 2ae:	fc e5       	ldi	r31, 0x5C	; 92
 2b0:	af 2e       	mov	r10, r31
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	bf 2e       	mov	r11, r31
 2b6:	f0 2d       	mov	r31, r0
 2b8:	f6 01       	movw	r30, r12
 2ba:	81 91       	ld	r24, Z+
 2bc:	6f 01       	movw	r12, r30
 2be:	1f 92       	push	r1
 2c0:	8f 93       	push	r24
 2c2:	bf 92       	push	r11
 2c4:	af 92       	push	r10
 2c6:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
	_delay_ms(100);
	
	message_received = CAN_receive_data(&message_receive);
	printf("Message id: %i\n\r", message_receive.id);
	printf("Message length: %i\n\r", message_receive.length);
	for(int i = 0; i < message_receive.length; i++) {
 2ca:	0f 5f       	subi	r16, 0xFF	; 255
 2cc:	1f 4f       	sbci	r17, 0xFF	; 255
 2ce:	8e 85       	ldd	r24, Y+14	; 0x0e
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	08 17       	cp	r16, r24
 2dc:	19 07       	cpc	r17, r25
 2de:	64 f3       	brlt	.-40     	; 0x2b8 <main+0xc6>
		printf("Message data: %i\n\r", message_receive.data[i]);
	}
	printf("Message id: %i\n\r", message_received->id);
 2e0:	f7 01       	movw	r30, r14
 2e2:	81 81       	ldd	r24, Z+1	; 0x01
 2e4:	8f 93       	push	r24
 2e6:	80 81       	ld	r24, Z
 2e8:	8f 93       	push	r24
 2ea:	86 e3       	ldi	r24, 0x36	; 54
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	9f 93       	push	r25
 2f0:	8f 93       	push	r24
 2f2:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	f4 e0       	ldi	r31, 0x04	; 4
 300:	20 e8       	ldi	r18, 0x80	; 128
 302:	31 e0       	ldi	r19, 0x01	; 1
 304:	f1 50       	subi	r31, 0x01	; 1
 306:	20 40       	sbci	r18, 0x00	; 0
 308:	30 40       	sbci	r19, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x112>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x11c>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x11e>
 310:	f6 cf       	rjmp	.-20     	; 0x2fe <main+0x10c>

00000312 <mcp2515_read>:
	}
	
	return 0;
}

uint8_t mcp2515_read(uint8_t address) {
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
	//Select CAN-controller
	SPI_select();
 316:	0e 94 23 02 	call	0x446	; 0x446 <SPI_select>
	
	SPI_write(MCP_READ);		//Send read command
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
	SPI_write(address);			//Send address
 320:	8c 2f       	mov	r24, r28
 322:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
	
	uint8_t result = SPI_read();	//Read result
 326:	0e 94 1e 02 	call	0x43c	; 0x43c <SPI_read>
 32a:	c8 2f       	mov	r28, r24
	
	//De-select CAN-controller
	SPI_deselect();
 32c:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_deselect>
	
	return result;
}
 330:	8c 2f       	mov	r24, r28
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data) {
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	d8 2f       	mov	r29, r24
 33c:	c6 2f       	mov	r28, r22
	//Select CAN-controller
	SPI_select();
 33e:	0e 94 23 02 	call	0x446	; 0x446 <SPI_select>
		
	SPI_write(MCP_WRITE);	//Send write command
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
	SPI_write(address);		//Send address
 348:	8d 2f       	mov	r24, r29
 34a:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
	SPI_write(data);			//Send data
 34e:	8c 2f       	mov	r24, r28
 350:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
		
	//De-select CAN-controller
	SPI_deselect();
 354:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_deselect>
}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command) {
 35e:	cf 93       	push	r28
 360:	c8 2f       	mov	r28, r24
	//Select CAN-controller
	SPI_select();
 362:	0e 94 23 02 	call	0x446	; 0x446 <SPI_select>
	
	//Check the last three bits for the commands
	if(command < 8) {
 366:	c8 30       	cpi	r28, 0x08	; 8
 368:	58 f4       	brcc	.+22     	; 0x380 <mcp2515_request_to_send+0x22>
		SPI_write(MCP_RTS | (1<<command));
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	c9 01       	movw	r24, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <mcp2515_request_to_send+0x18>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	ca 95       	dec	r28
 378:	e2 f7       	brpl	.-8      	; 0x372 <mcp2515_request_to_send+0x14>
 37a:	80 68       	ori	r24, 0x80	; 128
 37c:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
	} 
	
	//Deselect CAN-controller
	SPI_deselect();	
 380:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_deselect>
}
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	18 2f       	mov	r17, r24
 390:	d6 2f       	mov	r29, r22
 392:	c4 2f       	mov	r28, r20
	//Select CAN-controller
	SPI_select();
 394:	0e 94 23 02 	call	0x446	; 0x446 <SPI_select>
		
	SPI_write(MCP_BITMOD);		//Send bit modify command
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
	SPI_write(address);			//Send address
 39e:	81 2f       	mov	r24, r17
 3a0:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
	SPI_write(mask);				//Send mask byte
 3a4:	8d 2f       	mov	r24, r29
 3a6:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
	SPI_write(data);				//Send data
 3aa:	8c 2f       	mov	r24, r28
 3ac:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
		
	//Deselect CAN-controller
	SPI_deselect();
 3b0:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_deselect>
		
	return 0;
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	08 95       	ret

000003bc <mcp2515_reset>:

void mcp2515_reset(void) {
	SPI_select();			//Select CAN-controller
 3bc:	0e 94 23 02 	call	0x446	; 0x446 <SPI_select>
	SPI_write(MCP_RESET);	//Send reset command
 3c0:	80 ec       	ldi	r24, 0xC0	; 192
 3c2:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
	SPI_deselect();			//De-select CAN-controller
 3c6:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_deselect>
 3ca:	08 95       	ret

000003cc <mcp2515_init>:
#include <avr/io.h>
#include "uart.h"
#include "spi.h"
#include "mcp2515.h"

uint8_t mcp2515_init(void) {
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	1f 92       	push	r1
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//Initialize SPI driver
	SPI_init();
 3d6:	0e 94 10 02 	call	0x420	; 0x420 <SPI_init>
	
	//Reset the CAN controller
	mcp2515_reset();
 3da:	0e 94 de 01 	call	0x3bc	; 0x3bc <mcp2515_reset>
	
	//Self-test
	value = mcp2515_read(MCP_CANSTAT);
 3de:	8e e0       	ldi	r24, 0x0E	; 14
 3e0:	0e 94 89 01 	call	0x312	; 0x312 <mcp2515_read>
 3e4:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	80 7e       	andi	r24, 0xE0	; 224
 3ea:	80 38       	cpi	r24, 0x80	; 128
 3ec:	31 f0       	breq	.+12     	; 0x3fa <mcp2515_init+0x2e>
		UART_print("MCP2515 is NOT in configuration mode after reset!");
 3ee:	8f e6       	ldi	r24, 0x6F	; 111
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 44 02 	call	0x488	; 0x488 <UART_print>
		return 1;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <mcp2515_init+0x30>
	}
	
	return 0;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
}
 3fc:	0f 90       	pop	r0
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <mcp2515_read_status>:
	SPI_deselect();			//De-select CAN-controller
}



uint8_t mcp2515_read_status(void) {
 404:	cf 93       	push	r28
	//Select CAN-controller
	SPI_select();
 406:	0e 94 23 02 	call	0x446	; 0x446 <SPI_select>
	
	SPI_write(MCP_READ_STATUS);	//Send read status command
 40a:	80 ea       	ldi	r24, 0xA0	; 160
 40c:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_write>
	uint8_t result = SPI_read();		//Read result
 410:	0e 94 1e 02 	call	0x43c	; 0x43c <SPI_read>
 414:	c8 2f       	mov	r28, r24
	
	//Deselect CAN-controller
	SPI_deselect();
 416:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_deselect>
	
	return result;
 41a:	8c 2f       	mov	r24, r28
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <SPI_init>:
#define SPI_MISO PB6
#define SPI_SCK PB7

int SPI_init(void) {
	//Set MOSI, SCK and SS as output pins
	SPI_DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_SS);
 420:	87 b3       	in	r24, 0x17	; 23
 422:	80 6b       	ori	r24, 0xB0	; 176
 424:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin (maybe not needed)
	SPI_DDRB &= ~(1<<SPI_MISO);
 426:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR	 |= ((1<<SPE) | (1<<MSTR) | ((1<<SPR1)| (1<<SPR0)));
 428:	8d b1       	in	r24, 0x0d	; 13
 42a:	83 65       	ori	r24, 0x53	; 83
 42c:	8d b9       	out	0x0d, r24	; 13
	
	return 0;
}
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	08 95       	ret

00000434 <SPI_write>:

void SPI_write(uint8_t data) {
	
	//Start the transmission
	SPDR = data;
 434:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for data to be transmitted (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
 436:	77 9b       	sbis	0x0e, 7	; 14
 438:	fe cf       	rjmp	.-4      	; 0x436 <SPI_write+0x2>
	
}
 43a:	08 95       	ret

0000043c <SPI_read>:

uint8_t SPI_read(void) {
	//Send dummy data to read from slave
	SPDR=0x00;
 43c:	1f b8       	out	0x0f, r1	; 15
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
 43e:	77 9b       	sbis	0x0e, 7	; 14
 440:	fe cf       	rjmp	.-4      	; 0x43e <SPI_read+0x2>
	
	return SPDR;
 442:	8f b1       	in	r24, 0x0f	; 15
}
 444:	08 95       	ret

00000446 <SPI_select>:

void SPI_select(void) {
	//Set !SS to 0 to select the slave
	SPI_PORT &= ~(1<<SPI_SS);
 446:	c4 98       	cbi	0x18, 4	; 24
 448:	08 95       	ret

0000044a <SPI_deselect>:
}

void SPI_deselect(void) {
	//Set !SS to 1 to de-select the slave
	SPI_PORT |= (1<<SPI_SS);
 44a:	c4 9a       	sbi	0x18, 4	; 24
 44c:	08 95       	ret

0000044e <UART_putchar>:
	return 0;
}

int UART_putchar(char c, FILE *f) {
	//Wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
 44e:	5d 9b       	sbis	0x0b, 5	; 11
 450:	fe cf       	rjmp	.-4      	; 0x44e <UART_putchar>
	
	//Put data into buffer
	UDR0 = c;
 452:	8c b9       	out	0x0c, r24	; 12

	return 0;
}
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	08 95       	ret

0000045a <UART_recchar>:

unsigned char UART_recchar(void) {
	//Wait for data to be received
	while (!(UCSR0A & (1<<RXC0)));
 45a:	5f 9b       	sbis	0x0b, 7	; 11
 45c:	fe cf       	rjmp	.-4      	; 0x45a <UART_recchar>
	
	//Return data
	return UDR0;	
 45e:	8c b1       	in	r24, 0x0c	; 12
}
 460:	08 95       	ret

00000462 <UART_init>:

FILE *uart;

int UART_init(unsigned int baudrate) {
	//Set UART0 baud rate
	UBRR0L = (unsigned char)(baudrate);
 462:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (unsigned char)(baudrate >> 8);
 464:	90 bd       	out	0x20, r25	; 32
	
	//Enable TX0 and RX0
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 466:	88 e1       	ldi	r24, 0x18	; 24
 468:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 46a:	8e e8       	ldi	r24, 0x8E	; 142
 46c:	80 bd       	out	0x20, r24	; 32
	
	//Connect printf
	uart = fdevopen(&UART_putchar, &UART_recchar);
 46e:	6d e2       	ldi	r22, 0x2D	; 45
 470:	72 e0       	ldi	r23, 0x02	; 2
 472:	87 e2       	ldi	r24, 0x27	; 39
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	0e 94 59 02 	call	0x4b2	; 0x4b2 <fdevopen>
 47a:	90 93 a3 01 	sts	0x01A3, r25
 47e:	80 93 a2 01 	sts	0x01A2, r24

	return 0;
}
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	08 95       	ret

00000488 <UART_print>:
	
	//Return data
	return UDR0;	
}

int UART_print(char * str){
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	ec 01       	movw	r28, r24
	int i = 0;
	while (str[i] != 0x00){
 48e:	88 81       	ld	r24, Y
 490:	88 23       	and	r24, r24
 492:	51 f0       	breq	.+20     	; 0x4a8 <UART_print+0x20>
	
	//Return data
	return UDR0;	
}

int UART_print(char * str){
 494:	21 96       	adiw	r28, 0x01	; 1
	int i = 0;
	while (str[i] != 0x00){
		UART_putchar(str[i],uart);
 496:	60 91 a2 01 	lds	r22, 0x01A2
 49a:	70 91 a3 01 	lds	r23, 0x01A3
 49e:	0e 94 27 02 	call	0x44e	; 0x44e <UART_putchar>
	return UDR0;	
}

int UART_print(char * str){
	int i = 0;
	while (str[i] != 0x00){
 4a2:	89 91       	ld	r24, Y+
 4a4:	81 11       	cpse	r24, r1
 4a6:	f7 cf       	rjmp	.-18     	; 0x496 <UART_print+0xe>
		UART_putchar(str[i],uart);
		i++;
	}
	return 0;
}
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <fdevopen>:
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	ec 01       	movw	r28, r24
 4bc:	8b 01       	movw	r16, r22
 4be:	00 97       	sbiw	r24, 0x00	; 0
 4c0:	31 f4       	brne	.+12     	; 0x4ce <fdevopen+0x1c>
 4c2:	61 15       	cp	r22, r1
 4c4:	71 05       	cpc	r23, r1
 4c6:	19 f4       	brne	.+6      	; 0x4ce <fdevopen+0x1c>
 4c8:	e0 e0       	ldi	r30, 0x00	; 0
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	37 c0       	rjmp	.+110    	; 0x53c <__stack+0x3d>
 4ce:	6e e0       	ldi	r22, 0x0E	; 14
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 94 04 	call	0x928	; 0x928 <calloc>
 4da:	fc 01       	movw	r30, r24
 4dc:	00 97       	sbiw	r24, 0x00	; 0
 4de:	a1 f3       	breq	.-24     	; 0x4c8 <fdevopen+0x16>
 4e0:	80 e8       	ldi	r24, 0x80	; 128
 4e2:	83 83       	std	Z+3, r24	; 0x03
 4e4:	01 15       	cp	r16, r1
 4e6:	11 05       	cpc	r17, r1
 4e8:	71 f0       	breq	.+28     	; 0x506 <__stack+0x7>
 4ea:	13 87       	std	Z+11, r17	; 0x0b
 4ec:	02 87       	std	Z+10, r16	; 0x0a
 4ee:	81 e8       	ldi	r24, 0x81	; 129
 4f0:	83 83       	std	Z+3, r24	; 0x03
 4f2:	80 91 a4 01 	lds	r24, 0x01A4
 4f6:	90 91 a5 01 	lds	r25, 0x01A5
 4fa:	89 2b       	or	r24, r25
 4fc:	21 f4       	brne	.+8      	; 0x506 <__stack+0x7>
 4fe:	f0 93 a5 01 	sts	0x01A5, r31
 502:	e0 93 a4 01 	sts	0x01A4, r30
 506:	20 97       	sbiw	r28, 0x00	; 0
 508:	c9 f0       	breq	.+50     	; 0x53c <__stack+0x3d>
 50a:	d1 87       	std	Z+9, r29	; 0x09
 50c:	c0 87       	std	Z+8, r28	; 0x08
 50e:	83 81       	ldd	r24, Z+3	; 0x03
 510:	82 60       	ori	r24, 0x02	; 2
 512:	83 83       	std	Z+3, r24	; 0x03
 514:	80 91 a6 01 	lds	r24, 0x01A6
 518:	90 91 a7 01 	lds	r25, 0x01A7
 51c:	89 2b       	or	r24, r25
 51e:	71 f4       	brne	.+28     	; 0x53c <__stack+0x3d>
 520:	f0 93 a7 01 	sts	0x01A7, r31
 524:	e0 93 a6 01 	sts	0x01A6, r30
 528:	80 91 a8 01 	lds	r24, 0x01A8
 52c:	90 91 a9 01 	lds	r25, 0x01A9
 530:	89 2b       	or	r24, r25
 532:	21 f4       	brne	.+8      	; 0x53c <__stack+0x3d>
 534:	f0 93 a9 01 	sts	0x01A9, r31
 538:	e0 93 a8 01 	sts	0x01A8, r30
 53c:	cf 01       	movw	r24, r30
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	08 95       	ret

00000548 <printf>:
 548:	a0 e0       	ldi	r26, 0x00	; 0
 54a:	b0 e0       	ldi	r27, 0x00	; 0
 54c:	ea ea       	ldi	r30, 0xAA	; 170
 54e:	f2 e0       	ldi	r31, 0x02	; 2
 550:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__prologue_saves__+0x20>
 554:	fe 01       	movw	r30, r28
 556:	35 96       	adiw	r30, 0x05	; 5
 558:	61 91       	ld	r22, Z+
 55a:	71 91       	ld	r23, Z+
 55c:	af 01       	movw	r20, r30
 55e:	80 91 a6 01 	lds	r24, 0x01A6
 562:	90 91 a7 01 	lds	r25, 0x01A7
 566:	0e 94 b8 02 	call	0x570	; 0x570 <vfprintf>
 56a:	e2 e0       	ldi	r30, 0x02	; 2
 56c:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__epilogue_restores__+0x20>

00000570 <vfprintf>:
 570:	ac e0       	ldi	r26, 0x0C	; 12
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	ee eb       	ldi	r30, 0xBE	; 190
 576:	f2 e0       	ldi	r31, 0x02	; 2
 578:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__prologue_saves__>
 57c:	7c 01       	movw	r14, r24
 57e:	6b 01       	movw	r12, r22
 580:	8a 01       	movw	r16, r20
 582:	fc 01       	movw	r30, r24
 584:	17 82       	std	Z+7, r1	; 0x07
 586:	16 82       	std	Z+6, r1	; 0x06
 588:	83 81       	ldd	r24, Z+3	; 0x03
 58a:	81 ff       	sbrs	r24, 1
 58c:	c6 c1       	rjmp	.+908    	; 0x91a <vfprintf+0x3aa>
 58e:	88 24       	eor	r8, r8
 590:	83 94       	inc	r8
 592:	91 2c       	mov	r9, r1
 594:	8c 0e       	add	r8, r28
 596:	9d 1e       	adc	r9, r29
 598:	f7 01       	movw	r30, r14
 59a:	93 81       	ldd	r25, Z+3	; 0x03
 59c:	f6 01       	movw	r30, r12
 59e:	93 fd       	sbrc	r25, 3
 5a0:	85 91       	lpm	r24, Z+
 5a2:	93 ff       	sbrs	r25, 3
 5a4:	81 91       	ld	r24, Z+
 5a6:	6f 01       	movw	r12, r30
 5a8:	88 23       	and	r24, r24
 5aa:	09 f4       	brne	.+2      	; 0x5ae <vfprintf+0x3e>
 5ac:	b2 c1       	rjmp	.+868    	; 0x912 <vfprintf+0x3a2>
 5ae:	85 32       	cpi	r24, 0x25	; 37
 5b0:	39 f4       	brne	.+14     	; 0x5c0 <vfprintf+0x50>
 5b2:	93 fd       	sbrc	r25, 3
 5b4:	85 91       	lpm	r24, Z+
 5b6:	93 ff       	sbrs	r25, 3
 5b8:	81 91       	ld	r24, Z+
 5ba:	6f 01       	movw	r12, r30
 5bc:	85 32       	cpi	r24, 0x25	; 37
 5be:	29 f4       	brne	.+10     	; 0x5ca <vfprintf+0x5a>
 5c0:	b7 01       	movw	r22, r14
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 07 06 	call	0xc0e	; 0xc0e <fputc>
 5c8:	e7 cf       	rjmp	.-50     	; 0x598 <vfprintf+0x28>
 5ca:	51 2c       	mov	r5, r1
 5cc:	31 2c       	mov	r3, r1
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	20 32       	cpi	r18, 0x20	; 32
 5d2:	a8 f4       	brcc	.+42     	; 0x5fe <vfprintf+0x8e>
 5d4:	8b 32       	cpi	r24, 0x2B	; 43
 5d6:	61 f0       	breq	.+24     	; 0x5f0 <vfprintf+0x80>
 5d8:	28 f4       	brcc	.+10     	; 0x5e4 <vfprintf+0x74>
 5da:	80 32       	cpi	r24, 0x20	; 32
 5dc:	51 f0       	breq	.+20     	; 0x5f2 <vfprintf+0x82>
 5de:	83 32       	cpi	r24, 0x23	; 35
 5e0:	71 f4       	brne	.+28     	; 0x5fe <vfprintf+0x8e>
 5e2:	0b c0       	rjmp	.+22     	; 0x5fa <vfprintf+0x8a>
 5e4:	8d 32       	cpi	r24, 0x2D	; 45
 5e6:	39 f0       	breq	.+14     	; 0x5f6 <vfprintf+0x86>
 5e8:	80 33       	cpi	r24, 0x30	; 48
 5ea:	49 f4       	brne	.+18     	; 0x5fe <vfprintf+0x8e>
 5ec:	21 60       	ori	r18, 0x01	; 1
 5ee:	28 c0       	rjmp	.+80     	; 0x640 <vfprintf+0xd0>
 5f0:	22 60       	ori	r18, 0x02	; 2
 5f2:	24 60       	ori	r18, 0x04	; 4
 5f4:	25 c0       	rjmp	.+74     	; 0x640 <vfprintf+0xd0>
 5f6:	28 60       	ori	r18, 0x08	; 8
 5f8:	23 c0       	rjmp	.+70     	; 0x640 <vfprintf+0xd0>
 5fa:	20 61       	ori	r18, 0x10	; 16
 5fc:	21 c0       	rjmp	.+66     	; 0x640 <vfprintf+0xd0>
 5fe:	27 fd       	sbrc	r18, 7
 600:	27 c0       	rjmp	.+78     	; 0x650 <vfprintf+0xe0>
 602:	38 2f       	mov	r19, r24
 604:	30 53       	subi	r19, 0x30	; 48
 606:	3a 30       	cpi	r19, 0x0A	; 10
 608:	78 f4       	brcc	.+30     	; 0x628 <vfprintf+0xb8>
 60a:	26 ff       	sbrs	r18, 6
 60c:	06 c0       	rjmp	.+12     	; 0x61a <vfprintf+0xaa>
 60e:	fa e0       	ldi	r31, 0x0A	; 10
 610:	5f 9e       	mul	r5, r31
 612:	30 0d       	add	r19, r0
 614:	11 24       	eor	r1, r1
 616:	53 2e       	mov	r5, r19
 618:	13 c0       	rjmp	.+38     	; 0x640 <vfprintf+0xd0>
 61a:	8a e0       	ldi	r24, 0x0A	; 10
 61c:	38 9e       	mul	r3, r24
 61e:	30 0d       	add	r19, r0
 620:	11 24       	eor	r1, r1
 622:	33 2e       	mov	r3, r19
 624:	20 62       	ori	r18, 0x20	; 32
 626:	0c c0       	rjmp	.+24     	; 0x640 <vfprintf+0xd0>
 628:	8e 32       	cpi	r24, 0x2E	; 46
 62a:	21 f4       	brne	.+8      	; 0x634 <vfprintf+0xc4>
 62c:	26 fd       	sbrc	r18, 6
 62e:	71 c1       	rjmp	.+738    	; 0x912 <vfprintf+0x3a2>
 630:	20 64       	ori	r18, 0x40	; 64
 632:	06 c0       	rjmp	.+12     	; 0x640 <vfprintf+0xd0>
 634:	8c 36       	cpi	r24, 0x6C	; 108
 636:	11 f4       	brne	.+4      	; 0x63c <vfprintf+0xcc>
 638:	20 68       	ori	r18, 0x80	; 128
 63a:	02 c0       	rjmp	.+4      	; 0x640 <vfprintf+0xd0>
 63c:	88 36       	cpi	r24, 0x68	; 104
 63e:	41 f4       	brne	.+16     	; 0x650 <vfprintf+0xe0>
 640:	f6 01       	movw	r30, r12
 642:	93 fd       	sbrc	r25, 3
 644:	85 91       	lpm	r24, Z+
 646:	93 ff       	sbrs	r25, 3
 648:	81 91       	ld	r24, Z+
 64a:	6f 01       	movw	r12, r30
 64c:	81 11       	cpse	r24, r1
 64e:	c0 cf       	rjmp	.-128    	; 0x5d0 <vfprintf+0x60>
 650:	98 2f       	mov	r25, r24
 652:	95 54       	subi	r25, 0x45	; 69
 654:	93 30       	cpi	r25, 0x03	; 3
 656:	18 f0       	brcs	.+6      	; 0x65e <vfprintf+0xee>
 658:	90 52       	subi	r25, 0x20	; 32
 65a:	93 30       	cpi	r25, 0x03	; 3
 65c:	28 f4       	brcc	.+10     	; 0x668 <vfprintf+0xf8>
 65e:	0c 5f       	subi	r16, 0xFC	; 252
 660:	1f 4f       	sbci	r17, 0xFF	; 255
 662:	ff e3       	ldi	r31, 0x3F	; 63
 664:	f9 83       	std	Y+1, r31	; 0x01
 666:	0d c0       	rjmp	.+26     	; 0x682 <vfprintf+0x112>
 668:	83 36       	cpi	r24, 0x63	; 99
 66a:	31 f0       	breq	.+12     	; 0x678 <vfprintf+0x108>
 66c:	83 37       	cpi	r24, 0x73	; 115
 66e:	71 f0       	breq	.+28     	; 0x68c <vfprintf+0x11c>
 670:	83 35       	cpi	r24, 0x53	; 83
 672:	09 f0       	breq	.+2      	; 0x676 <vfprintf+0x106>
 674:	5e c0       	rjmp	.+188    	; 0x732 <vfprintf+0x1c2>
 676:	23 c0       	rjmp	.+70     	; 0x6be <vfprintf+0x14e>
 678:	f8 01       	movw	r30, r16
 67a:	80 81       	ld	r24, Z
 67c:	89 83       	std	Y+1, r24	; 0x01
 67e:	0e 5f       	subi	r16, 0xFE	; 254
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	44 24       	eor	r4, r4
 684:	43 94       	inc	r4
 686:	51 2c       	mov	r5, r1
 688:	54 01       	movw	r10, r8
 68a:	15 c0       	rjmp	.+42     	; 0x6b6 <vfprintf+0x146>
 68c:	38 01       	movw	r6, r16
 68e:	f2 e0       	ldi	r31, 0x02	; 2
 690:	6f 0e       	add	r6, r31
 692:	71 1c       	adc	r7, r1
 694:	f8 01       	movw	r30, r16
 696:	a0 80       	ld	r10, Z
 698:	b1 80       	ldd	r11, Z+1	; 0x01
 69a:	26 ff       	sbrs	r18, 6
 69c:	03 c0       	rjmp	.+6      	; 0x6a4 <vfprintf+0x134>
 69e:	65 2d       	mov	r22, r5
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <vfprintf+0x138>
 6a4:	6f ef       	ldi	r22, 0xFF	; 255
 6a6:	7f ef       	ldi	r23, 0xFF	; 255
 6a8:	c5 01       	movw	r24, r10
 6aa:	2c 87       	std	Y+12, r18	; 0x0c
 6ac:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <strnlen>
 6b0:	2c 01       	movw	r4, r24
 6b2:	83 01       	movw	r16, r6
 6b4:	2c 85       	ldd	r18, Y+12	; 0x0c
 6b6:	6f e7       	ldi	r22, 0x7F	; 127
 6b8:	26 2e       	mov	r2, r22
 6ba:	22 22       	and	r2, r18
 6bc:	18 c0       	rjmp	.+48     	; 0x6ee <vfprintf+0x17e>
 6be:	38 01       	movw	r6, r16
 6c0:	f2 e0       	ldi	r31, 0x02	; 2
 6c2:	6f 0e       	add	r6, r31
 6c4:	71 1c       	adc	r7, r1
 6c6:	f8 01       	movw	r30, r16
 6c8:	a0 80       	ld	r10, Z
 6ca:	b1 80       	ldd	r11, Z+1	; 0x01
 6cc:	26 ff       	sbrs	r18, 6
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <vfprintf+0x166>
 6d0:	65 2d       	mov	r22, r5
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <vfprintf+0x16a>
 6d6:	6f ef       	ldi	r22, 0xFF	; 255
 6d8:	7f ef       	ldi	r23, 0xFF	; 255
 6da:	c5 01       	movw	r24, r10
 6dc:	2c 87       	std	Y+12, r18	; 0x0c
 6de:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <strnlen_P>
 6e2:	2c 01       	movw	r4, r24
 6e4:	2c 85       	ldd	r18, Y+12	; 0x0c
 6e6:	50 e8       	ldi	r21, 0x80	; 128
 6e8:	25 2e       	mov	r2, r21
 6ea:	22 2a       	or	r2, r18
 6ec:	83 01       	movw	r16, r6
 6ee:	23 fc       	sbrc	r2, 3
 6f0:	1c c0       	rjmp	.+56     	; 0x72a <vfprintf+0x1ba>
 6f2:	06 c0       	rjmp	.+12     	; 0x700 <vfprintf+0x190>
 6f4:	b7 01       	movw	r22, r14
 6f6:	80 e2       	ldi	r24, 0x20	; 32
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 07 06 	call	0xc0e	; 0xc0e <fputc>
 6fe:	3a 94       	dec	r3
 700:	83 2d       	mov	r24, r3
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	48 16       	cp	r4, r24
 706:	59 06       	cpc	r5, r25
 708:	a8 f3       	brcs	.-22     	; 0x6f4 <vfprintf+0x184>
 70a:	0f c0       	rjmp	.+30     	; 0x72a <vfprintf+0x1ba>
 70c:	f5 01       	movw	r30, r10
 70e:	27 fc       	sbrc	r2, 7
 710:	85 91       	lpm	r24, Z+
 712:	27 fe       	sbrs	r2, 7
 714:	81 91       	ld	r24, Z+
 716:	5f 01       	movw	r10, r30
 718:	b7 01       	movw	r22, r14
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 07 06 	call	0xc0e	; 0xc0e <fputc>
 720:	31 10       	cpse	r3, r1
 722:	3a 94       	dec	r3
 724:	f1 e0       	ldi	r31, 0x01	; 1
 726:	4f 1a       	sub	r4, r31
 728:	51 08       	sbc	r5, r1
 72a:	41 14       	cp	r4, r1
 72c:	51 04       	cpc	r5, r1
 72e:	71 f7       	brne	.-36     	; 0x70c <vfprintf+0x19c>
 730:	ed c0       	rjmp	.+474    	; 0x90c <vfprintf+0x39c>
 732:	84 36       	cpi	r24, 0x64	; 100
 734:	11 f0       	breq	.+4      	; 0x73a <vfprintf+0x1ca>
 736:	89 36       	cpi	r24, 0x69	; 105
 738:	41 f5       	brne	.+80     	; 0x78a <vfprintf+0x21a>
 73a:	f8 01       	movw	r30, r16
 73c:	27 ff       	sbrs	r18, 7
 73e:	07 c0       	rjmp	.+14     	; 0x74e <vfprintf+0x1de>
 740:	60 81       	ld	r22, Z
 742:	71 81       	ldd	r23, Z+1	; 0x01
 744:	82 81       	ldd	r24, Z+2	; 0x02
 746:	93 81       	ldd	r25, Z+3	; 0x03
 748:	0c 5f       	subi	r16, 0xFC	; 252
 74a:	1f 4f       	sbci	r17, 0xFF	; 255
 74c:	08 c0       	rjmp	.+16     	; 0x75e <vfprintf+0x1ee>
 74e:	60 81       	ld	r22, Z
 750:	71 81       	ldd	r23, Z+1	; 0x01
 752:	88 27       	eor	r24, r24
 754:	77 fd       	sbrc	r23, 7
 756:	80 95       	com	r24
 758:	98 2f       	mov	r25, r24
 75a:	0e 5f       	subi	r16, 0xFE	; 254
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	4f e6       	ldi	r20, 0x6F	; 111
 760:	b4 2e       	mov	r11, r20
 762:	b2 22       	and	r11, r18
 764:	97 ff       	sbrs	r25, 7
 766:	09 c0       	rjmp	.+18     	; 0x77a <vfprintf+0x20a>
 768:	90 95       	com	r25
 76a:	80 95       	com	r24
 76c:	70 95       	com	r23
 76e:	61 95       	neg	r22
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	8f 4f       	sbci	r24, 0xFF	; 255
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	f0 e8       	ldi	r31, 0x80	; 128
 778:	bf 2a       	or	r11, r31
 77a:	2a e0       	ldi	r18, 0x0A	; 10
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	a4 01       	movw	r20, r8
 780:	0e 94 33 06 	call	0xc66	; 0xc66 <__ultoa_invert>
 784:	a8 2e       	mov	r10, r24
 786:	a8 18       	sub	r10, r8
 788:	43 c0       	rjmp	.+134    	; 0x810 <vfprintf+0x2a0>
 78a:	85 37       	cpi	r24, 0x75	; 117
 78c:	31 f4       	brne	.+12     	; 0x79a <vfprintf+0x22a>
 78e:	3f ee       	ldi	r19, 0xEF	; 239
 790:	b3 2e       	mov	r11, r19
 792:	b2 22       	and	r11, r18
 794:	2a e0       	ldi	r18, 0x0A	; 10
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	24 c0       	rjmp	.+72     	; 0x7e2 <vfprintf+0x272>
 79a:	99 ef       	ldi	r25, 0xF9	; 249
 79c:	b9 2e       	mov	r11, r25
 79e:	b2 22       	and	r11, r18
 7a0:	8f 36       	cpi	r24, 0x6F	; 111
 7a2:	b9 f0       	breq	.+46     	; 0x7d2 <vfprintf+0x262>
 7a4:	20 f4       	brcc	.+8      	; 0x7ae <vfprintf+0x23e>
 7a6:	88 35       	cpi	r24, 0x58	; 88
 7a8:	09 f0       	breq	.+2      	; 0x7ac <vfprintf+0x23c>
 7aa:	b3 c0       	rjmp	.+358    	; 0x912 <vfprintf+0x3a2>
 7ac:	0d c0       	rjmp	.+26     	; 0x7c8 <vfprintf+0x258>
 7ae:	80 37       	cpi	r24, 0x70	; 112
 7b0:	21 f0       	breq	.+8      	; 0x7ba <vfprintf+0x24a>
 7b2:	88 37       	cpi	r24, 0x78	; 120
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <vfprintf+0x248>
 7b6:	ad c0       	rjmp	.+346    	; 0x912 <vfprintf+0x3a2>
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0x24e>
 7ba:	20 e1       	ldi	r18, 0x10	; 16
 7bc:	b2 2a       	or	r11, r18
 7be:	b4 fe       	sbrs	r11, 4
 7c0:	0b c0       	rjmp	.+22     	; 0x7d8 <vfprintf+0x268>
 7c2:	84 e0       	ldi	r24, 0x04	; 4
 7c4:	b8 2a       	or	r11, r24
 7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <vfprintf+0x268>
 7c8:	24 ff       	sbrs	r18, 4
 7ca:	09 c0       	rjmp	.+18     	; 0x7de <vfprintf+0x26e>
 7cc:	e6 e0       	ldi	r30, 0x06	; 6
 7ce:	be 2a       	or	r11, r30
 7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0x26e>
 7d2:	28 e0       	ldi	r18, 0x08	; 8
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <vfprintf+0x272>
 7d8:	20 e1       	ldi	r18, 0x10	; 16
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <vfprintf+0x272>
 7de:	20 e1       	ldi	r18, 0x10	; 16
 7e0:	32 e0       	ldi	r19, 0x02	; 2
 7e2:	f8 01       	movw	r30, r16
 7e4:	b7 fe       	sbrs	r11, 7
 7e6:	07 c0       	rjmp	.+14     	; 0x7f6 <vfprintf+0x286>
 7e8:	60 81       	ld	r22, Z
 7ea:	71 81       	ldd	r23, Z+1	; 0x01
 7ec:	82 81       	ldd	r24, Z+2	; 0x02
 7ee:	93 81       	ldd	r25, Z+3	; 0x03
 7f0:	0c 5f       	subi	r16, 0xFC	; 252
 7f2:	1f 4f       	sbci	r17, 0xFF	; 255
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x292>
 7f6:	60 81       	ld	r22, Z
 7f8:	71 81       	ldd	r23, Z+1	; 0x01
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 5f       	subi	r16, 0xFE	; 254
 800:	1f 4f       	sbci	r17, 0xFF	; 255
 802:	a4 01       	movw	r20, r8
 804:	0e 94 33 06 	call	0xc66	; 0xc66 <__ultoa_invert>
 808:	a8 2e       	mov	r10, r24
 80a:	a8 18       	sub	r10, r8
 80c:	ff e7       	ldi	r31, 0x7F	; 127
 80e:	bf 22       	and	r11, r31
 810:	b6 fe       	sbrs	r11, 6
 812:	0b c0       	rjmp	.+22     	; 0x82a <vfprintf+0x2ba>
 814:	2b 2d       	mov	r18, r11
 816:	2e 7f       	andi	r18, 0xFE	; 254
 818:	a5 14       	cp	r10, r5
 81a:	50 f4       	brcc	.+20     	; 0x830 <vfprintf+0x2c0>
 81c:	b4 fe       	sbrs	r11, 4
 81e:	0a c0       	rjmp	.+20     	; 0x834 <vfprintf+0x2c4>
 820:	b2 fc       	sbrc	r11, 2
 822:	08 c0       	rjmp	.+16     	; 0x834 <vfprintf+0x2c4>
 824:	2b 2d       	mov	r18, r11
 826:	2e 7e       	andi	r18, 0xEE	; 238
 828:	05 c0       	rjmp	.+10     	; 0x834 <vfprintf+0x2c4>
 82a:	7a 2c       	mov	r7, r10
 82c:	2b 2d       	mov	r18, r11
 82e:	03 c0       	rjmp	.+6      	; 0x836 <vfprintf+0x2c6>
 830:	7a 2c       	mov	r7, r10
 832:	01 c0       	rjmp	.+2      	; 0x836 <vfprintf+0x2c6>
 834:	75 2c       	mov	r7, r5
 836:	24 ff       	sbrs	r18, 4
 838:	0d c0       	rjmp	.+26     	; 0x854 <vfprintf+0x2e4>
 83a:	fe 01       	movw	r30, r28
 83c:	ea 0d       	add	r30, r10
 83e:	f1 1d       	adc	r31, r1
 840:	80 81       	ld	r24, Z
 842:	80 33       	cpi	r24, 0x30	; 48
 844:	11 f4       	brne	.+4      	; 0x84a <vfprintf+0x2da>
 846:	29 7e       	andi	r18, 0xE9	; 233
 848:	09 c0       	rjmp	.+18     	; 0x85c <vfprintf+0x2ec>
 84a:	22 ff       	sbrs	r18, 2
 84c:	06 c0       	rjmp	.+12     	; 0x85a <vfprintf+0x2ea>
 84e:	73 94       	inc	r7
 850:	73 94       	inc	r7
 852:	04 c0       	rjmp	.+8      	; 0x85c <vfprintf+0x2ec>
 854:	82 2f       	mov	r24, r18
 856:	86 78       	andi	r24, 0x86	; 134
 858:	09 f0       	breq	.+2      	; 0x85c <vfprintf+0x2ec>
 85a:	73 94       	inc	r7
 85c:	23 fd       	sbrc	r18, 3
 85e:	14 c0       	rjmp	.+40     	; 0x888 <vfprintf+0x318>
 860:	20 ff       	sbrs	r18, 0
 862:	0f c0       	rjmp	.+30     	; 0x882 <vfprintf+0x312>
 864:	5a 2c       	mov	r5, r10
 866:	73 14       	cp	r7, r3
 868:	60 f4       	brcc	.+24     	; 0x882 <vfprintf+0x312>
 86a:	53 0c       	add	r5, r3
 86c:	57 18       	sub	r5, r7
 86e:	73 2c       	mov	r7, r3
 870:	08 c0       	rjmp	.+16     	; 0x882 <vfprintf+0x312>
 872:	b7 01       	movw	r22, r14
 874:	80 e2       	ldi	r24, 0x20	; 32
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	2c 87       	std	Y+12, r18	; 0x0c
 87a:	0e 94 07 06 	call	0xc0e	; 0xc0e <fputc>
 87e:	73 94       	inc	r7
 880:	2c 85       	ldd	r18, Y+12	; 0x0c
 882:	73 14       	cp	r7, r3
 884:	b0 f3       	brcs	.-20     	; 0x872 <vfprintf+0x302>
 886:	04 c0       	rjmp	.+8      	; 0x890 <vfprintf+0x320>
 888:	73 14       	cp	r7, r3
 88a:	10 f4       	brcc	.+4      	; 0x890 <vfprintf+0x320>
 88c:	37 18       	sub	r3, r7
 88e:	01 c0       	rjmp	.+2      	; 0x892 <vfprintf+0x322>
 890:	31 2c       	mov	r3, r1
 892:	24 ff       	sbrs	r18, 4
 894:	12 c0       	rjmp	.+36     	; 0x8ba <vfprintf+0x34a>
 896:	b7 01       	movw	r22, r14
 898:	80 e3       	ldi	r24, 0x30	; 48
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	2c 87       	std	Y+12, r18	; 0x0c
 89e:	0e 94 07 06 	call	0xc0e	; 0xc0e <fputc>
 8a2:	2c 85       	ldd	r18, Y+12	; 0x0c
 8a4:	22 ff       	sbrs	r18, 2
 8a6:	1e c0       	rjmp	.+60     	; 0x8e4 <vfprintf+0x374>
 8a8:	21 ff       	sbrs	r18, 1
 8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <vfprintf+0x342>
 8ac:	88 e5       	ldi	r24, 0x58	; 88
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <vfprintf+0x346>
 8b2:	88 e7       	ldi	r24, 0x78	; 120
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	b7 01       	movw	r22, r14
 8b8:	0c c0       	rjmp	.+24     	; 0x8d2 <vfprintf+0x362>
 8ba:	82 2f       	mov	r24, r18
 8bc:	86 78       	andi	r24, 0x86	; 134
 8be:	91 f0       	breq	.+36     	; 0x8e4 <vfprintf+0x374>
 8c0:	21 fd       	sbrc	r18, 1
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0x358>
 8c4:	80 e2       	ldi	r24, 0x20	; 32
 8c6:	01 c0       	rjmp	.+2      	; 0x8ca <vfprintf+0x35a>
 8c8:	8b e2       	ldi	r24, 0x2B	; 43
 8ca:	27 fd       	sbrc	r18, 7
 8cc:	8d e2       	ldi	r24, 0x2D	; 45
 8ce:	b7 01       	movw	r22, r14
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	0e 94 07 06 	call	0xc0e	; 0xc0e <fputc>
 8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <vfprintf+0x374>
 8d8:	b7 01       	movw	r22, r14
 8da:	80 e3       	ldi	r24, 0x30	; 48
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 07 06 	call	0xc0e	; 0xc0e <fputc>
 8e2:	5a 94       	dec	r5
 8e4:	a5 14       	cp	r10, r5
 8e6:	c0 f3       	brcs	.-16     	; 0x8d8 <vfprintf+0x368>
 8e8:	aa 94       	dec	r10
 8ea:	f4 01       	movw	r30, r8
 8ec:	ea 0d       	add	r30, r10
 8ee:	f1 1d       	adc	r31, r1
 8f0:	b7 01       	movw	r22, r14
 8f2:	80 81       	ld	r24, Z
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 07 06 	call	0xc0e	; 0xc0e <fputc>
 8fa:	a1 10       	cpse	r10, r1
 8fc:	f5 cf       	rjmp	.-22     	; 0x8e8 <vfprintf+0x378>
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <vfprintf+0x39c>
 900:	b7 01       	movw	r22, r14
 902:	80 e2       	ldi	r24, 0x20	; 32
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 07 06 	call	0xc0e	; 0xc0e <fputc>
 90a:	3a 94       	dec	r3
 90c:	31 10       	cpse	r3, r1
 90e:	f8 cf       	rjmp	.-16     	; 0x900 <vfprintf+0x390>
 910:	43 ce       	rjmp	.-890    	; 0x598 <vfprintf+0x28>
 912:	f7 01       	movw	r30, r14
 914:	26 81       	ldd	r18, Z+6	; 0x06
 916:	37 81       	ldd	r19, Z+7	; 0x07
 918:	02 c0       	rjmp	.+4      	; 0x91e <vfprintf+0x3ae>
 91a:	2f ef       	ldi	r18, 0xFF	; 255
 91c:	3f ef       	ldi	r19, 0xFF	; 255
 91e:	c9 01       	movw	r24, r18
 920:	2c 96       	adiw	r28, 0x0c	; 12
 922:	e2 e1       	ldi	r30, 0x12	; 18
 924:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__epilogue_restores__>

00000928 <calloc>:
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	68 9f       	mul	r22, r24
 932:	80 01       	movw	r16, r0
 934:	69 9f       	mul	r22, r25
 936:	10 0d       	add	r17, r0
 938:	78 9f       	mul	r23, r24
 93a:	10 0d       	add	r17, r0
 93c:	11 24       	eor	r1, r1
 93e:	c8 01       	movw	r24, r16
 940:	0e 94 b2 04 	call	0x964	; 0x964 <malloc>
 944:	c8 2f       	mov	r28, r24
 946:	d9 2f       	mov	r29, r25
 948:	20 97       	sbiw	r28, 0x00	; 0
 94a:	31 f0       	breq	.+12     	; 0x958 <calloc+0x30>
 94c:	a8 01       	movw	r20, r16
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	8c 2f       	mov	r24, r28
 954:	0e 94 f5 05 	call	0xbea	; 0xbea <memset>
 958:	ce 01       	movw	r24, r28
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	1f 91       	pop	r17
 960:	0f 91       	pop	r16
 962:	08 95       	ret

00000964 <malloc>:
 964:	0f 93       	push	r16
 966:	1f 93       	push	r17
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	82 30       	cpi	r24, 0x02	; 2
 96e:	91 05       	cpc	r25, r1
 970:	10 f4       	brcc	.+4      	; 0x976 <malloc+0x12>
 972:	82 e0       	ldi	r24, 0x02	; 2
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	e0 91 ac 01 	lds	r30, 0x01AC
 97a:	f0 91 ad 01 	lds	r31, 0x01AD
 97e:	20 e0       	ldi	r18, 0x00	; 0
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	c0 e0       	ldi	r28, 0x00	; 0
 984:	d0 e0       	ldi	r29, 0x00	; 0
 986:	23 c0       	rjmp	.+70     	; 0x9ce <malloc+0x6a>
 988:	40 81       	ld	r20, Z
 98a:	51 81       	ldd	r21, Z+1	; 0x01
 98c:	48 17       	cp	r20, r24
 98e:	59 07       	cpc	r21, r25
 990:	a8 f0       	brcs	.+42     	; 0x9bc <malloc+0x58>
 992:	48 17       	cp	r20, r24
 994:	59 07       	cpc	r21, r25
 996:	61 f4       	brne	.+24     	; 0x9b0 <malloc+0x4c>
 998:	82 81       	ldd	r24, Z+2	; 0x02
 99a:	93 81       	ldd	r25, Z+3	; 0x03
 99c:	20 97       	sbiw	r28, 0x00	; 0
 99e:	19 f0       	breq	.+6      	; 0x9a6 <malloc+0x42>
 9a0:	9b 83       	std	Y+3, r25	; 0x03
 9a2:	8a 83       	std	Y+2, r24	; 0x02
 9a4:	2e c0       	rjmp	.+92     	; 0xa02 <malloc+0x9e>
 9a6:	90 93 ad 01 	sts	0x01AD, r25
 9aa:	80 93 ac 01 	sts	0x01AC, r24
 9ae:	29 c0       	rjmp	.+82     	; 0xa02 <malloc+0x9e>
 9b0:	21 15       	cp	r18, r1
 9b2:	31 05       	cpc	r19, r1
 9b4:	29 f0       	breq	.+10     	; 0x9c0 <malloc+0x5c>
 9b6:	42 17       	cp	r20, r18
 9b8:	53 07       	cpc	r21, r19
 9ba:	10 f0       	brcs	.+4      	; 0x9c0 <malloc+0x5c>
 9bc:	a9 01       	movw	r20, r18
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <malloc+0x60>
 9c0:	be 01       	movw	r22, r28
 9c2:	df 01       	movw	r26, r30
 9c4:	02 81       	ldd	r16, Z+2	; 0x02
 9c6:	13 81       	ldd	r17, Z+3	; 0x03
 9c8:	ef 01       	movw	r28, r30
 9ca:	9a 01       	movw	r18, r20
 9cc:	f8 01       	movw	r30, r16
 9ce:	30 97       	sbiw	r30, 0x00	; 0
 9d0:	d9 f6       	brne	.-74     	; 0x988 <malloc+0x24>
 9d2:	21 15       	cp	r18, r1
 9d4:	31 05       	cpc	r19, r1
 9d6:	09 f1       	breq	.+66     	; 0xa1a <malloc+0xb6>
 9d8:	28 1b       	sub	r18, r24
 9da:	39 0b       	sbc	r19, r25
 9dc:	24 30       	cpi	r18, 0x04	; 4
 9de:	31 05       	cpc	r19, r1
 9e0:	90 f4       	brcc	.+36     	; 0xa06 <malloc+0xa2>
 9e2:	12 96       	adiw	r26, 0x02	; 2
 9e4:	8d 91       	ld	r24, X+
 9e6:	9c 91       	ld	r25, X
 9e8:	13 97       	sbiw	r26, 0x03	; 3
 9ea:	61 15       	cp	r22, r1
 9ec:	71 05       	cpc	r23, r1
 9ee:	21 f0       	breq	.+8      	; 0x9f8 <malloc+0x94>
 9f0:	fb 01       	movw	r30, r22
 9f2:	93 83       	std	Z+3, r25	; 0x03
 9f4:	82 83       	std	Z+2, r24	; 0x02
 9f6:	04 c0       	rjmp	.+8      	; 0xa00 <malloc+0x9c>
 9f8:	90 93 ad 01 	sts	0x01AD, r25
 9fc:	80 93 ac 01 	sts	0x01AC, r24
 a00:	fd 01       	movw	r30, r26
 a02:	32 96       	adiw	r30, 0x02	; 2
 a04:	44 c0       	rjmp	.+136    	; 0xa8e <malloc+0x12a>
 a06:	fd 01       	movw	r30, r26
 a08:	e2 0f       	add	r30, r18
 a0a:	f3 1f       	adc	r31, r19
 a0c:	81 93       	st	Z+, r24
 a0e:	91 93       	st	Z+, r25
 a10:	22 50       	subi	r18, 0x02	; 2
 a12:	31 09       	sbc	r19, r1
 a14:	2d 93       	st	X+, r18
 a16:	3c 93       	st	X, r19
 a18:	3a c0       	rjmp	.+116    	; 0xa8e <malloc+0x12a>
 a1a:	20 91 aa 01 	lds	r18, 0x01AA
 a1e:	30 91 ab 01 	lds	r19, 0x01AB
 a22:	23 2b       	or	r18, r19
 a24:	41 f4       	brne	.+16     	; 0xa36 <malloc+0xd2>
 a26:	20 91 02 01 	lds	r18, 0x0102
 a2a:	30 91 03 01 	lds	r19, 0x0103
 a2e:	30 93 ab 01 	sts	0x01AB, r19
 a32:	20 93 aa 01 	sts	0x01AA, r18
 a36:	20 91 00 01 	lds	r18, 0x0100
 a3a:	30 91 01 01 	lds	r19, 0x0101
 a3e:	21 15       	cp	r18, r1
 a40:	31 05       	cpc	r19, r1
 a42:	41 f4       	brne	.+16     	; 0xa54 <malloc+0xf0>
 a44:	2d b7       	in	r18, 0x3d	; 61
 a46:	3e b7       	in	r19, 0x3e	; 62
 a48:	40 91 04 01 	lds	r20, 0x0104
 a4c:	50 91 05 01 	lds	r21, 0x0105
 a50:	24 1b       	sub	r18, r20
 a52:	35 0b       	sbc	r19, r21
 a54:	e0 91 aa 01 	lds	r30, 0x01AA
 a58:	f0 91 ab 01 	lds	r31, 0x01AB
 a5c:	e2 17       	cp	r30, r18
 a5e:	f3 07       	cpc	r31, r19
 a60:	a0 f4       	brcc	.+40     	; 0xa8a <malloc+0x126>
 a62:	2e 1b       	sub	r18, r30
 a64:	3f 0b       	sbc	r19, r31
 a66:	28 17       	cp	r18, r24
 a68:	39 07       	cpc	r19, r25
 a6a:	78 f0       	brcs	.+30     	; 0xa8a <malloc+0x126>
 a6c:	ac 01       	movw	r20, r24
 a6e:	4e 5f       	subi	r20, 0xFE	; 254
 a70:	5f 4f       	sbci	r21, 0xFF	; 255
 a72:	24 17       	cp	r18, r20
 a74:	35 07       	cpc	r19, r21
 a76:	48 f0       	brcs	.+18     	; 0xa8a <malloc+0x126>
 a78:	4e 0f       	add	r20, r30
 a7a:	5f 1f       	adc	r21, r31
 a7c:	50 93 ab 01 	sts	0x01AB, r21
 a80:	40 93 aa 01 	sts	0x01AA, r20
 a84:	81 93       	st	Z+, r24
 a86:	91 93       	st	Z+, r25
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <malloc+0x12a>
 a8a:	e0 e0       	ldi	r30, 0x00	; 0
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	cf 01       	movw	r24, r30
 a90:	df 91       	pop	r29
 a92:	cf 91       	pop	r28
 a94:	1f 91       	pop	r17
 a96:	0f 91       	pop	r16
 a98:	08 95       	ret

00000a9a <free>:
 a9a:	ef 92       	push	r14
 a9c:	ff 92       	push	r15
 a9e:	0f 93       	push	r16
 aa0:	1f 93       	push	r17
 aa2:	cf 93       	push	r28
 aa4:	df 93       	push	r29
 aa6:	00 97       	sbiw	r24, 0x00	; 0
 aa8:	09 f4       	brne	.+2      	; 0xaac <free+0x12>
 aaa:	8f c0       	rjmp	.+286    	; 0xbca <free+0x130>
 aac:	dc 01       	movw	r26, r24
 aae:	12 97       	sbiw	r26, 0x02	; 2
 ab0:	13 96       	adiw	r26, 0x03	; 3
 ab2:	1c 92       	st	X, r1
 ab4:	1e 92       	st	-X, r1
 ab6:	12 97       	sbiw	r26, 0x02	; 2
 ab8:	e0 90 ac 01 	lds	r14, 0x01AC
 abc:	f0 90 ad 01 	lds	r15, 0x01AD
 ac0:	e1 14       	cp	r14, r1
 ac2:	f1 04       	cpc	r15, r1
 ac4:	89 f4       	brne	.+34     	; 0xae8 <free+0x4e>
 ac6:	2d 91       	ld	r18, X+
 ac8:	3c 91       	ld	r19, X
 aca:	11 97       	sbiw	r26, 0x01	; 1
 acc:	28 0f       	add	r18, r24
 ace:	39 1f       	adc	r19, r25
 ad0:	80 91 aa 01 	lds	r24, 0x01AA
 ad4:	90 91 ab 01 	lds	r25, 0x01AB
 ad8:	82 17       	cp	r24, r18
 ada:	93 07       	cpc	r25, r19
 adc:	89 f5       	brne	.+98     	; 0xb40 <free+0xa6>
 ade:	b0 93 ab 01 	sts	0x01AB, r27
 ae2:	a0 93 aa 01 	sts	0x01AA, r26
 ae6:	71 c0       	rjmp	.+226    	; 0xbca <free+0x130>
 ae8:	e7 01       	movw	r28, r14
 aea:	20 e0       	ldi	r18, 0x00	; 0
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	01 c0       	rjmp	.+2      	; 0xaf2 <free+0x58>
 af0:	ea 01       	movw	r28, r20
 af2:	ca 17       	cp	r28, r26
 af4:	db 07       	cpc	r29, r27
 af6:	38 f4       	brcc	.+14     	; 0xb06 <free+0x6c>
 af8:	4a 81       	ldd	r20, Y+2	; 0x02
 afa:	5b 81       	ldd	r21, Y+3	; 0x03
 afc:	9e 01       	movw	r18, r28
 afe:	41 15       	cp	r20, r1
 b00:	51 05       	cpc	r21, r1
 b02:	b1 f7       	brne	.-20     	; 0xaf0 <free+0x56>
 b04:	22 c0       	rjmp	.+68     	; 0xb4a <free+0xb0>
 b06:	bc 01       	movw	r22, r24
 b08:	62 50       	subi	r22, 0x02	; 2
 b0a:	71 09       	sbc	r23, r1
 b0c:	fb 01       	movw	r30, r22
 b0e:	d3 83       	std	Z+3, r29	; 0x03
 b10:	c2 83       	std	Z+2, r28	; 0x02
 b12:	00 81       	ld	r16, Z
 b14:	11 81       	ldd	r17, Z+1	; 0x01
 b16:	ac 01       	movw	r20, r24
 b18:	40 0f       	add	r20, r16
 b1a:	51 1f       	adc	r21, r17
 b1c:	4c 17       	cp	r20, r28
 b1e:	5d 07       	cpc	r21, r29
 b20:	61 f4       	brne	.+24     	; 0xb3a <free+0xa0>
 b22:	48 81       	ld	r20, Y
 b24:	59 81       	ldd	r21, Y+1	; 0x01
 b26:	40 0f       	add	r20, r16
 b28:	51 1f       	adc	r21, r17
 b2a:	4e 5f       	subi	r20, 0xFE	; 254
 b2c:	5f 4f       	sbci	r21, 0xFF	; 255
 b2e:	51 83       	std	Z+1, r21	; 0x01
 b30:	40 83       	st	Z, r20
 b32:	4a 81       	ldd	r20, Y+2	; 0x02
 b34:	5b 81       	ldd	r21, Y+3	; 0x03
 b36:	53 83       	std	Z+3, r21	; 0x03
 b38:	42 83       	std	Z+2, r20	; 0x02
 b3a:	21 15       	cp	r18, r1
 b3c:	31 05       	cpc	r19, r1
 b3e:	29 f4       	brne	.+10     	; 0xb4a <free+0xb0>
 b40:	b0 93 ad 01 	sts	0x01AD, r27
 b44:	a0 93 ac 01 	sts	0x01AC, r26
 b48:	40 c0       	rjmp	.+128    	; 0xbca <free+0x130>
 b4a:	f9 01       	movw	r30, r18
 b4c:	b3 83       	std	Z+3, r27	; 0x03
 b4e:	a2 83       	std	Z+2, r26	; 0x02
 b50:	e9 01       	movw	r28, r18
 b52:	69 91       	ld	r22, Y+
 b54:	79 91       	ld	r23, Y+
 b56:	c6 0f       	add	r28, r22
 b58:	d7 1f       	adc	r29, r23
 b5a:	ac 17       	cp	r26, r28
 b5c:	bd 07       	cpc	r27, r29
 b5e:	79 f4       	brne	.+30     	; 0xb7e <free+0xe4>
 b60:	dc 01       	movw	r26, r24
 b62:	5e 91       	ld	r21, -X
 b64:	4e 91       	ld	r20, -X
 b66:	46 0f       	add	r20, r22
 b68:	57 1f       	adc	r21, r23
 b6a:	4e 5f       	subi	r20, 0xFE	; 254
 b6c:	5f 4f       	sbci	r21, 0xFF	; 255
 b6e:	51 83       	std	Z+1, r21	; 0x01
 b70:	40 83       	st	Z, r20
 b72:	12 96       	adiw	r26, 0x02	; 2
 b74:	8d 91       	ld	r24, X+
 b76:	9c 91       	ld	r25, X
 b78:	13 97       	sbiw	r26, 0x03	; 3
 b7a:	93 83       	std	Z+3, r25	; 0x03
 b7c:	82 83       	std	Z+2, r24	; 0x02
 b7e:	a0 e0       	ldi	r26, 0x00	; 0
 b80:	b0 e0       	ldi	r27, 0x00	; 0
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <free+0xee>
 b84:	d7 01       	movw	r26, r14
 b86:	7c 01       	movw	r14, r24
 b88:	f7 01       	movw	r30, r14
 b8a:	82 81       	ldd	r24, Z+2	; 0x02
 b8c:	93 81       	ldd	r25, Z+3	; 0x03
 b8e:	00 97       	sbiw	r24, 0x00	; 0
 b90:	c9 f7       	brne	.-14     	; 0xb84 <free+0xea>
 b92:	c7 01       	movw	r24, r14
 b94:	02 96       	adiw	r24, 0x02	; 2
 b96:	20 81       	ld	r18, Z
 b98:	31 81       	ldd	r19, Z+1	; 0x01
 b9a:	82 0f       	add	r24, r18
 b9c:	93 1f       	adc	r25, r19
 b9e:	20 91 aa 01 	lds	r18, 0x01AA
 ba2:	30 91 ab 01 	lds	r19, 0x01AB
 ba6:	28 17       	cp	r18, r24
 ba8:	39 07       	cpc	r19, r25
 baa:	79 f4       	brne	.+30     	; 0xbca <free+0x130>
 bac:	10 97       	sbiw	r26, 0x00	; 0
 bae:	29 f4       	brne	.+10     	; 0xbba <free+0x120>
 bb0:	10 92 ad 01 	sts	0x01AD, r1
 bb4:	10 92 ac 01 	sts	0x01AC, r1
 bb8:	04 c0       	rjmp	.+8      	; 0xbc2 <free+0x128>
 bba:	13 96       	adiw	r26, 0x03	; 3
 bbc:	1c 92       	st	X, r1
 bbe:	1e 92       	st	-X, r1
 bc0:	12 97       	sbiw	r26, 0x02	; 2
 bc2:	f0 92 ab 01 	sts	0x01AB, r15
 bc6:	e0 92 aa 01 	sts	0x01AA, r14
 bca:	cd b7       	in	r28, 0x3d	; 61
 bcc:	de b7       	in	r29, 0x3e	; 62
 bce:	e6 e0       	ldi	r30, 0x06	; 6
 bd0:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__epilogue_restores__+0x18>

00000bd4 <strnlen_P>:
 bd4:	fc 01       	movw	r30, r24
 bd6:	05 90       	lpm	r0, Z+
 bd8:	61 50       	subi	r22, 0x01	; 1
 bda:	70 40       	sbci	r23, 0x00	; 0
 bdc:	01 10       	cpse	r0, r1
 bde:	d8 f7       	brcc	.-10     	; 0xbd6 <strnlen_P+0x2>
 be0:	80 95       	com	r24
 be2:	90 95       	com	r25
 be4:	8e 0f       	add	r24, r30
 be6:	9f 1f       	adc	r25, r31
 be8:	08 95       	ret

00000bea <memset>:
 bea:	dc 01       	movw	r26, r24
 bec:	01 c0       	rjmp	.+2      	; 0xbf0 <memset+0x6>
 bee:	6d 93       	st	X+, r22
 bf0:	41 50       	subi	r20, 0x01	; 1
 bf2:	50 40       	sbci	r21, 0x00	; 0
 bf4:	e0 f7       	brcc	.-8      	; 0xbee <memset+0x4>
 bf6:	08 95       	ret

00000bf8 <strnlen>:
 bf8:	fc 01       	movw	r30, r24
 bfa:	61 50       	subi	r22, 0x01	; 1
 bfc:	70 40       	sbci	r23, 0x00	; 0
 bfe:	01 90       	ld	r0, Z+
 c00:	01 10       	cpse	r0, r1
 c02:	d8 f7       	brcc	.-10     	; 0xbfa <strnlen+0x2>
 c04:	80 95       	com	r24
 c06:	90 95       	com	r25
 c08:	8e 0f       	add	r24, r30
 c0a:	9f 1f       	adc	r25, r31
 c0c:	08 95       	ret

00000c0e <fputc>:
 c0e:	0f 93       	push	r16
 c10:	1f 93       	push	r17
 c12:	cf 93       	push	r28
 c14:	df 93       	push	r29
 c16:	8c 01       	movw	r16, r24
 c18:	eb 01       	movw	r28, r22
 c1a:	8b 81       	ldd	r24, Y+3	; 0x03
 c1c:	81 fd       	sbrc	r24, 1
 c1e:	03 c0       	rjmp	.+6      	; 0xc26 <fputc+0x18>
 c20:	0f ef       	ldi	r16, 0xFF	; 255
 c22:	1f ef       	ldi	r17, 0xFF	; 255
 c24:	1a c0       	rjmp	.+52     	; 0xc5a <fputc+0x4c>
 c26:	82 ff       	sbrs	r24, 2
 c28:	0d c0       	rjmp	.+26     	; 0xc44 <fputc+0x36>
 c2a:	2e 81       	ldd	r18, Y+6	; 0x06
 c2c:	3f 81       	ldd	r19, Y+7	; 0x07
 c2e:	8c 81       	ldd	r24, Y+4	; 0x04
 c30:	9d 81       	ldd	r25, Y+5	; 0x05
 c32:	28 17       	cp	r18, r24
 c34:	39 07       	cpc	r19, r25
 c36:	64 f4       	brge	.+24     	; 0xc50 <fputc+0x42>
 c38:	e8 81       	ld	r30, Y
 c3a:	f9 81       	ldd	r31, Y+1	; 0x01
 c3c:	01 93       	st	Z+, r16
 c3e:	f9 83       	std	Y+1, r31	; 0x01
 c40:	e8 83       	st	Y, r30
 c42:	06 c0       	rjmp	.+12     	; 0xc50 <fputc+0x42>
 c44:	e8 85       	ldd	r30, Y+8	; 0x08
 c46:	f9 85       	ldd	r31, Y+9	; 0x09
 c48:	80 2f       	mov	r24, r16
 c4a:	09 95       	icall
 c4c:	89 2b       	or	r24, r25
 c4e:	41 f7       	brne	.-48     	; 0xc20 <fputc+0x12>
 c50:	8e 81       	ldd	r24, Y+6	; 0x06
 c52:	9f 81       	ldd	r25, Y+7	; 0x07
 c54:	01 96       	adiw	r24, 0x01	; 1
 c56:	9f 83       	std	Y+7, r25	; 0x07
 c58:	8e 83       	std	Y+6, r24	; 0x06
 c5a:	c8 01       	movw	r24, r16
 c5c:	df 91       	pop	r29
 c5e:	cf 91       	pop	r28
 c60:	1f 91       	pop	r17
 c62:	0f 91       	pop	r16
 c64:	08 95       	ret

00000c66 <__ultoa_invert>:
 c66:	fa 01       	movw	r30, r20
 c68:	aa 27       	eor	r26, r26
 c6a:	28 30       	cpi	r18, 0x08	; 8
 c6c:	51 f1       	breq	.+84     	; 0xcc2 <__ultoa_invert+0x5c>
 c6e:	20 31       	cpi	r18, 0x10	; 16
 c70:	81 f1       	breq	.+96     	; 0xcd2 <__ultoa_invert+0x6c>
 c72:	e8 94       	clt
 c74:	6f 93       	push	r22
 c76:	6e 7f       	andi	r22, 0xFE	; 254
 c78:	6e 5f       	subi	r22, 0xFE	; 254
 c7a:	7f 4f       	sbci	r23, 0xFF	; 255
 c7c:	8f 4f       	sbci	r24, 0xFF	; 255
 c7e:	9f 4f       	sbci	r25, 0xFF	; 255
 c80:	af 4f       	sbci	r26, 0xFF	; 255
 c82:	b1 e0       	ldi	r27, 0x01	; 1
 c84:	3e d0       	rcall	.+124    	; 0xd02 <__ultoa_invert+0x9c>
 c86:	b4 e0       	ldi	r27, 0x04	; 4
 c88:	3c d0       	rcall	.+120    	; 0xd02 <__ultoa_invert+0x9c>
 c8a:	67 0f       	add	r22, r23
 c8c:	78 1f       	adc	r23, r24
 c8e:	89 1f       	adc	r24, r25
 c90:	9a 1f       	adc	r25, r26
 c92:	a1 1d       	adc	r26, r1
 c94:	68 0f       	add	r22, r24
 c96:	79 1f       	adc	r23, r25
 c98:	8a 1f       	adc	r24, r26
 c9a:	91 1d       	adc	r25, r1
 c9c:	a1 1d       	adc	r26, r1
 c9e:	6a 0f       	add	r22, r26
 ca0:	71 1d       	adc	r23, r1
 ca2:	81 1d       	adc	r24, r1
 ca4:	91 1d       	adc	r25, r1
 ca6:	a1 1d       	adc	r26, r1
 ca8:	20 d0       	rcall	.+64     	; 0xcea <__ultoa_invert+0x84>
 caa:	09 f4       	brne	.+2      	; 0xcae <__ultoa_invert+0x48>
 cac:	68 94       	set
 cae:	3f 91       	pop	r19
 cb0:	2a e0       	ldi	r18, 0x0A	; 10
 cb2:	26 9f       	mul	r18, r22
 cb4:	11 24       	eor	r1, r1
 cb6:	30 19       	sub	r19, r0
 cb8:	30 5d       	subi	r19, 0xD0	; 208
 cba:	31 93       	st	Z+, r19
 cbc:	de f6       	brtc	.-74     	; 0xc74 <__ultoa_invert+0xe>
 cbe:	cf 01       	movw	r24, r30
 cc0:	08 95       	ret
 cc2:	46 2f       	mov	r20, r22
 cc4:	47 70       	andi	r20, 0x07	; 7
 cc6:	40 5d       	subi	r20, 0xD0	; 208
 cc8:	41 93       	st	Z+, r20
 cca:	b3 e0       	ldi	r27, 0x03	; 3
 ccc:	0f d0       	rcall	.+30     	; 0xcec <__ultoa_invert+0x86>
 cce:	c9 f7       	brne	.-14     	; 0xcc2 <__ultoa_invert+0x5c>
 cd0:	f6 cf       	rjmp	.-20     	; 0xcbe <__ultoa_invert+0x58>
 cd2:	46 2f       	mov	r20, r22
 cd4:	4f 70       	andi	r20, 0x0F	; 15
 cd6:	40 5d       	subi	r20, 0xD0	; 208
 cd8:	4a 33       	cpi	r20, 0x3A	; 58
 cda:	18 f0       	brcs	.+6      	; 0xce2 <__ultoa_invert+0x7c>
 cdc:	49 5d       	subi	r20, 0xD9	; 217
 cde:	31 fd       	sbrc	r19, 1
 ce0:	40 52       	subi	r20, 0x20	; 32
 ce2:	41 93       	st	Z+, r20
 ce4:	02 d0       	rcall	.+4      	; 0xcea <__ultoa_invert+0x84>
 ce6:	a9 f7       	brne	.-22     	; 0xcd2 <__ultoa_invert+0x6c>
 ce8:	ea cf       	rjmp	.-44     	; 0xcbe <__ultoa_invert+0x58>
 cea:	b4 e0       	ldi	r27, 0x04	; 4
 cec:	a6 95       	lsr	r26
 cee:	97 95       	ror	r25
 cf0:	87 95       	ror	r24
 cf2:	77 95       	ror	r23
 cf4:	67 95       	ror	r22
 cf6:	ba 95       	dec	r27
 cf8:	c9 f7       	brne	.-14     	; 0xcec <__ultoa_invert+0x86>
 cfa:	00 97       	sbiw	r24, 0x00	; 0
 cfc:	61 05       	cpc	r22, r1
 cfe:	71 05       	cpc	r23, r1
 d00:	08 95       	ret
 d02:	9b 01       	movw	r18, r22
 d04:	ac 01       	movw	r20, r24
 d06:	0a 2e       	mov	r0, r26
 d08:	06 94       	lsr	r0
 d0a:	57 95       	ror	r21
 d0c:	47 95       	ror	r20
 d0e:	37 95       	ror	r19
 d10:	27 95       	ror	r18
 d12:	ba 95       	dec	r27
 d14:	c9 f7       	brne	.-14     	; 0xd08 <__ultoa_invert+0xa2>
 d16:	62 0f       	add	r22, r18
 d18:	73 1f       	adc	r23, r19
 d1a:	84 1f       	adc	r24, r20
 d1c:	95 1f       	adc	r25, r21
 d1e:	a0 1d       	adc	r26, r0
 d20:	08 95       	ret

00000d22 <__prologue_saves__>:
 d22:	2f 92       	push	r2
 d24:	3f 92       	push	r3
 d26:	4f 92       	push	r4
 d28:	5f 92       	push	r5
 d2a:	6f 92       	push	r6
 d2c:	7f 92       	push	r7
 d2e:	8f 92       	push	r8
 d30:	9f 92       	push	r9
 d32:	af 92       	push	r10
 d34:	bf 92       	push	r11
 d36:	cf 92       	push	r12
 d38:	df 92       	push	r13
 d3a:	ef 92       	push	r14
 d3c:	ff 92       	push	r15
 d3e:	0f 93       	push	r16
 d40:	1f 93       	push	r17
 d42:	cf 93       	push	r28
 d44:	df 93       	push	r29
 d46:	cd b7       	in	r28, 0x3d	; 61
 d48:	de b7       	in	r29, 0x3e	; 62
 d4a:	ca 1b       	sub	r28, r26
 d4c:	db 0b       	sbc	r29, r27
 d4e:	0f b6       	in	r0, 0x3f	; 63
 d50:	f8 94       	cli
 d52:	de bf       	out	0x3e, r29	; 62
 d54:	0f be       	out	0x3f, r0	; 63
 d56:	cd bf       	out	0x3d, r28	; 61
 d58:	09 94       	ijmp

00000d5a <__epilogue_restores__>:
 d5a:	2a 88       	ldd	r2, Y+18	; 0x12
 d5c:	39 88       	ldd	r3, Y+17	; 0x11
 d5e:	48 88       	ldd	r4, Y+16	; 0x10
 d60:	5f 84       	ldd	r5, Y+15	; 0x0f
 d62:	6e 84       	ldd	r6, Y+14	; 0x0e
 d64:	7d 84       	ldd	r7, Y+13	; 0x0d
 d66:	8c 84       	ldd	r8, Y+12	; 0x0c
 d68:	9b 84       	ldd	r9, Y+11	; 0x0b
 d6a:	aa 84       	ldd	r10, Y+10	; 0x0a
 d6c:	b9 84       	ldd	r11, Y+9	; 0x09
 d6e:	c8 84       	ldd	r12, Y+8	; 0x08
 d70:	df 80       	ldd	r13, Y+7	; 0x07
 d72:	ee 80       	ldd	r14, Y+6	; 0x06
 d74:	fd 80       	ldd	r15, Y+5	; 0x05
 d76:	0c 81       	ldd	r16, Y+4	; 0x04
 d78:	1b 81       	ldd	r17, Y+3	; 0x03
 d7a:	aa 81       	ldd	r26, Y+2	; 0x02
 d7c:	b9 81       	ldd	r27, Y+1	; 0x01
 d7e:	ce 0f       	add	r28, r30
 d80:	d1 1d       	adc	r29, r1
 d82:	0f b6       	in	r0, 0x3f	; 63
 d84:	f8 94       	cli
 d86:	de bf       	out	0x3e, r29	; 62
 d88:	0f be       	out	0x3f, r0	; 63
 d8a:	cd bf       	out	0x3d, r28	; 61
 d8c:	ed 01       	movw	r28, r26
 d8e:	08 95       	ret

00000d90 <_exit>:
 d90:	f8 94       	cli

00000d92 <__stop_program>:
 d92:	ff cf       	rjmp	.-2      	; 0xd92 <__stop_program>
