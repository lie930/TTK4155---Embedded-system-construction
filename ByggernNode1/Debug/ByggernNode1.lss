
ByggernNode1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00000d4a  00000dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001a2  008001a2  00000e80  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000272  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000350  00000000  00000000  00001e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003000  00000000  00000000  00002161  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152a  00000000  00000000  00005161  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bc7  00000000  00000000  0000668b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006dc  00000000  00000000  00008254  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000907  00000000  00000000  00008930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001fb1  00000000  00000000  00009237  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000240  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	
	//Wait for the data to be read
	while(test_bit(PINE, PINE0));
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	
	return *adc;
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(0);
	//Read position y from channel 1
	y = ADC_read(1);
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	
	//Calculate position x percentage
	if(x > mid_x) {
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	} else if (x < mid_x) {
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
	} else {
		position.x = 0;
  74:	cf ef       	ldi	r28, 0xFF	; 255
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e4       	ldi	r30, 0x4A	; 74
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 3a       	cpi	r26, 0xA2	; 162
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 ea       	ldi	r26, 0xA2	; 162
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 3a       	cpi	r26, 0xAE	; 174
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
	} else if (y < mid_y) {
  a2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
  a6:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
  ae:	0e 94 c8 01 	call	0x390	; 0x390 <mcp2515_init>
  b2:	40 e4       	ldi	r20, 0x40	; 64
  b4:	60 ee       	ldi	r22, 0xE0	; 224
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	0e 94 90 01 	call	0x320	; 0x320 <mcp2515_bit_modify>
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	8b e2       	ldi	r24, 0x2B	; 43
  c2:	0e 94 90 01 	call	0x320	; 0x320 <mcp2515_bit_modify>
	} else {
		position.y = 0;
	}
	
	return position;
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	8b e2       	ldi	r24, 0x2B	; 43
}
  cc:	0e 94 90 01 	call	0x320	; 0x320 <mcp2515_bit_modify>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <CAN_transmit_complete>:
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret

000000dc <CAN_message_send>:
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24

int CAN_message_send(CAN_message_t* message) {
	uint8_t i;
	
	//Check if there is no pending transmission
	if (CAN_transmit_complete()) {
  e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <CAN_transmit_complete>
  e8:	89 2b       	or	r24, r25
  ea:	81 f1       	breq	.+96     	; 0x14c <CAN_message_send+0x70>
		
		//Set transmit priority (0 - lowest)
		mcp2515_bit_modify(MCP_TXB0CTRL, 0x03, 0);
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	80 e3       	ldi	r24, 0x30	; 48
  f2:	0e 94 90 01 	call	0x320	; 0x320 <mcp2515_bit_modify>
		
		//Set the message id (use standard identifier)
		mcp2515_write(MCP_TXB0SIDH, (uint8_t)(message->id >> 3));
  f6:	68 81       	ld	r22, Y
  f8:	79 81       	ldd	r23, Y+1	; 0x01
  fa:	76 95       	lsr	r23
  fc:	67 95       	ror	r22
  fe:	76 95       	lsr	r23
 100:	67 95       	ror	r22
 102:	76 95       	lsr	r23
 104:	67 95       	ror	r22
 106:	81 e3       	ldi	r24, 0x31	; 49
 108:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mcp2515_write>
		mcp2515_write(MCP_TXB0SIDL, (uint8_t)(message->id << 5));
 10c:	68 81       	ld	r22, Y
 10e:	62 95       	swap	r22
 110:	66 0f       	add	r22, r22
 112:	60 7e       	andi	r22, 0xE0	; 224
 114:	82 e3       	ldi	r24, 0x32	; 50
 116:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mcp2515_write>
		
		//Set data length and use data frame (RTR = 0)
		mcp2515_write(MCP_TXB0DLC, (uint8_t)(message->length << 4));
 11a:	6a 81       	ldd	r22, Y+2	; 0x02
 11c:	62 95       	swap	r22
 11e:	60 7f       	andi	r22, 0xF0	; 240
 120:	85 e3       	ldi	r24, 0x35	; 53
 122:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mcp2515_write>

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	88 23       	and	r24, r24
 12a:	69 f0       	breq	.+26     	; 0x146 <CAN_message_send+0x6a>
 12c:	10 e0       	ldi	r17, 0x00	; 0
			mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
 12e:	fe 01       	movw	r30, r28
 130:	e1 0f       	add	r30, r17
 132:	f1 1d       	adc	r31, r1
 134:	63 81       	ldd	r22, Z+3	; 0x03
 136:	81 2f       	mov	r24, r17
 138:	8a 5c       	subi	r24, 0xCA	; 202
 13a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mcp2515_write>
		
		//Set data length and use data frame (RTR = 0)
		mcp2515_write(MCP_TXB0DLC, (uint8_t)(message->length << 4));

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
 13e:	1f 5f       	subi	r17, 0xFF	; 255
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	18 17       	cp	r17, r24
 144:	a0 f3       	brcs	.-24     	; 0x12e <CAN_message_send+0x52>
			mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
		}
		
		//Request to send via TX0
		mcp2515_request_to_send(1);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 7e 01 	call	0x2fc	; 0x2fc <mcp2515_request_to_send>
	} else {
		//TODO: Check why is there a pending transmission
	}
	
	return 0;
}
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	08 95       	ret

00000158 <CAN_data_receive>:
//For received message check RX0IF -> (MCP_CANINTF, bit0);
int CAN_int_vect(void) {
	//TODO
}

CAN_message_t* CAN_data_receive(void) {
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
	uint8_t i;
	CAN_message_t* message = malloc(sizeof(CAN_message_t));
 15e:	8b e0       	ldi	r24, 0x0B	; 11
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 34 02 	call	0x468	; 0x468 <malloc>
 166:	c8 2f       	mov	r28, r24
 168:	d9 2f       	mov	r29, r25
	
	//Get message id
	message->id  = (mcp2515_read(MCP_RXB0SIDH) << 3) && (mcp2515_read(MCP_RXB0SIDL) >> 5);
 16a:	81 e6       	ldi	r24, 0x61	; 97
 16c:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp2515_read>
 170:	88 23       	and	r24, r24
 172:	69 f0       	breq	.+26     	; 0x18e <CAN_data_receive+0x36>
 174:	82 e6       	ldi	r24, 0x62	; 98
 176:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp2515_read>
 17a:	28 2f       	mov	r18, r24
 17c:	22 95       	swap	r18
 17e:	26 95       	lsr	r18
 180:	27 70       	andi	r18, 0x07	; 7
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	29 f4       	brne	.+10     	; 0x192 <CAN_data_receive+0x3a>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <CAN_data_receive+0x3a>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	99 83       	std	Y+1, r25	; 0x01
 194:	88 83       	st	Y, r24
	//message->id  = (uint8_t)(mcp2515_read(MCP_RXB0SIDH) << 3);
	//message->id  = (uint8_t)(mcp2515_read(MCP_RXB0SIDL) >> 5);
	
	//Get message length
	message->length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
 196:	85 e6       	ldi	r24, 0x65	; 101
 198:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp2515_read>
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	8a 83       	std	Y+2, r24	; 0x02
	
	//Get message data
	for(i = 0; i < message->length; i++) {
 1a0:	88 23       	and	r24, r24
 1a2:	69 f0       	breq	.+26     	; 0x1be <CAN_data_receive+0x66>
 1a4:	10 e0       	ldi	r17, 0x00	; 0
		message->data[i] = mcp2515_read(MCP_RXB0D0 + i);
 1a6:	81 2f       	mov	r24, r17
 1a8:	8a 59       	subi	r24, 0x9A	; 154
 1aa:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp2515_read>
 1ae:	fe 01       	movw	r30, r28
 1b0:	e1 0f       	add	r30, r17
 1b2:	f1 1d       	adc	r31, r1
 1b4:	83 83       	std	Z+3, r24	; 0x03
	
	//Get message length
	message->length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
	
	//Get message data
	for(i = 0; i < message->length; i++) {
 1b6:	1f 5f       	subi	r17, 0xFF	; 255
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	18 17       	cp	r17, r24
 1bc:	a0 f3       	brcs	.-24     	; 0x1a6 <CAN_data_receive+0x4e>
		message->data[i] = mcp2515_read(MCP_RXB0D0 + i);
	}
	
	return message;
 1be:	8c 2f       	mov	r24, r28
 1c0:	9d 2f       	mov	r25, r29
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	08 95       	ret

000001ca <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

#define MYUBRR F_OSC/16/BAUD-1

int main(void) {
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <main+0x6>
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	CAN_message_t* message_send;
	CAN_message_t* message_receive;
	int i = 0;
	
	UART_init(MYUBRR);
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 0c 02 	call	0x418	; 0x418 <UART_init>
	printf("Uart initiated\n\r");
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	9f 93       	push	r25
 1e2:	8f 93       	push	r24
 1e4:	0e 94 b7 03 	call	0x76e	; 0x76e <printf>
	CAN_init();
 1e8:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	printf("CAN initiated\n\r");
 1ec:	87 e1       	ldi	r24, 0x17	; 23
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	9f 93       	push	r25
 1f2:	8f 93       	push	r24
 1f4:	0e 94 b7 03 	call	0x76e	; 0x76e <printf>
	
	message_send->id = 3;
 1f8:	e9 81       	ldd	r30, Y+1	; 0x01
 1fa:	fa 81       	ldd	r31, Y+2	; 0x02
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	91 83       	std	Z+1, r25	; 0x01
 202:	80 83       	st	Z, r24
	message_send->length = 1;
 204:	e9 81       	ldd	r30, Y+1	; 0x01
 206:	fa 81       	ldd	r31, Y+2	; 0x02
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	82 83       	std	Z+2, r24	; 0x02
	message_send->data[0] = (uint8_t)'U';
 20c:	85 e5       	ldi	r24, 0x55	; 85
 20e:	83 83       	std	Z+3, r24	; 0x03
	CAN_message_send(&message_send);
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	0e 94 6e 00 	call	0xdc	; 0xdc <CAN_message_send>
	printf("Message sent\n\r");
 218:	87 e2       	ldi	r24, 0x27	; 39
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	9f 93       	push	r25
 21e:	8f 93       	push	r24
 220:	0e 94 b7 03 	call	0x76e	; 0x76e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	24 e0       	ldi	r18, 0x04	; 4
 226:	30 e8       	ldi	r19, 0x80	; 128
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	30 40       	sbci	r19, 0x00	; 0
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x60>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x6a>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x6c>
	
	_delay_ms(100);
	
	message_receive = CAN_data_receive();
 236:	0e 94 ac 00 	call	0x158	; 0x158 <CAN_data_receive>
 23a:	8c 01       	movw	r16, r24
	printf("Message id: %i\n\r", message_receive->id);
 23c:	fc 01       	movw	r30, r24
 23e:	81 81       	ldd	r24, Z+1	; 0x01
 240:	8f 93       	push	r24
 242:	80 81       	ld	r24, Z
 244:	8f 93       	push	r24
 246:	86 e3       	ldi	r24, 0x36	; 54
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	9f 93       	push	r25
 24c:	8f 93       	push	r24
 24e:	0e 94 b7 03 	call	0x76e	; 0x76e <printf>
	printf("Message length: %i\n\r", message_receive->length);
 252:	f8 01       	movw	r30, r16
 254:	82 81       	ldd	r24, Z+2	; 0x02
 256:	1f 92       	push	r1
 258:	8f 93       	push	r24
 25a:	87 e4       	ldi	r24, 0x47	; 71
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	9f 93       	push	r25
 260:	8f 93       	push	r24
 262:	0e 94 b7 03 	call	0x76e	; 0x76e <printf>
	for(i = 0; i < message_receive->length; i++) {
 266:	f8 01       	movw	r30, r16
 268:	82 81       	ldd	r24, Z+2	; 0x02
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	88 23       	and	r24, r24
 276:	11 f1       	breq	.+68     	; 0x2bc <main+0xf2>
#include <util/delay.h>
#include <avr/interrupt.h>

#define MYUBRR F_OSC/16/BAUD-1

int main(void) {
 278:	68 01       	movw	r12, r16
 27a:	33 e0       	ldi	r19, 0x03	; 3
 27c:	c3 0e       	add	r12, r19
 27e:	d1 1c       	adc	r13, r1
	_delay_ms(100);
	
	message_receive = CAN_data_receive();
	printf("Message id: %i\n\r", message_receive->id);
	printf("Message length: %i\n\r", message_receive->length);
	for(i = 0; i < message_receive->length; i++) {
 280:	e1 2c       	mov	r14, r1
 282:	f1 2c       	mov	r15, r1
		printf("Message data: %i\n\r", message_receive->data[i]);
 284:	0f 2e       	mov	r0, r31
 286:	fc e5       	ldi	r31, 0x5C	; 92
 288:	af 2e       	mov	r10, r31
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	bf 2e       	mov	r11, r31
 28e:	f0 2d       	mov	r31, r0
 290:	f6 01       	movw	r30, r12
 292:	81 91       	ld	r24, Z+
 294:	6f 01       	movw	r12, r30
 296:	1f 92       	push	r1
 298:	8f 93       	push	r24
 29a:	bf 92       	push	r11
 29c:	af 92       	push	r10
 29e:	0e 94 b7 03 	call	0x76e	; 0x76e <printf>
	_delay_ms(100);
	
	message_receive = CAN_data_receive();
	printf("Message id: %i\n\r", message_receive->id);
	printf("Message length: %i\n\r", message_receive->length);
	for(i = 0; i < message_receive->length; i++) {
 2a2:	ff ef       	ldi	r31, 0xFF	; 255
 2a4:	ef 1a       	sub	r14, r31
 2a6:	ff 0a       	sbc	r15, r31
 2a8:	f8 01       	movw	r30, r16
 2aa:	82 81       	ldd	r24, Z+2	; 0x02
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	e8 16       	cp	r14, r24
 2b8:	f9 06       	cpc	r15, r25
 2ba:	54 f3       	brlt	.-44     	; 0x290 <main+0xc6>
 2bc:	f4 e0       	ldi	r31, 0x04	; 4
 2be:	20 e8       	ldi	r18, 0x80	; 128
 2c0:	31 e0       	ldi	r19, 0x01	; 1
 2c2:	f1 50       	subi	r31, 0x01	; 1
 2c4:	20 40       	sbci	r18, 0x00	; 0
 2c6:	30 40       	sbci	r19, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0xf8>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x102>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0x104>
 2ce:	f6 cf       	rjmp	.-20     	; 0x2bc <main+0xf2>

000002d0 <mcp2515_write>:
	}
	
	return 0;
}

int mcp2515_write(uint8_t address, uint8_t data) {
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	d8 2f       	mov	r29, r24
 2d6:	c6 2f       	mov	r28, r22
	//Select CAN-controller
	SPI_select();
 2d8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SPI_select>
		
	SPI_send(MCP_WRITE);	//Send write command
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
	SPI_send(address);		//Send address
 2e2:	8d 2f       	mov	r24, r29
 2e4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
	SPI_send(data);			//Send data
 2e8:	8c 2f       	mov	r24, r28
 2ea:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
		
	//Deselect CAN-controller
	SPI_deselect();
 2ee:	0e 94 00 02 	call	0x400	; 0x400 <SPI_deselect>
		
	return 0;
}
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <mcp2515_request_to_send>:

int mcp2515_request_to_send(uint8_t command) {
 2fc:	cf 93       	push	r28
	#define MCP_RTS_TX2		0x84 -> command = 4
	#define MCP_RTS_ALL		0x87 -> command = 7
	*/

	//Check the last three bits for the commands
	if(command <= 7) {
 2fe:	88 30       	cpi	r24, 0x08	; 8
 300:	18 f4       	brcc	.+6      	; 0x308 <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
 302:	c8 2f       	mov	r28, r24
 304:	c0 68       	ori	r28, 0x80	; 128
 306:	01 c0       	rjmp	.+2      	; 0x30a <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
 308:	c0 e8       	ldi	r28, 0x80	; 128
	}
	
	//Select CAN-controller
	SPI_select();
 30a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SPI_select>
		
	SPI_send(command);		//Send RTS command
 30e:	8c 2f       	mov	r24, r28
 310:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
		
	//Deselect CAN-controller
	SPI_deselect();
 314:	0e 94 00 02 	call	0x400	; 0x400 <SPI_deselect>
		
	return 0;
}
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <mcp2515_bit_modify>:

int mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	18 2f       	mov	r17, r24
 328:	d6 2f       	mov	r29, r22
 32a:	c4 2f       	mov	r28, r20
	//Select CAN-controller
	SPI_select();
 32c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SPI_select>
		
	SPI_send(MCP_BITMOD);		//Send bit modify command
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
	SPI_send(address);			//Send address
 336:	81 2f       	mov	r24, r17
 338:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
	SPI_send(mask);				//Send mask byte
 33c:	8d 2f       	mov	r24, r29
 33e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
	SPI_send(data);				//Send data
 342:	8c 2f       	mov	r24, r28
 344:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
		
	//Deselect CAN-controller
	SPI_deselect();
 348:	0e 94 00 02 	call	0x400	; 0x400 <SPI_deselect>
		
	return 0;
}
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	08 95       	ret

00000358 <mcp2515_reset>:

int mcp2515_reset(void) {
	//Select CAN-controller
	SPI_select();
 358:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SPI_select>
	
	SPI_send(MCP_RESET);	//Send reset command
 35c:	80 ec       	ldi	r24, 0xC0	; 192
 35e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
	
	//Deselect CAN-controller
	SPI_deselect();
 362:	0e 94 00 02 	call	0x400	; 0x400 <SPI_deselect>
	
	return 0;
}
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	08 95       	ret

0000036c <mcp2515_read>:

uint8_t mcp2515_read(uint8_t address) {
 36c:	cf 93       	push	r28
 36e:	c8 2f       	mov	r28, r24
	uint8_t result;

	//Select CAN-controller
	SPI_select();
 370:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SPI_select>
	
	SPI_send(MCP_READ);		//Send read command
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
	SPI_send(address);		//Send address
 37a:	8c 2f       	mov	r24, r28
 37c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
	result = SPI_read();	//Read result
 380:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_read>
 384:	c8 2f       	mov	r28, r24
	
	//Deselect CAN-controller
	SPI_deselect();
 386:	0e 94 00 02 	call	0x400	; 0x400 <SPI_deselect>
	
	return result;
}
 38a:	8c 2f       	mov	r24, r28
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <mcp2515_init>:
#include <avr/io.h>
#include "uart.h"
#include "spi.h"
#include "mcp2515.h"

int mcp2515_init(void) {
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	1f 92       	push	r1
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//Initialize SPI driver
	SPI_init();
 39a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_init>
	
	//Reset the CAN controller
	mcp2515_reset();
 39e:	0e 94 ac 01 	call	0x358	; 0x358 <mcp2515_reset>
	
	//Self-test
	value = mcp2515_read(MCP_CANSTAT);
 3a2:	8e e0       	ldi	r24, 0x0E	; 14
 3a4:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp2515_read>
 3a8:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	80 7e       	andi	r24, 0xE0	; 224
 3ae:	80 38       	cpi	r24, 0x80	; 128
 3b0:	39 f0       	breq	.+14     	; 0x3c0 <mcp2515_init+0x30>
		UART_print("MCP2515 is NOT in configuration mode after reset!");
 3b2:	8f e6       	ldi	r24, 0x6F	; 111
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 1f 02 	call	0x43e	; 0x43e <UART_print>
		return 1;
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <mcp2515_init+0x34>
	}
	
	return 0;
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
}
 3c4:	82 2f       	mov	r24, r18
 3c6:	93 2f       	mov	r25, r19
 3c8:	0f 90       	pop	r0
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <SPI_init>:
#define SPI_MISO PB6
#define SPI_SCK PB7

int SPI_init(void) {
	//Set MOSI, SCK and SS as output pins
	DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_SS);
 3d0:	87 b3       	in	r24, 0x17	; 23
 3d2:	80 6b       	ori	r24, 0xB0	; 176
 3d4:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= ~(1<<SPI_MISO);
 3d6:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 3d8:	81 e5       	ldi	r24, 0x51	; 81
 3da:	8d b9       	out	0x0d, r24	; 13
	
	return 0;
}
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	08 95       	ret

000003e2 <SPI_send>:

int SPI_send(char data) {
	//Start the transmission
	SPDR = data;
 3e2:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for data to be transmitted (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
 3e4:	77 9b       	sbis	0x0e, 7	; 14
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <SPI_send+0x2>
	
	return 0;
}
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	08 95       	ret

000003ee <SPI_read>:

uint8_t SPI_read(void) {
	//Send dummy data to read from slave
	SPI_send(0);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_send>
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
 3f4:	77 9b       	sbis	0x0e, 7	; 14
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <SPI_read+0x6>
	
	return SPDR;
 3f8:	8f b1       	in	r24, 0x0f	; 15
}
 3fa:	08 95       	ret

000003fc <SPI_select>:

void SPI_select(void) {
	//Set !SS to 0 to select the slave
	PORTB &= ~(1<<SPI_SS);
 3fc:	c4 98       	cbi	0x18, 4	; 24
 3fe:	08 95       	ret

00000400 <SPI_deselect>:
}

void SPI_deselect(void) {
	//Set !SS to 1 to deselect the slave
	PORTB |= (1<<SPI_SS);
 400:	c4 9a       	sbi	0x18, 4	; 24
 402:	08 95       	ret

00000404 <UART_putchar>:
	return 0;
}

int UART_putchar(char c, FILE *f) {
	//Wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
 404:	5d 9b       	sbis	0x0b, 5	; 11
 406:	fe cf       	rjmp	.-4      	; 0x404 <UART_putchar>
	
	//Put data into buffer
	UDR0 = c;
 408:	8c b9       	out	0x0c, r24	; 12

	return 0;
}
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	08 95       	ret

00000410 <UART_recchar>:

unsigned char UART_recchar(void) {
	//Wait for data to be received
	while (!(UCSR0A & (1<<RXC0)));
 410:	5f 9b       	sbis	0x0b, 7	; 11
 412:	fe cf       	rjmp	.-4      	; 0x410 <UART_recchar>
	
	//Return data
	return UDR0;	
 414:	8c b1       	in	r24, 0x0c	; 12
}
 416:	08 95       	ret

00000418 <UART_init>:

FILE *uart;

int UART_init(unsigned int baudrate) {
	//Set UART0 baud rate
	UBRR0L = (unsigned char)(baudrate);
 418:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (unsigned char)(baudrate >> 8);
 41a:	90 bd       	out	0x20, r25	; 32
	
	//Enable TX0 and RX0
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 41c:	88 e1       	ldi	r24, 0x18	; 24
 41e:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 420:	8e e8       	ldi	r24, 0x8E	; 142
 422:	80 bd       	out	0x20, r24	; 32
	
	//Connect printf
	uart = fdevopen(&UART_putchar, &UART_recchar);
 424:	68 e0       	ldi	r22, 0x08	; 8
 426:	72 e0       	ldi	r23, 0x02	; 2
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <fdevopen>
 430:	90 93 a3 01 	sts	0x01A3, r25
 434:	80 93 a2 01 	sts	0x01A2, r24

	return 0;
}
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	08 95       	ret

0000043e <UART_print>:
	
	//Return data
	return UDR0;	
}

int UART_print(char * str){
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	ec 01       	movw	r28, r24
	int i = 0;
	while (str[i] != 0x00){
 444:	88 81       	ld	r24, Y
 446:	88 23       	and	r24, r24
 448:	51 f0       	breq	.+20     	; 0x45e <UART_print+0x20>
	
	//Return data
	return UDR0;	
}

int UART_print(char * str){
 44a:	21 96       	adiw	r28, 0x01	; 1
	int i = 0;
	while (str[i] != 0x00){
		UART_putchar(str[i],uart);
 44c:	60 91 a2 01 	lds	r22, 0x01A2
 450:	70 91 a3 01 	lds	r23, 0x01A3
 454:	0e 94 02 02 	call	0x404	; 0x404 <UART_putchar>
	return UDR0;	
}

int UART_print(char * str){
	int i = 0;
	while (str[i] != 0x00){
 458:	89 91       	ld	r24, Y+
 45a:	81 11       	cpse	r24, r1
 45c:	f7 cf       	rjmp	.-18     	; 0x44c <UART_print+0xe>
		UART_putchar(str[i],uart);
		i++;
	}
	return 0;
}
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <malloc>:
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	91 05       	cpc	r25, r1
 474:	10 f4       	brcc	.+4      	; 0x47a <malloc+0x12>
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	e0 91 a6 01 	lds	r30, 0x01A6
 47e:	f0 91 a7 01 	lds	r31, 0x01A7
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	c0 e0       	ldi	r28, 0x00	; 0
 488:	d0 e0       	ldi	r29, 0x00	; 0
 48a:	23 c0       	rjmp	.+70     	; 0x4d2 <malloc+0x6a>
 48c:	40 81       	ld	r20, Z
 48e:	51 81       	ldd	r21, Z+1	; 0x01
 490:	48 17       	cp	r20, r24
 492:	59 07       	cpc	r21, r25
 494:	a8 f0       	brcs	.+42     	; 0x4c0 <malloc+0x58>
 496:	48 17       	cp	r20, r24
 498:	59 07       	cpc	r21, r25
 49a:	61 f4       	brne	.+24     	; 0x4b4 <malloc+0x4c>
 49c:	82 81       	ldd	r24, Z+2	; 0x02
 49e:	93 81       	ldd	r25, Z+3	; 0x03
 4a0:	20 97       	sbiw	r28, 0x00	; 0
 4a2:	19 f0       	breq	.+6      	; 0x4aa <malloc+0x42>
 4a4:	9b 83       	std	Y+3, r25	; 0x03
 4a6:	8a 83       	std	Y+2, r24	; 0x02
 4a8:	2e c0       	rjmp	.+92     	; 0x506 <__stack+0x7>
 4aa:	90 93 a7 01 	sts	0x01A7, r25
 4ae:	80 93 a6 01 	sts	0x01A6, r24
 4b2:	29 c0       	rjmp	.+82     	; 0x506 <__stack+0x7>
 4b4:	21 15       	cp	r18, r1
 4b6:	31 05       	cpc	r19, r1
 4b8:	29 f0       	breq	.+10     	; 0x4c4 <malloc+0x5c>
 4ba:	42 17       	cp	r20, r18
 4bc:	53 07       	cpc	r21, r19
 4be:	10 f0       	brcs	.+4      	; 0x4c4 <malloc+0x5c>
 4c0:	a9 01       	movw	r20, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <malloc+0x60>
 4c4:	be 01       	movw	r22, r28
 4c6:	df 01       	movw	r26, r30
 4c8:	02 81       	ldd	r16, Z+2	; 0x02
 4ca:	13 81       	ldd	r17, Z+3	; 0x03
 4cc:	ef 01       	movw	r28, r30
 4ce:	9a 01       	movw	r18, r20
 4d0:	f8 01       	movw	r30, r16
 4d2:	30 97       	sbiw	r30, 0x00	; 0
 4d4:	d9 f6       	brne	.-74     	; 0x48c <malloc+0x24>
 4d6:	21 15       	cp	r18, r1
 4d8:	31 05       	cpc	r19, r1
 4da:	09 f1       	breq	.+66     	; 0x51e <__stack+0x1f>
 4dc:	28 1b       	sub	r18, r24
 4de:	39 0b       	sbc	r19, r25
 4e0:	24 30       	cpi	r18, 0x04	; 4
 4e2:	31 05       	cpc	r19, r1
 4e4:	90 f4       	brcc	.+36     	; 0x50a <__stack+0xb>
 4e6:	12 96       	adiw	r26, 0x02	; 2
 4e8:	8d 91       	ld	r24, X+
 4ea:	9c 91       	ld	r25, X
 4ec:	13 97       	sbiw	r26, 0x03	; 3
 4ee:	61 15       	cp	r22, r1
 4f0:	71 05       	cpc	r23, r1
 4f2:	21 f0       	breq	.+8      	; 0x4fc <malloc+0x94>
 4f4:	fb 01       	movw	r30, r22
 4f6:	93 83       	std	Z+3, r25	; 0x03
 4f8:	82 83       	std	Z+2, r24	; 0x02
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <__stack+0x5>
 4fc:	90 93 a7 01 	sts	0x01A7, r25
 500:	80 93 a6 01 	sts	0x01A6, r24
 504:	fd 01       	movw	r30, r26
 506:	32 96       	adiw	r30, 0x02	; 2
 508:	44 c0       	rjmp	.+136    	; 0x592 <__stack+0x93>
 50a:	fd 01       	movw	r30, r26
 50c:	e2 0f       	add	r30, r18
 50e:	f3 1f       	adc	r31, r19
 510:	81 93       	st	Z+, r24
 512:	91 93       	st	Z+, r25
 514:	22 50       	subi	r18, 0x02	; 2
 516:	31 09       	sbc	r19, r1
 518:	2d 93       	st	X+, r18
 51a:	3c 93       	st	X, r19
 51c:	3a c0       	rjmp	.+116    	; 0x592 <__stack+0x93>
 51e:	20 91 a4 01 	lds	r18, 0x01A4
 522:	30 91 a5 01 	lds	r19, 0x01A5
 526:	23 2b       	or	r18, r19
 528:	41 f4       	brne	.+16     	; 0x53a <__stack+0x3b>
 52a:	20 91 02 01 	lds	r18, 0x0102
 52e:	30 91 03 01 	lds	r19, 0x0103
 532:	30 93 a5 01 	sts	0x01A5, r19
 536:	20 93 a4 01 	sts	0x01A4, r18
 53a:	20 91 00 01 	lds	r18, 0x0100
 53e:	30 91 01 01 	lds	r19, 0x0101
 542:	21 15       	cp	r18, r1
 544:	31 05       	cpc	r19, r1
 546:	41 f4       	brne	.+16     	; 0x558 <__stack+0x59>
 548:	2d b7       	in	r18, 0x3d	; 61
 54a:	3e b7       	in	r19, 0x3e	; 62
 54c:	40 91 04 01 	lds	r20, 0x0104
 550:	50 91 05 01 	lds	r21, 0x0105
 554:	24 1b       	sub	r18, r20
 556:	35 0b       	sbc	r19, r21
 558:	e0 91 a4 01 	lds	r30, 0x01A4
 55c:	f0 91 a5 01 	lds	r31, 0x01A5
 560:	e2 17       	cp	r30, r18
 562:	f3 07       	cpc	r31, r19
 564:	a0 f4       	brcc	.+40     	; 0x58e <__stack+0x8f>
 566:	2e 1b       	sub	r18, r30
 568:	3f 0b       	sbc	r19, r31
 56a:	28 17       	cp	r18, r24
 56c:	39 07       	cpc	r19, r25
 56e:	78 f0       	brcs	.+30     	; 0x58e <__stack+0x8f>
 570:	ac 01       	movw	r20, r24
 572:	4e 5f       	subi	r20, 0xFE	; 254
 574:	5f 4f       	sbci	r21, 0xFF	; 255
 576:	24 17       	cp	r18, r20
 578:	35 07       	cpc	r19, r21
 57a:	48 f0       	brcs	.+18     	; 0x58e <__stack+0x8f>
 57c:	4e 0f       	add	r20, r30
 57e:	5f 1f       	adc	r21, r31
 580:	50 93 a5 01 	sts	0x01A5, r21
 584:	40 93 a4 01 	sts	0x01A4, r20
 588:	81 93       	st	Z+, r24
 58a:	91 93       	st	Z+, r25
 58c:	02 c0       	rjmp	.+4      	; 0x592 <__stack+0x93>
 58e:	e0 e0       	ldi	r30, 0x00	; 0
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	cf 01       	movw	r24, r30
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	08 95       	ret

0000059e <free>:
 59e:	ef 92       	push	r14
 5a0:	ff 92       	push	r15
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	00 97       	sbiw	r24, 0x00	; 0
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <free+0x12>
 5ae:	8f c0       	rjmp	.+286    	; 0x6ce <free+0x130>
 5b0:	dc 01       	movw	r26, r24
 5b2:	12 97       	sbiw	r26, 0x02	; 2
 5b4:	13 96       	adiw	r26, 0x03	; 3
 5b6:	1c 92       	st	X, r1
 5b8:	1e 92       	st	-X, r1
 5ba:	12 97       	sbiw	r26, 0x02	; 2
 5bc:	e0 90 a6 01 	lds	r14, 0x01A6
 5c0:	f0 90 a7 01 	lds	r15, 0x01A7
 5c4:	e1 14       	cp	r14, r1
 5c6:	f1 04       	cpc	r15, r1
 5c8:	89 f4       	brne	.+34     	; 0x5ec <free+0x4e>
 5ca:	2d 91       	ld	r18, X+
 5cc:	3c 91       	ld	r19, X
 5ce:	11 97       	sbiw	r26, 0x01	; 1
 5d0:	28 0f       	add	r18, r24
 5d2:	39 1f       	adc	r19, r25
 5d4:	80 91 a4 01 	lds	r24, 0x01A4
 5d8:	90 91 a5 01 	lds	r25, 0x01A5
 5dc:	82 17       	cp	r24, r18
 5de:	93 07       	cpc	r25, r19
 5e0:	89 f5       	brne	.+98     	; 0x644 <free+0xa6>
 5e2:	b0 93 a5 01 	sts	0x01A5, r27
 5e6:	a0 93 a4 01 	sts	0x01A4, r26
 5ea:	71 c0       	rjmp	.+226    	; 0x6ce <free+0x130>
 5ec:	e7 01       	movw	r28, r14
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <free+0x58>
 5f4:	ea 01       	movw	r28, r20
 5f6:	ca 17       	cp	r28, r26
 5f8:	db 07       	cpc	r29, r27
 5fa:	38 f4       	brcc	.+14     	; 0x60a <free+0x6c>
 5fc:	4a 81       	ldd	r20, Y+2	; 0x02
 5fe:	5b 81       	ldd	r21, Y+3	; 0x03
 600:	9e 01       	movw	r18, r28
 602:	41 15       	cp	r20, r1
 604:	51 05       	cpc	r21, r1
 606:	b1 f7       	brne	.-20     	; 0x5f4 <free+0x56>
 608:	22 c0       	rjmp	.+68     	; 0x64e <free+0xb0>
 60a:	bc 01       	movw	r22, r24
 60c:	62 50       	subi	r22, 0x02	; 2
 60e:	71 09       	sbc	r23, r1
 610:	fb 01       	movw	r30, r22
 612:	d3 83       	std	Z+3, r29	; 0x03
 614:	c2 83       	std	Z+2, r28	; 0x02
 616:	00 81       	ld	r16, Z
 618:	11 81       	ldd	r17, Z+1	; 0x01
 61a:	ac 01       	movw	r20, r24
 61c:	40 0f       	add	r20, r16
 61e:	51 1f       	adc	r21, r17
 620:	4c 17       	cp	r20, r28
 622:	5d 07       	cpc	r21, r29
 624:	61 f4       	brne	.+24     	; 0x63e <free+0xa0>
 626:	48 81       	ld	r20, Y
 628:	59 81       	ldd	r21, Y+1	; 0x01
 62a:	40 0f       	add	r20, r16
 62c:	51 1f       	adc	r21, r17
 62e:	4e 5f       	subi	r20, 0xFE	; 254
 630:	5f 4f       	sbci	r21, 0xFF	; 255
 632:	51 83       	std	Z+1, r21	; 0x01
 634:	40 83       	st	Z, r20
 636:	4a 81       	ldd	r20, Y+2	; 0x02
 638:	5b 81       	ldd	r21, Y+3	; 0x03
 63a:	53 83       	std	Z+3, r21	; 0x03
 63c:	42 83       	std	Z+2, r20	; 0x02
 63e:	21 15       	cp	r18, r1
 640:	31 05       	cpc	r19, r1
 642:	29 f4       	brne	.+10     	; 0x64e <free+0xb0>
 644:	b0 93 a7 01 	sts	0x01A7, r27
 648:	a0 93 a6 01 	sts	0x01A6, r26
 64c:	40 c0       	rjmp	.+128    	; 0x6ce <free+0x130>
 64e:	f9 01       	movw	r30, r18
 650:	b3 83       	std	Z+3, r27	; 0x03
 652:	a2 83       	std	Z+2, r26	; 0x02
 654:	e9 01       	movw	r28, r18
 656:	69 91       	ld	r22, Y+
 658:	79 91       	ld	r23, Y+
 65a:	c6 0f       	add	r28, r22
 65c:	d7 1f       	adc	r29, r23
 65e:	ac 17       	cp	r26, r28
 660:	bd 07       	cpc	r27, r29
 662:	79 f4       	brne	.+30     	; 0x682 <free+0xe4>
 664:	dc 01       	movw	r26, r24
 666:	5e 91       	ld	r21, -X
 668:	4e 91       	ld	r20, -X
 66a:	46 0f       	add	r20, r22
 66c:	57 1f       	adc	r21, r23
 66e:	4e 5f       	subi	r20, 0xFE	; 254
 670:	5f 4f       	sbci	r21, 0xFF	; 255
 672:	51 83       	std	Z+1, r21	; 0x01
 674:	40 83       	st	Z, r20
 676:	12 96       	adiw	r26, 0x02	; 2
 678:	8d 91       	ld	r24, X+
 67a:	9c 91       	ld	r25, X
 67c:	13 97       	sbiw	r26, 0x03	; 3
 67e:	93 83       	std	Z+3, r25	; 0x03
 680:	82 83       	std	Z+2, r24	; 0x02
 682:	a0 e0       	ldi	r26, 0x00	; 0
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <free+0xee>
 688:	d7 01       	movw	r26, r14
 68a:	7c 01       	movw	r14, r24
 68c:	f7 01       	movw	r30, r14
 68e:	82 81       	ldd	r24, Z+2	; 0x02
 690:	93 81       	ldd	r25, Z+3	; 0x03
 692:	00 97       	sbiw	r24, 0x00	; 0
 694:	c9 f7       	brne	.-14     	; 0x688 <free+0xea>
 696:	c7 01       	movw	r24, r14
 698:	02 96       	adiw	r24, 0x02	; 2
 69a:	20 81       	ld	r18, Z
 69c:	31 81       	ldd	r19, Z+1	; 0x01
 69e:	82 0f       	add	r24, r18
 6a0:	93 1f       	adc	r25, r19
 6a2:	20 91 a4 01 	lds	r18, 0x01A4
 6a6:	30 91 a5 01 	lds	r19, 0x01A5
 6aa:	28 17       	cp	r18, r24
 6ac:	39 07       	cpc	r19, r25
 6ae:	79 f4       	brne	.+30     	; 0x6ce <free+0x130>
 6b0:	10 97       	sbiw	r26, 0x00	; 0
 6b2:	29 f4       	brne	.+10     	; 0x6be <free+0x120>
 6b4:	10 92 a7 01 	sts	0x01A7, r1
 6b8:	10 92 a6 01 	sts	0x01A6, r1
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <free+0x128>
 6be:	13 96       	adiw	r26, 0x03	; 3
 6c0:	1c 92       	st	X, r1
 6c2:	1e 92       	st	-X, r1
 6c4:	12 97       	sbiw	r26, 0x02	; 2
 6c6:	f0 92 a5 01 	sts	0x01A5, r15
 6ca:	e0 92 a4 01 	sts	0x01A4, r14
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	e6 e0       	ldi	r30, 0x06	; 6
 6d4:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__epilogue_restores__+0x18>

000006d8 <fdevopen>:
 6d8:	0f 93       	push	r16
 6da:	1f 93       	push	r17
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	ec 01       	movw	r28, r24
 6e2:	8b 01       	movw	r16, r22
 6e4:	00 97       	sbiw	r24, 0x00	; 0
 6e6:	31 f4       	brne	.+12     	; 0x6f4 <fdevopen+0x1c>
 6e8:	61 15       	cp	r22, r1
 6ea:	71 05       	cpc	r23, r1
 6ec:	19 f4       	brne	.+6      	; 0x6f4 <fdevopen+0x1c>
 6ee:	e0 e0       	ldi	r30, 0x00	; 0
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	37 c0       	rjmp	.+110    	; 0x762 <fdevopen+0x8a>
 6f4:	6e e0       	ldi	r22, 0x0E	; 14
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 a7 05 	call	0xb4e	; 0xb4e <calloc>
 700:	fc 01       	movw	r30, r24
 702:	00 97       	sbiw	r24, 0x00	; 0
 704:	a1 f3       	breq	.-24     	; 0x6ee <fdevopen+0x16>
 706:	80 e8       	ldi	r24, 0x80	; 128
 708:	83 83       	std	Z+3, r24	; 0x03
 70a:	01 15       	cp	r16, r1
 70c:	11 05       	cpc	r17, r1
 70e:	71 f0       	breq	.+28     	; 0x72c <fdevopen+0x54>
 710:	13 87       	std	Z+11, r17	; 0x0b
 712:	02 87       	std	Z+10, r16	; 0x0a
 714:	81 e8       	ldi	r24, 0x81	; 129
 716:	83 83       	std	Z+3, r24	; 0x03
 718:	80 91 a8 01 	lds	r24, 0x01A8
 71c:	90 91 a9 01 	lds	r25, 0x01A9
 720:	89 2b       	or	r24, r25
 722:	21 f4       	brne	.+8      	; 0x72c <fdevopen+0x54>
 724:	f0 93 a9 01 	sts	0x01A9, r31
 728:	e0 93 a8 01 	sts	0x01A8, r30
 72c:	20 97       	sbiw	r28, 0x00	; 0
 72e:	c9 f0       	breq	.+50     	; 0x762 <fdevopen+0x8a>
 730:	d1 87       	std	Z+9, r29	; 0x09
 732:	c0 87       	std	Z+8, r28	; 0x08
 734:	83 81       	ldd	r24, Z+3	; 0x03
 736:	82 60       	ori	r24, 0x02	; 2
 738:	83 83       	std	Z+3, r24	; 0x03
 73a:	80 91 aa 01 	lds	r24, 0x01AA
 73e:	90 91 ab 01 	lds	r25, 0x01AB
 742:	89 2b       	or	r24, r25
 744:	71 f4       	brne	.+28     	; 0x762 <fdevopen+0x8a>
 746:	f0 93 ab 01 	sts	0x01AB, r31
 74a:	e0 93 aa 01 	sts	0x01AA, r30
 74e:	80 91 ac 01 	lds	r24, 0x01AC
 752:	90 91 ad 01 	lds	r25, 0x01AD
 756:	89 2b       	or	r24, r25
 758:	21 f4       	brne	.+8      	; 0x762 <fdevopen+0x8a>
 75a:	f0 93 ad 01 	sts	0x01AD, r31
 75e:	e0 93 ac 01 	sts	0x01AC, r30
 762:	cf 01       	movw	r24, r30
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <printf>:
 76e:	a0 e0       	ldi	r26, 0x00	; 0
 770:	b0 e0       	ldi	r27, 0x00	; 0
 772:	ed eb       	ldi	r30, 0xBD	; 189
 774:	f3 e0       	ldi	r31, 0x03	; 3
 776:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__prologue_saves__+0x20>
 77a:	fe 01       	movw	r30, r28
 77c:	35 96       	adiw	r30, 0x05	; 5
 77e:	61 91       	ld	r22, Z+
 780:	71 91       	ld	r23, Z+
 782:	af 01       	movw	r20, r30
 784:	80 91 aa 01 	lds	r24, 0x01AA
 788:	90 91 ab 01 	lds	r25, 0x01AB
 78c:	0e 94 cb 03 	call	0x796	; 0x796 <vfprintf>
 790:	e2 e0       	ldi	r30, 0x02	; 2
 792:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__epilogue_restores__+0x20>

00000796 <vfprintf>:
 796:	ac e0       	ldi	r26, 0x0C	; 12
 798:	b0 e0       	ldi	r27, 0x00	; 0
 79a:	e1 ed       	ldi	r30, 0xD1	; 209
 79c:	f3 e0       	ldi	r31, 0x03	; 3
 79e:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__prologue_saves__>
 7a2:	7c 01       	movw	r14, r24
 7a4:	6b 01       	movw	r12, r22
 7a6:	8a 01       	movw	r16, r20
 7a8:	fc 01       	movw	r30, r24
 7aa:	17 82       	std	Z+7, r1	; 0x07
 7ac:	16 82       	std	Z+6, r1	; 0x06
 7ae:	83 81       	ldd	r24, Z+3	; 0x03
 7b0:	81 ff       	sbrs	r24, 1
 7b2:	c6 c1       	rjmp	.+908    	; 0xb40 <vfprintf+0x3aa>
 7b4:	88 24       	eor	r8, r8
 7b6:	83 94       	inc	r8
 7b8:	91 2c       	mov	r9, r1
 7ba:	8c 0e       	add	r8, r28
 7bc:	9d 1e       	adc	r9, r29
 7be:	f7 01       	movw	r30, r14
 7c0:	93 81       	ldd	r25, Z+3	; 0x03
 7c2:	f6 01       	movw	r30, r12
 7c4:	93 fd       	sbrc	r25, 3
 7c6:	85 91       	lpm	r24, Z+
 7c8:	93 ff       	sbrs	r25, 3
 7ca:	81 91       	ld	r24, Z+
 7cc:	6f 01       	movw	r12, r30
 7ce:	88 23       	and	r24, r24
 7d0:	09 f4       	brne	.+2      	; 0x7d4 <vfprintf+0x3e>
 7d2:	b2 c1       	rjmp	.+868    	; 0xb38 <vfprintf+0x3a2>
 7d4:	85 32       	cpi	r24, 0x25	; 37
 7d6:	39 f4       	brne	.+14     	; 0x7e6 <vfprintf+0x50>
 7d8:	93 fd       	sbrc	r25, 3
 7da:	85 91       	lpm	r24, Z+
 7dc:	93 ff       	sbrs	r25, 3
 7de:	81 91       	ld	r24, Z+
 7e0:	6f 01       	movw	r12, r30
 7e2:	85 32       	cpi	r24, 0x25	; 37
 7e4:	29 f4       	brne	.+10     	; 0x7f0 <vfprintf+0x5a>
 7e6:	b7 01       	movw	r22, r14
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 7ee:	e7 cf       	rjmp	.-50     	; 0x7be <vfprintf+0x28>
 7f0:	51 2c       	mov	r5, r1
 7f2:	31 2c       	mov	r3, r1
 7f4:	20 e0       	ldi	r18, 0x00	; 0
 7f6:	20 32       	cpi	r18, 0x20	; 32
 7f8:	a8 f4       	brcc	.+42     	; 0x824 <vfprintf+0x8e>
 7fa:	8b 32       	cpi	r24, 0x2B	; 43
 7fc:	61 f0       	breq	.+24     	; 0x816 <vfprintf+0x80>
 7fe:	28 f4       	brcc	.+10     	; 0x80a <vfprintf+0x74>
 800:	80 32       	cpi	r24, 0x20	; 32
 802:	51 f0       	breq	.+20     	; 0x818 <vfprintf+0x82>
 804:	83 32       	cpi	r24, 0x23	; 35
 806:	71 f4       	brne	.+28     	; 0x824 <vfprintf+0x8e>
 808:	0b c0       	rjmp	.+22     	; 0x820 <vfprintf+0x8a>
 80a:	8d 32       	cpi	r24, 0x2D	; 45
 80c:	39 f0       	breq	.+14     	; 0x81c <vfprintf+0x86>
 80e:	80 33       	cpi	r24, 0x30	; 48
 810:	49 f4       	brne	.+18     	; 0x824 <vfprintf+0x8e>
 812:	21 60       	ori	r18, 0x01	; 1
 814:	28 c0       	rjmp	.+80     	; 0x866 <vfprintf+0xd0>
 816:	22 60       	ori	r18, 0x02	; 2
 818:	24 60       	ori	r18, 0x04	; 4
 81a:	25 c0       	rjmp	.+74     	; 0x866 <vfprintf+0xd0>
 81c:	28 60       	ori	r18, 0x08	; 8
 81e:	23 c0       	rjmp	.+70     	; 0x866 <vfprintf+0xd0>
 820:	20 61       	ori	r18, 0x10	; 16
 822:	21 c0       	rjmp	.+66     	; 0x866 <vfprintf+0xd0>
 824:	27 fd       	sbrc	r18, 7
 826:	27 c0       	rjmp	.+78     	; 0x876 <vfprintf+0xe0>
 828:	38 2f       	mov	r19, r24
 82a:	30 53       	subi	r19, 0x30	; 48
 82c:	3a 30       	cpi	r19, 0x0A	; 10
 82e:	78 f4       	brcc	.+30     	; 0x84e <vfprintf+0xb8>
 830:	26 ff       	sbrs	r18, 6
 832:	06 c0       	rjmp	.+12     	; 0x840 <vfprintf+0xaa>
 834:	fa e0       	ldi	r31, 0x0A	; 10
 836:	5f 9e       	mul	r5, r31
 838:	30 0d       	add	r19, r0
 83a:	11 24       	eor	r1, r1
 83c:	53 2e       	mov	r5, r19
 83e:	13 c0       	rjmp	.+38     	; 0x866 <vfprintf+0xd0>
 840:	8a e0       	ldi	r24, 0x0A	; 10
 842:	38 9e       	mul	r3, r24
 844:	30 0d       	add	r19, r0
 846:	11 24       	eor	r1, r1
 848:	33 2e       	mov	r3, r19
 84a:	20 62       	ori	r18, 0x20	; 32
 84c:	0c c0       	rjmp	.+24     	; 0x866 <vfprintf+0xd0>
 84e:	8e 32       	cpi	r24, 0x2E	; 46
 850:	21 f4       	brne	.+8      	; 0x85a <vfprintf+0xc4>
 852:	26 fd       	sbrc	r18, 6
 854:	71 c1       	rjmp	.+738    	; 0xb38 <vfprintf+0x3a2>
 856:	20 64       	ori	r18, 0x40	; 64
 858:	06 c0       	rjmp	.+12     	; 0x866 <vfprintf+0xd0>
 85a:	8c 36       	cpi	r24, 0x6C	; 108
 85c:	11 f4       	brne	.+4      	; 0x862 <vfprintf+0xcc>
 85e:	20 68       	ori	r18, 0x80	; 128
 860:	02 c0       	rjmp	.+4      	; 0x866 <vfprintf+0xd0>
 862:	88 36       	cpi	r24, 0x68	; 104
 864:	41 f4       	brne	.+16     	; 0x876 <vfprintf+0xe0>
 866:	f6 01       	movw	r30, r12
 868:	93 fd       	sbrc	r25, 3
 86a:	85 91       	lpm	r24, Z+
 86c:	93 ff       	sbrs	r25, 3
 86e:	81 91       	ld	r24, Z+
 870:	6f 01       	movw	r12, r30
 872:	81 11       	cpse	r24, r1
 874:	c0 cf       	rjmp	.-128    	; 0x7f6 <vfprintf+0x60>
 876:	98 2f       	mov	r25, r24
 878:	95 54       	subi	r25, 0x45	; 69
 87a:	93 30       	cpi	r25, 0x03	; 3
 87c:	18 f0       	brcs	.+6      	; 0x884 <vfprintf+0xee>
 87e:	90 52       	subi	r25, 0x20	; 32
 880:	93 30       	cpi	r25, 0x03	; 3
 882:	28 f4       	brcc	.+10     	; 0x88e <vfprintf+0xf8>
 884:	0c 5f       	subi	r16, 0xFC	; 252
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	ff e3       	ldi	r31, 0x3F	; 63
 88a:	f9 83       	std	Y+1, r31	; 0x01
 88c:	0d c0       	rjmp	.+26     	; 0x8a8 <vfprintf+0x112>
 88e:	83 36       	cpi	r24, 0x63	; 99
 890:	31 f0       	breq	.+12     	; 0x89e <vfprintf+0x108>
 892:	83 37       	cpi	r24, 0x73	; 115
 894:	71 f0       	breq	.+28     	; 0x8b2 <vfprintf+0x11c>
 896:	83 35       	cpi	r24, 0x53	; 83
 898:	09 f0       	breq	.+2      	; 0x89c <vfprintf+0x106>
 89a:	5e c0       	rjmp	.+188    	; 0x958 <vfprintf+0x1c2>
 89c:	23 c0       	rjmp	.+70     	; 0x8e4 <vfprintf+0x14e>
 89e:	f8 01       	movw	r30, r16
 8a0:	80 81       	ld	r24, Z
 8a2:	89 83       	std	Y+1, r24	; 0x01
 8a4:	0e 5f       	subi	r16, 0xFE	; 254
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	44 24       	eor	r4, r4
 8aa:	43 94       	inc	r4
 8ac:	51 2c       	mov	r5, r1
 8ae:	54 01       	movw	r10, r8
 8b0:	15 c0       	rjmp	.+42     	; 0x8dc <vfprintf+0x146>
 8b2:	38 01       	movw	r6, r16
 8b4:	f2 e0       	ldi	r31, 0x02	; 2
 8b6:	6f 0e       	add	r6, r31
 8b8:	71 1c       	adc	r7, r1
 8ba:	f8 01       	movw	r30, r16
 8bc:	a0 80       	ld	r10, Z
 8be:	b1 80       	ldd	r11, Z+1	; 0x01
 8c0:	26 ff       	sbrs	r18, 6
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <vfprintf+0x134>
 8c4:	65 2d       	mov	r22, r5
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <vfprintf+0x138>
 8ca:	6f ef       	ldi	r22, 0xFF	; 255
 8cc:	7f ef       	ldi	r23, 0xFF	; 255
 8ce:	c5 01       	movw	r24, r10
 8d0:	2c 87       	std	Y+12, r18	; 0x0c
 8d2:	0e 94 d7 05 	call	0xbae	; 0xbae <strnlen>
 8d6:	2c 01       	movw	r4, r24
 8d8:	83 01       	movw	r16, r6
 8da:	2c 85       	ldd	r18, Y+12	; 0x0c
 8dc:	6f e7       	ldi	r22, 0x7F	; 127
 8de:	26 2e       	mov	r2, r22
 8e0:	22 22       	and	r2, r18
 8e2:	18 c0       	rjmp	.+48     	; 0x914 <vfprintf+0x17e>
 8e4:	38 01       	movw	r6, r16
 8e6:	f2 e0       	ldi	r31, 0x02	; 2
 8e8:	6f 0e       	add	r6, r31
 8ea:	71 1c       	adc	r7, r1
 8ec:	f8 01       	movw	r30, r16
 8ee:	a0 80       	ld	r10, Z
 8f0:	b1 80       	ldd	r11, Z+1	; 0x01
 8f2:	26 ff       	sbrs	r18, 6
 8f4:	03 c0       	rjmp	.+6      	; 0x8fc <vfprintf+0x166>
 8f6:	65 2d       	mov	r22, r5
 8f8:	70 e0       	ldi	r23, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <vfprintf+0x16a>
 8fc:	6f ef       	ldi	r22, 0xFF	; 255
 8fe:	7f ef       	ldi	r23, 0xFF	; 255
 900:	c5 01       	movw	r24, r10
 902:	2c 87       	std	Y+12, r18	; 0x0c
 904:	0e 94 c5 05 	call	0xb8a	; 0xb8a <strnlen_P>
 908:	2c 01       	movw	r4, r24
 90a:	2c 85       	ldd	r18, Y+12	; 0x0c
 90c:	50 e8       	ldi	r21, 0x80	; 128
 90e:	25 2e       	mov	r2, r21
 910:	22 2a       	or	r2, r18
 912:	83 01       	movw	r16, r6
 914:	23 fc       	sbrc	r2, 3
 916:	1c c0       	rjmp	.+56     	; 0x950 <vfprintf+0x1ba>
 918:	06 c0       	rjmp	.+12     	; 0x926 <vfprintf+0x190>
 91a:	b7 01       	movw	r22, r14
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 924:	3a 94       	dec	r3
 926:	83 2d       	mov	r24, r3
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	48 16       	cp	r4, r24
 92c:	59 06       	cpc	r5, r25
 92e:	a8 f3       	brcs	.-22     	; 0x91a <vfprintf+0x184>
 930:	0f c0       	rjmp	.+30     	; 0x950 <vfprintf+0x1ba>
 932:	f5 01       	movw	r30, r10
 934:	27 fc       	sbrc	r2, 7
 936:	85 91       	lpm	r24, Z+
 938:	27 fe       	sbrs	r2, 7
 93a:	81 91       	ld	r24, Z+
 93c:	5f 01       	movw	r10, r30
 93e:	b7 01       	movw	r22, r14
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 946:	31 10       	cpse	r3, r1
 948:	3a 94       	dec	r3
 94a:	f1 e0       	ldi	r31, 0x01	; 1
 94c:	4f 1a       	sub	r4, r31
 94e:	51 08       	sbc	r5, r1
 950:	41 14       	cp	r4, r1
 952:	51 04       	cpc	r5, r1
 954:	71 f7       	brne	.-36     	; 0x932 <vfprintf+0x19c>
 956:	ed c0       	rjmp	.+474    	; 0xb32 <vfprintf+0x39c>
 958:	84 36       	cpi	r24, 0x64	; 100
 95a:	11 f0       	breq	.+4      	; 0x960 <vfprintf+0x1ca>
 95c:	89 36       	cpi	r24, 0x69	; 105
 95e:	41 f5       	brne	.+80     	; 0x9b0 <vfprintf+0x21a>
 960:	f8 01       	movw	r30, r16
 962:	27 ff       	sbrs	r18, 7
 964:	07 c0       	rjmp	.+14     	; 0x974 <vfprintf+0x1de>
 966:	60 81       	ld	r22, Z
 968:	71 81       	ldd	r23, Z+1	; 0x01
 96a:	82 81       	ldd	r24, Z+2	; 0x02
 96c:	93 81       	ldd	r25, Z+3	; 0x03
 96e:	0c 5f       	subi	r16, 0xFC	; 252
 970:	1f 4f       	sbci	r17, 0xFF	; 255
 972:	08 c0       	rjmp	.+16     	; 0x984 <vfprintf+0x1ee>
 974:	60 81       	ld	r22, Z
 976:	71 81       	ldd	r23, Z+1	; 0x01
 978:	88 27       	eor	r24, r24
 97a:	77 fd       	sbrc	r23, 7
 97c:	80 95       	com	r24
 97e:	98 2f       	mov	r25, r24
 980:	0e 5f       	subi	r16, 0xFE	; 254
 982:	1f 4f       	sbci	r17, 0xFF	; 255
 984:	4f e6       	ldi	r20, 0x6F	; 111
 986:	b4 2e       	mov	r11, r20
 988:	b2 22       	and	r11, r18
 98a:	97 ff       	sbrs	r25, 7
 98c:	09 c0       	rjmp	.+18     	; 0x9a0 <vfprintf+0x20a>
 98e:	90 95       	com	r25
 990:	80 95       	com	r24
 992:	70 95       	com	r23
 994:	61 95       	neg	r22
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	f0 e8       	ldi	r31, 0x80	; 128
 99e:	bf 2a       	or	r11, r31
 9a0:	2a e0       	ldi	r18, 0x0A	; 10
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	a4 01       	movw	r20, r8
 9a6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__ultoa_invert>
 9aa:	a8 2e       	mov	r10, r24
 9ac:	a8 18       	sub	r10, r8
 9ae:	43 c0       	rjmp	.+134    	; 0xa36 <vfprintf+0x2a0>
 9b0:	85 37       	cpi	r24, 0x75	; 117
 9b2:	31 f4       	brne	.+12     	; 0x9c0 <vfprintf+0x22a>
 9b4:	3f ee       	ldi	r19, 0xEF	; 239
 9b6:	b3 2e       	mov	r11, r19
 9b8:	b2 22       	and	r11, r18
 9ba:	2a e0       	ldi	r18, 0x0A	; 10
 9bc:	30 e0       	ldi	r19, 0x00	; 0
 9be:	24 c0       	rjmp	.+72     	; 0xa08 <vfprintf+0x272>
 9c0:	99 ef       	ldi	r25, 0xF9	; 249
 9c2:	b9 2e       	mov	r11, r25
 9c4:	b2 22       	and	r11, r18
 9c6:	8f 36       	cpi	r24, 0x6F	; 111
 9c8:	b9 f0       	breq	.+46     	; 0x9f8 <vfprintf+0x262>
 9ca:	20 f4       	brcc	.+8      	; 0x9d4 <vfprintf+0x23e>
 9cc:	88 35       	cpi	r24, 0x58	; 88
 9ce:	09 f0       	breq	.+2      	; 0x9d2 <vfprintf+0x23c>
 9d0:	b3 c0       	rjmp	.+358    	; 0xb38 <vfprintf+0x3a2>
 9d2:	0d c0       	rjmp	.+26     	; 0x9ee <vfprintf+0x258>
 9d4:	80 37       	cpi	r24, 0x70	; 112
 9d6:	21 f0       	breq	.+8      	; 0x9e0 <vfprintf+0x24a>
 9d8:	88 37       	cpi	r24, 0x78	; 120
 9da:	09 f0       	breq	.+2      	; 0x9de <vfprintf+0x248>
 9dc:	ad c0       	rjmp	.+346    	; 0xb38 <vfprintf+0x3a2>
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <vfprintf+0x24e>
 9e0:	20 e1       	ldi	r18, 0x10	; 16
 9e2:	b2 2a       	or	r11, r18
 9e4:	b4 fe       	sbrs	r11, 4
 9e6:	0b c0       	rjmp	.+22     	; 0x9fe <vfprintf+0x268>
 9e8:	84 e0       	ldi	r24, 0x04	; 4
 9ea:	b8 2a       	or	r11, r24
 9ec:	08 c0       	rjmp	.+16     	; 0x9fe <vfprintf+0x268>
 9ee:	24 ff       	sbrs	r18, 4
 9f0:	09 c0       	rjmp	.+18     	; 0xa04 <vfprintf+0x26e>
 9f2:	e6 e0       	ldi	r30, 0x06	; 6
 9f4:	be 2a       	or	r11, r30
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <vfprintf+0x26e>
 9f8:	28 e0       	ldi	r18, 0x08	; 8
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	05 c0       	rjmp	.+10     	; 0xa08 <vfprintf+0x272>
 9fe:	20 e1       	ldi	r18, 0x10	; 16
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <vfprintf+0x272>
 a04:	20 e1       	ldi	r18, 0x10	; 16
 a06:	32 e0       	ldi	r19, 0x02	; 2
 a08:	f8 01       	movw	r30, r16
 a0a:	b7 fe       	sbrs	r11, 7
 a0c:	07 c0       	rjmp	.+14     	; 0xa1c <vfprintf+0x286>
 a0e:	60 81       	ld	r22, Z
 a10:	71 81       	ldd	r23, Z+1	; 0x01
 a12:	82 81       	ldd	r24, Z+2	; 0x02
 a14:	93 81       	ldd	r25, Z+3	; 0x03
 a16:	0c 5f       	subi	r16, 0xFC	; 252
 a18:	1f 4f       	sbci	r17, 0xFF	; 255
 a1a:	06 c0       	rjmp	.+12     	; 0xa28 <vfprintf+0x292>
 a1c:	60 81       	ld	r22, Z
 a1e:	71 81       	ldd	r23, Z+1	; 0x01
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 5f       	subi	r16, 0xFE	; 254
 a26:	1f 4f       	sbci	r17, 0xFF	; 255
 a28:	a4 01       	movw	r20, r8
 a2a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__ultoa_invert>
 a2e:	a8 2e       	mov	r10, r24
 a30:	a8 18       	sub	r10, r8
 a32:	ff e7       	ldi	r31, 0x7F	; 127
 a34:	bf 22       	and	r11, r31
 a36:	b6 fe       	sbrs	r11, 6
 a38:	0b c0       	rjmp	.+22     	; 0xa50 <vfprintf+0x2ba>
 a3a:	2b 2d       	mov	r18, r11
 a3c:	2e 7f       	andi	r18, 0xFE	; 254
 a3e:	a5 14       	cp	r10, r5
 a40:	50 f4       	brcc	.+20     	; 0xa56 <vfprintf+0x2c0>
 a42:	b4 fe       	sbrs	r11, 4
 a44:	0a c0       	rjmp	.+20     	; 0xa5a <vfprintf+0x2c4>
 a46:	b2 fc       	sbrc	r11, 2
 a48:	08 c0       	rjmp	.+16     	; 0xa5a <vfprintf+0x2c4>
 a4a:	2b 2d       	mov	r18, r11
 a4c:	2e 7e       	andi	r18, 0xEE	; 238
 a4e:	05 c0       	rjmp	.+10     	; 0xa5a <vfprintf+0x2c4>
 a50:	7a 2c       	mov	r7, r10
 a52:	2b 2d       	mov	r18, r11
 a54:	03 c0       	rjmp	.+6      	; 0xa5c <vfprintf+0x2c6>
 a56:	7a 2c       	mov	r7, r10
 a58:	01 c0       	rjmp	.+2      	; 0xa5c <vfprintf+0x2c6>
 a5a:	75 2c       	mov	r7, r5
 a5c:	24 ff       	sbrs	r18, 4
 a5e:	0d c0       	rjmp	.+26     	; 0xa7a <vfprintf+0x2e4>
 a60:	fe 01       	movw	r30, r28
 a62:	ea 0d       	add	r30, r10
 a64:	f1 1d       	adc	r31, r1
 a66:	80 81       	ld	r24, Z
 a68:	80 33       	cpi	r24, 0x30	; 48
 a6a:	11 f4       	brne	.+4      	; 0xa70 <vfprintf+0x2da>
 a6c:	29 7e       	andi	r18, 0xE9	; 233
 a6e:	09 c0       	rjmp	.+18     	; 0xa82 <vfprintf+0x2ec>
 a70:	22 ff       	sbrs	r18, 2
 a72:	06 c0       	rjmp	.+12     	; 0xa80 <vfprintf+0x2ea>
 a74:	73 94       	inc	r7
 a76:	73 94       	inc	r7
 a78:	04 c0       	rjmp	.+8      	; 0xa82 <vfprintf+0x2ec>
 a7a:	82 2f       	mov	r24, r18
 a7c:	86 78       	andi	r24, 0x86	; 134
 a7e:	09 f0       	breq	.+2      	; 0xa82 <vfprintf+0x2ec>
 a80:	73 94       	inc	r7
 a82:	23 fd       	sbrc	r18, 3
 a84:	14 c0       	rjmp	.+40     	; 0xaae <vfprintf+0x318>
 a86:	20 ff       	sbrs	r18, 0
 a88:	0f c0       	rjmp	.+30     	; 0xaa8 <vfprintf+0x312>
 a8a:	5a 2c       	mov	r5, r10
 a8c:	73 14       	cp	r7, r3
 a8e:	60 f4       	brcc	.+24     	; 0xaa8 <vfprintf+0x312>
 a90:	53 0c       	add	r5, r3
 a92:	57 18       	sub	r5, r7
 a94:	73 2c       	mov	r7, r3
 a96:	08 c0       	rjmp	.+16     	; 0xaa8 <vfprintf+0x312>
 a98:	b7 01       	movw	r22, r14
 a9a:	80 e2       	ldi	r24, 0x20	; 32
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	2c 87       	std	Y+12, r18	; 0x0c
 aa0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 aa4:	73 94       	inc	r7
 aa6:	2c 85       	ldd	r18, Y+12	; 0x0c
 aa8:	73 14       	cp	r7, r3
 aaa:	b0 f3       	brcs	.-20     	; 0xa98 <vfprintf+0x302>
 aac:	04 c0       	rjmp	.+8      	; 0xab6 <vfprintf+0x320>
 aae:	73 14       	cp	r7, r3
 ab0:	10 f4       	brcc	.+4      	; 0xab6 <vfprintf+0x320>
 ab2:	37 18       	sub	r3, r7
 ab4:	01 c0       	rjmp	.+2      	; 0xab8 <vfprintf+0x322>
 ab6:	31 2c       	mov	r3, r1
 ab8:	24 ff       	sbrs	r18, 4
 aba:	12 c0       	rjmp	.+36     	; 0xae0 <vfprintf+0x34a>
 abc:	b7 01       	movw	r22, r14
 abe:	80 e3       	ldi	r24, 0x30	; 48
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	2c 87       	std	Y+12, r18	; 0x0c
 ac4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 ac8:	2c 85       	ldd	r18, Y+12	; 0x0c
 aca:	22 ff       	sbrs	r18, 2
 acc:	1e c0       	rjmp	.+60     	; 0xb0a <vfprintf+0x374>
 ace:	21 ff       	sbrs	r18, 1
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <vfprintf+0x342>
 ad2:	88 e5       	ldi	r24, 0x58	; 88
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <vfprintf+0x346>
 ad8:	88 e7       	ldi	r24, 0x78	; 120
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	b7 01       	movw	r22, r14
 ade:	0c c0       	rjmp	.+24     	; 0xaf8 <vfprintf+0x362>
 ae0:	82 2f       	mov	r24, r18
 ae2:	86 78       	andi	r24, 0x86	; 134
 ae4:	91 f0       	breq	.+36     	; 0xb0a <vfprintf+0x374>
 ae6:	21 fd       	sbrc	r18, 1
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <vfprintf+0x358>
 aea:	80 e2       	ldi	r24, 0x20	; 32
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <vfprintf+0x35a>
 aee:	8b e2       	ldi	r24, 0x2B	; 43
 af0:	27 fd       	sbrc	r18, 7
 af2:	8d e2       	ldi	r24, 0x2D	; 45
 af4:	b7 01       	movw	r22, r14
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 afc:	06 c0       	rjmp	.+12     	; 0xb0a <vfprintf+0x374>
 afe:	b7 01       	movw	r22, r14
 b00:	80 e3       	ldi	r24, 0x30	; 48
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 b08:	5a 94       	dec	r5
 b0a:	a5 14       	cp	r10, r5
 b0c:	c0 f3       	brcs	.-16     	; 0xafe <vfprintf+0x368>
 b0e:	aa 94       	dec	r10
 b10:	f4 01       	movw	r30, r8
 b12:	ea 0d       	add	r30, r10
 b14:	f1 1d       	adc	r31, r1
 b16:	b7 01       	movw	r22, r14
 b18:	80 81       	ld	r24, Z
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 b20:	a1 10       	cpse	r10, r1
 b22:	f5 cf       	rjmp	.-22     	; 0xb0e <vfprintf+0x378>
 b24:	06 c0       	rjmp	.+12     	; 0xb32 <vfprintf+0x39c>
 b26:	b7 01       	movw	r22, r14
 b28:	80 e2       	ldi	r24, 0x20	; 32
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 b30:	3a 94       	dec	r3
 b32:	31 10       	cpse	r3, r1
 b34:	f8 cf       	rjmp	.-16     	; 0xb26 <vfprintf+0x390>
 b36:	43 ce       	rjmp	.-890    	; 0x7be <vfprintf+0x28>
 b38:	f7 01       	movw	r30, r14
 b3a:	26 81       	ldd	r18, Z+6	; 0x06
 b3c:	37 81       	ldd	r19, Z+7	; 0x07
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <vfprintf+0x3ae>
 b40:	2f ef       	ldi	r18, 0xFF	; 255
 b42:	3f ef       	ldi	r19, 0xFF	; 255
 b44:	c9 01       	movw	r24, r18
 b46:	2c 96       	adiw	r28, 0x0c	; 12
 b48:	e2 e1       	ldi	r30, 0x12	; 18
 b4a:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__epilogue_restores__>

00000b4e <calloc>:
 b4e:	0f 93       	push	r16
 b50:	1f 93       	push	r17
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
 b56:	68 9f       	mul	r22, r24
 b58:	80 01       	movw	r16, r0
 b5a:	69 9f       	mul	r22, r25
 b5c:	10 0d       	add	r17, r0
 b5e:	78 9f       	mul	r23, r24
 b60:	10 0d       	add	r17, r0
 b62:	11 24       	eor	r1, r1
 b64:	c8 01       	movw	r24, r16
 b66:	0e 94 34 02 	call	0x468	; 0x468 <malloc>
 b6a:	c8 2f       	mov	r28, r24
 b6c:	d9 2f       	mov	r29, r25
 b6e:	20 97       	sbiw	r28, 0x00	; 0
 b70:	31 f0       	breq	.+12     	; 0xb7e <calloc+0x30>
 b72:	a8 01       	movw	r20, r16
 b74:	60 e0       	ldi	r22, 0x00	; 0
 b76:	70 e0       	ldi	r23, 0x00	; 0
 b78:	8c 2f       	mov	r24, r28
 b7a:	0e 94 d0 05 	call	0xba0	; 0xba0 <memset>
 b7e:	ce 01       	movw	r24, r28
 b80:	df 91       	pop	r29
 b82:	cf 91       	pop	r28
 b84:	1f 91       	pop	r17
 b86:	0f 91       	pop	r16
 b88:	08 95       	ret

00000b8a <strnlen_P>:
 b8a:	fc 01       	movw	r30, r24
 b8c:	05 90       	lpm	r0, Z+
 b8e:	61 50       	subi	r22, 0x01	; 1
 b90:	70 40       	sbci	r23, 0x00	; 0
 b92:	01 10       	cpse	r0, r1
 b94:	d8 f7       	brcc	.-10     	; 0xb8c <strnlen_P+0x2>
 b96:	80 95       	com	r24
 b98:	90 95       	com	r25
 b9a:	8e 0f       	add	r24, r30
 b9c:	9f 1f       	adc	r25, r31
 b9e:	08 95       	ret

00000ba0 <memset>:
 ba0:	dc 01       	movw	r26, r24
 ba2:	01 c0       	rjmp	.+2      	; 0xba6 <memset+0x6>
 ba4:	6d 93       	st	X+, r22
 ba6:	41 50       	subi	r20, 0x01	; 1
 ba8:	50 40       	sbci	r21, 0x00	; 0
 baa:	e0 f7       	brcc	.-8      	; 0xba4 <memset+0x4>
 bac:	08 95       	ret

00000bae <strnlen>:
 bae:	fc 01       	movw	r30, r24
 bb0:	61 50       	subi	r22, 0x01	; 1
 bb2:	70 40       	sbci	r23, 0x00	; 0
 bb4:	01 90       	ld	r0, Z+
 bb6:	01 10       	cpse	r0, r1
 bb8:	d8 f7       	brcc	.-10     	; 0xbb0 <strnlen+0x2>
 bba:	80 95       	com	r24
 bbc:	90 95       	com	r25
 bbe:	8e 0f       	add	r24, r30
 bc0:	9f 1f       	adc	r25, r31
 bc2:	08 95       	ret

00000bc4 <fputc>:
 bc4:	0f 93       	push	r16
 bc6:	1f 93       	push	r17
 bc8:	cf 93       	push	r28
 bca:	df 93       	push	r29
 bcc:	8c 01       	movw	r16, r24
 bce:	eb 01       	movw	r28, r22
 bd0:	8b 81       	ldd	r24, Y+3	; 0x03
 bd2:	81 fd       	sbrc	r24, 1
 bd4:	03 c0       	rjmp	.+6      	; 0xbdc <fputc+0x18>
 bd6:	0f ef       	ldi	r16, 0xFF	; 255
 bd8:	1f ef       	ldi	r17, 0xFF	; 255
 bda:	1a c0       	rjmp	.+52     	; 0xc10 <fputc+0x4c>
 bdc:	82 ff       	sbrs	r24, 2
 bde:	0d c0       	rjmp	.+26     	; 0xbfa <fputc+0x36>
 be0:	2e 81       	ldd	r18, Y+6	; 0x06
 be2:	3f 81       	ldd	r19, Y+7	; 0x07
 be4:	8c 81       	ldd	r24, Y+4	; 0x04
 be6:	9d 81       	ldd	r25, Y+5	; 0x05
 be8:	28 17       	cp	r18, r24
 bea:	39 07       	cpc	r19, r25
 bec:	64 f4       	brge	.+24     	; 0xc06 <fputc+0x42>
 bee:	e8 81       	ld	r30, Y
 bf0:	f9 81       	ldd	r31, Y+1	; 0x01
 bf2:	01 93       	st	Z+, r16
 bf4:	f9 83       	std	Y+1, r31	; 0x01
 bf6:	e8 83       	st	Y, r30
 bf8:	06 c0       	rjmp	.+12     	; 0xc06 <fputc+0x42>
 bfa:	e8 85       	ldd	r30, Y+8	; 0x08
 bfc:	f9 85       	ldd	r31, Y+9	; 0x09
 bfe:	80 2f       	mov	r24, r16
 c00:	09 95       	icall
 c02:	89 2b       	or	r24, r25
 c04:	41 f7       	brne	.-48     	; 0xbd6 <fputc+0x12>
 c06:	8e 81       	ldd	r24, Y+6	; 0x06
 c08:	9f 81       	ldd	r25, Y+7	; 0x07
 c0a:	01 96       	adiw	r24, 0x01	; 1
 c0c:	9f 83       	std	Y+7, r25	; 0x07
 c0e:	8e 83       	std	Y+6, r24	; 0x06
 c10:	c8 01       	movw	r24, r16
 c12:	df 91       	pop	r29
 c14:	cf 91       	pop	r28
 c16:	1f 91       	pop	r17
 c18:	0f 91       	pop	r16
 c1a:	08 95       	ret

00000c1c <__ultoa_invert>:
 c1c:	fa 01       	movw	r30, r20
 c1e:	aa 27       	eor	r26, r26
 c20:	28 30       	cpi	r18, 0x08	; 8
 c22:	51 f1       	breq	.+84     	; 0xc78 <__ultoa_invert+0x5c>
 c24:	20 31       	cpi	r18, 0x10	; 16
 c26:	81 f1       	breq	.+96     	; 0xc88 <__ultoa_invert+0x6c>
 c28:	e8 94       	clt
 c2a:	6f 93       	push	r22
 c2c:	6e 7f       	andi	r22, 0xFE	; 254
 c2e:	6e 5f       	subi	r22, 0xFE	; 254
 c30:	7f 4f       	sbci	r23, 0xFF	; 255
 c32:	8f 4f       	sbci	r24, 0xFF	; 255
 c34:	9f 4f       	sbci	r25, 0xFF	; 255
 c36:	af 4f       	sbci	r26, 0xFF	; 255
 c38:	b1 e0       	ldi	r27, 0x01	; 1
 c3a:	3e d0       	rcall	.+124    	; 0xcb8 <__ultoa_invert+0x9c>
 c3c:	b4 e0       	ldi	r27, 0x04	; 4
 c3e:	3c d0       	rcall	.+120    	; 0xcb8 <__ultoa_invert+0x9c>
 c40:	67 0f       	add	r22, r23
 c42:	78 1f       	adc	r23, r24
 c44:	89 1f       	adc	r24, r25
 c46:	9a 1f       	adc	r25, r26
 c48:	a1 1d       	adc	r26, r1
 c4a:	68 0f       	add	r22, r24
 c4c:	79 1f       	adc	r23, r25
 c4e:	8a 1f       	adc	r24, r26
 c50:	91 1d       	adc	r25, r1
 c52:	a1 1d       	adc	r26, r1
 c54:	6a 0f       	add	r22, r26
 c56:	71 1d       	adc	r23, r1
 c58:	81 1d       	adc	r24, r1
 c5a:	91 1d       	adc	r25, r1
 c5c:	a1 1d       	adc	r26, r1
 c5e:	20 d0       	rcall	.+64     	; 0xca0 <__ultoa_invert+0x84>
 c60:	09 f4       	brne	.+2      	; 0xc64 <__ultoa_invert+0x48>
 c62:	68 94       	set
 c64:	3f 91       	pop	r19
 c66:	2a e0       	ldi	r18, 0x0A	; 10
 c68:	26 9f       	mul	r18, r22
 c6a:	11 24       	eor	r1, r1
 c6c:	30 19       	sub	r19, r0
 c6e:	30 5d       	subi	r19, 0xD0	; 208
 c70:	31 93       	st	Z+, r19
 c72:	de f6       	brtc	.-74     	; 0xc2a <__ultoa_invert+0xe>
 c74:	cf 01       	movw	r24, r30
 c76:	08 95       	ret
 c78:	46 2f       	mov	r20, r22
 c7a:	47 70       	andi	r20, 0x07	; 7
 c7c:	40 5d       	subi	r20, 0xD0	; 208
 c7e:	41 93       	st	Z+, r20
 c80:	b3 e0       	ldi	r27, 0x03	; 3
 c82:	0f d0       	rcall	.+30     	; 0xca2 <__ultoa_invert+0x86>
 c84:	c9 f7       	brne	.-14     	; 0xc78 <__ultoa_invert+0x5c>
 c86:	f6 cf       	rjmp	.-20     	; 0xc74 <__ultoa_invert+0x58>
 c88:	46 2f       	mov	r20, r22
 c8a:	4f 70       	andi	r20, 0x0F	; 15
 c8c:	40 5d       	subi	r20, 0xD0	; 208
 c8e:	4a 33       	cpi	r20, 0x3A	; 58
 c90:	18 f0       	brcs	.+6      	; 0xc98 <__ultoa_invert+0x7c>
 c92:	49 5d       	subi	r20, 0xD9	; 217
 c94:	31 fd       	sbrc	r19, 1
 c96:	40 52       	subi	r20, 0x20	; 32
 c98:	41 93       	st	Z+, r20
 c9a:	02 d0       	rcall	.+4      	; 0xca0 <__ultoa_invert+0x84>
 c9c:	a9 f7       	brne	.-22     	; 0xc88 <__ultoa_invert+0x6c>
 c9e:	ea cf       	rjmp	.-44     	; 0xc74 <__ultoa_invert+0x58>
 ca0:	b4 e0       	ldi	r27, 0x04	; 4
 ca2:	a6 95       	lsr	r26
 ca4:	97 95       	ror	r25
 ca6:	87 95       	ror	r24
 ca8:	77 95       	ror	r23
 caa:	67 95       	ror	r22
 cac:	ba 95       	dec	r27
 cae:	c9 f7       	brne	.-14     	; 0xca2 <__ultoa_invert+0x86>
 cb0:	00 97       	sbiw	r24, 0x00	; 0
 cb2:	61 05       	cpc	r22, r1
 cb4:	71 05       	cpc	r23, r1
 cb6:	08 95       	ret
 cb8:	9b 01       	movw	r18, r22
 cba:	ac 01       	movw	r20, r24
 cbc:	0a 2e       	mov	r0, r26
 cbe:	06 94       	lsr	r0
 cc0:	57 95       	ror	r21
 cc2:	47 95       	ror	r20
 cc4:	37 95       	ror	r19
 cc6:	27 95       	ror	r18
 cc8:	ba 95       	dec	r27
 cca:	c9 f7       	brne	.-14     	; 0xcbe <__ultoa_invert+0xa2>
 ccc:	62 0f       	add	r22, r18
 cce:	73 1f       	adc	r23, r19
 cd0:	84 1f       	adc	r24, r20
 cd2:	95 1f       	adc	r25, r21
 cd4:	a0 1d       	adc	r26, r0
 cd6:	08 95       	ret

00000cd8 <__prologue_saves__>:
 cd8:	2f 92       	push	r2
 cda:	3f 92       	push	r3
 cdc:	4f 92       	push	r4
 cde:	5f 92       	push	r5
 ce0:	6f 92       	push	r6
 ce2:	7f 92       	push	r7
 ce4:	8f 92       	push	r8
 ce6:	9f 92       	push	r9
 ce8:	af 92       	push	r10
 cea:	bf 92       	push	r11
 cec:	cf 92       	push	r12
 cee:	df 92       	push	r13
 cf0:	ef 92       	push	r14
 cf2:	ff 92       	push	r15
 cf4:	0f 93       	push	r16
 cf6:	1f 93       	push	r17
 cf8:	cf 93       	push	r28
 cfa:	df 93       	push	r29
 cfc:	cd b7       	in	r28, 0x3d	; 61
 cfe:	de b7       	in	r29, 0x3e	; 62
 d00:	ca 1b       	sub	r28, r26
 d02:	db 0b       	sbc	r29, r27
 d04:	0f b6       	in	r0, 0x3f	; 63
 d06:	f8 94       	cli
 d08:	de bf       	out	0x3e, r29	; 62
 d0a:	0f be       	out	0x3f, r0	; 63
 d0c:	cd bf       	out	0x3d, r28	; 61
 d0e:	09 94       	ijmp

00000d10 <__epilogue_restores__>:
 d10:	2a 88       	ldd	r2, Y+18	; 0x12
 d12:	39 88       	ldd	r3, Y+17	; 0x11
 d14:	48 88       	ldd	r4, Y+16	; 0x10
 d16:	5f 84       	ldd	r5, Y+15	; 0x0f
 d18:	6e 84       	ldd	r6, Y+14	; 0x0e
 d1a:	7d 84       	ldd	r7, Y+13	; 0x0d
 d1c:	8c 84       	ldd	r8, Y+12	; 0x0c
 d1e:	9b 84       	ldd	r9, Y+11	; 0x0b
 d20:	aa 84       	ldd	r10, Y+10	; 0x0a
 d22:	b9 84       	ldd	r11, Y+9	; 0x09
 d24:	c8 84       	ldd	r12, Y+8	; 0x08
 d26:	df 80       	ldd	r13, Y+7	; 0x07
 d28:	ee 80       	ldd	r14, Y+6	; 0x06
 d2a:	fd 80       	ldd	r15, Y+5	; 0x05
 d2c:	0c 81       	ldd	r16, Y+4	; 0x04
 d2e:	1b 81       	ldd	r17, Y+3	; 0x03
 d30:	aa 81       	ldd	r26, Y+2	; 0x02
 d32:	b9 81       	ldd	r27, Y+1	; 0x01
 d34:	ce 0f       	add	r28, r30
 d36:	d1 1d       	adc	r29, r1
 d38:	0f b6       	in	r0, 0x3f	; 63
 d3a:	f8 94       	cli
 d3c:	de bf       	out	0x3e, r29	; 62
 d3e:	0f be       	out	0x3f, r0	; 63
 d40:	cd bf       	out	0x3d, r28	; 61
 d42:	ed 01       	movw	r28, r26
 d44:	08 95       	ret

00000d46 <_exit>:
 d46:	f8 94       	cli

00000d48 <__stop_program>:
 d48:	ff cf       	rjmp	.-2      	; 0xd48 <__stop_program>
