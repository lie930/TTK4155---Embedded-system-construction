
can_node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  00000ee6  00000f7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001ba  008001ba  00001034  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c8  00000000  00000000  00001f40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018e0  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfc  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010fa  00000000  00000000  000045e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  000056e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000684  00000000  00000000  00005b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001257  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00007433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ee       	ldi	r30, 0xE6	; 230
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 3b       	cpi	r26, 0xBA	; 186
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa eb       	ldi	r26, 0xBA	; 186
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 3c       	cpi	r26, 0xC6	; 198
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 3a 01 	call	0x274	; 0x274 <main>
  c6:	0c 94 71 07 	jmp	0xee2	; 0xee2 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <CAN_init>:
#define TXB0CTRL_TXREQ 2
#define TXB1CTRL_TXREQ 4
#define TXB2CTRL_TXREQ 3

uint8_t CAN_init(void) {
	mcp2515_init();
  ce:	0e 94 90 02 	call	0x520	; 0x520 <mcp2515_init>
	
	//Enable loop back mode
	//mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
  d2:	8f e0       	ldi	r24, 0x0F	; 15
  d4:	60 ee       	ldi	r22, 0xE0	; 224
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_modify>
	//Enable listen only mode
	//mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LISTENONLY);
	
	//is CANINTE.MERRE enabled?
	//Enable interrupt when message is sent (TX0IE = 1) and recived(RX0IE = 1)
	mcp2515_bit_modify(MCP_CANINTE, 0x03, 0x03);
  dc:	8b e2       	ldi	r24, 0x2B	; 43
  de:	63 e0       	ldi	r22, 0x03	; 3
  e0:	43 e0       	ldi	r20, 0x03	; 3
  e2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_modify>
	
	//Set recive all IDs
	//mcp2515_bit_modify(MCP_CANCTRL,0b11100000, 0x00);

	return 0;
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret

000000ea <CAN_transmit_complete>:

uint8_t CAN_transmit_complete(void) {
	uint8_t status = mcp2515_read_status();
  ea:	0e 94 b3 02 	call	0x566	; 0x566 <mcp2515_read_status>
	
	if(!(status&(1<<TXB0CTRL_TXREQ))){
  ee:	82 ff       	sbrs	r24, 2
  f0:	06 c0       	rjmp	.+12     	; 0xfe <CAN_transmit_complete+0x14>
		return MCP_TXB0CTRL;
	}else if(!(status&(1<<TXB1CTRL_TXREQ))){
  f2:	84 ff       	sbrs	r24, 4
  f4:	06 c0       	rjmp	.+12     	; 0x102 <CAN_transmit_complete+0x18>
		return MCP_TXB1CTRL;
	}else if(!(status&(1<<TXB2CTRL_TXREQ))){
  f6:	83 fd       	sbrc	r24, 3
  f8:	06 c0       	rjmp	.+12     	; 0x106 <CAN_transmit_complete+0x1c>
		return MCP_TXB2CTRL;
  fa:	80 e5       	ldi	r24, 0x50	; 80
  fc:	08 95       	ret

uint8_t CAN_transmit_complete(void) {
	uint8_t status = mcp2515_read_status();
	
	if(!(status&(1<<TXB0CTRL_TXREQ))){
		return MCP_TXB0CTRL;
  fe:	80 e3       	ldi	r24, 0x30	; 48
 100:	08 95       	ret
	}else if(!(status&(1<<TXB1CTRL_TXREQ))){
		return MCP_TXB1CTRL;
 102:	80 e4       	ldi	r24, 0x40	; 64
 104:	08 95       	ret
	}else if(!(status&(1<<TXB2CTRL_TXREQ))){
		return MCP_TXB2CTRL;
	}else{
		return 0; //return 1 when all the buffers are full
 106:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 108:	08 95       	ret

0000010a <CAN_set_priority>:

void CAN_set_priority(uint8_t can_buffer, uint8_t priority){
 10a:	46 2f       	mov	r20, r22
	if (priority > 3){
 10c:	64 30       	cpi	r22, 0x04	; 4
 10e:	28 f0       	brcs	.+10     	; 0x11a <CAN_set_priority+0x10>
		priority = 3;
		mcp2515_bit_modify(can_buffer,0x03,priority);
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	43 e0       	ldi	r20, 0x03	; 3
 114:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_modify>
 118:	08 95       	ret
	}else if(priority < 0){
		priority = 0;
		mcp2515_bit_modify(can_buffer,0x03,priority);
	}else{
		mcp2515_bit_modify(can_buffer,0x03,priority);
 11a:	63 e0       	ldi	r22, 0x03	; 3
 11c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_modify>
 120:	08 95       	ret

00000122 <CAN_send_message>:
	}
}

uint8_t CAN_send_message(CAN_message_t* message,uint8_t priority) {
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	7c 01       	movw	r14, r24
	uint8_t can_buffer = 0;
	
	can_buffer = CAN_transmit_complete();
 12e:	0e 94 75 00 	call	0xea	; 0xea <CAN_transmit_complete>
 132:	c8 2f       	mov	r28, r24
	while(can_buffer==0){
 134:	88 23       	and	r24, r24
 136:	29 f4       	brne	.+10     	; 0x142 <CAN_send_message+0x20>
		can_buffer = CAN_transmit_complete();
 138:	0e 94 75 00 	call	0xea	; 0xea <CAN_transmit_complete>
 13c:	c8 2f       	mov	r28, r24

uint8_t CAN_send_message(CAN_message_t* message,uint8_t priority) {
	uint8_t can_buffer = 0;
	
	can_buffer = CAN_transmit_complete();
	while(can_buffer==0){
 13e:	88 23       	and	r24, r24
 140:	d9 f3       	breq	.-10     	; 0x138 <CAN_send_message+0x16>
		can_buffer = CAN_transmit_complete();
	}
	
	//CAN_set_priority(can_buffer, priority);
	
	mcp2515_write((can_buffer + 0x01),(uint8_t)(message->id>>3));
 142:	f7 01       	movw	r30, r14
 144:	60 81       	ld	r22, Z
 146:	71 81       	ldd	r23, Z+1	; 0x01
 148:	76 95       	lsr	r23
 14a:	67 95       	ror	r22
 14c:	76 95       	lsr	r23
 14e:	67 95       	ror	r22
 150:	76 95       	lsr	r23
 152:	67 95       	ror	r22
 154:	8c 2f       	mov	r24, r28
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	0e 94 45 02 	call	0x48a	; 0x48a <mcp2515_write>
	mcp2515_write((can_buffer + 0x02),(uint8_t)(message->id<<5));
 15c:	f7 01       	movw	r30, r14
 15e:	60 81       	ld	r22, Z
 160:	62 95       	swap	r22
 162:	66 0f       	add	r22, r22
 164:	60 7e       	andi	r22, 0xE0	; 224
 166:	8c 2f       	mov	r24, r28
 168:	8e 5f       	subi	r24, 0xFE	; 254
 16a:	0e 94 45 02 	call	0x48a	; 0x48a <mcp2515_write>
	
	//Set data bytes (max. 8 bytes)
	for(uint8_t i = 0; i < message->length; i++){
 16e:	f7 01       	movw	r30, r14
 170:	62 81       	ldd	r22, Z+2	; 0x02
 172:	66 23       	and	r22, r22
 174:	81 f0       	breq	.+32     	; 0x196 <CAN_send_message+0x74>
 176:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(can_buffer+0x06+i, message->data[i]);
 178:	1c 2f       	mov	r17, r28
 17a:	1a 5f       	subi	r17, 0xFA	; 250
 17c:	f7 01       	movw	r30, r14
 17e:	ed 0f       	add	r30, r29
 180:	f1 1d       	adc	r31, r1
 182:	81 2f       	mov	r24, r17
 184:	8d 0f       	add	r24, r29
 186:	63 81       	ldd	r22, Z+3	; 0x03
 188:	0e 94 45 02 	call	0x48a	; 0x48a <mcp2515_write>
	
	mcp2515_write((can_buffer + 0x01),(uint8_t)(message->id>>3));
	mcp2515_write((can_buffer + 0x02),(uint8_t)(message->id<<5));
	
	//Set data bytes (max. 8 bytes)
	for(uint8_t i = 0; i < message->length; i++){
 18c:	df 5f       	subi	r29, 0xFF	; 255
 18e:	f7 01       	movw	r30, r14
 190:	62 81       	ldd	r22, Z+2	; 0x02
 192:	d6 17       	cp	r29, r22
 194:	98 f3       	brcs	.-26     	; 0x17c <CAN_send_message+0x5a>
		mcp2515_write(can_buffer+0x06+i, message->data[i]);
	}
	
	//Set data length and use data frame (RTR = 0)	
	mcp2515_write(can_buffer+0x05,( message->length));
 196:	8c 2f       	mov	r24, r28
 198:	8b 5f       	subi	r24, 0xFB	; 251
 19a:	0e 94 45 02 	call	0x48a	; 0x48a <mcp2515_write>
	mcp2515_request_to_send(0);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <mcp2515_request_to_send>
	
	return 0;
}
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	08 95       	ret

000001b2 <CAN_error>:

int CAN_error(void) {
	//TODO
	return 1;
}
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	08 95       	ret

000001b8 <CAN_select_recivebuffer>:

uint8_t CAN_select_recivebuffer(){
	
	if(mcp2515_read(MCP_CANINTF)&MCP_RX0IF){
 1b8:	8c e2       	ldi	r24, 0x2C	; 44
 1ba:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
 1be:	80 fd       	sbrc	r24, 0
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <CAN_select_recivebuffer+0x18>
		return MCP_RXB0CTRL;
	}else if(mcp2515_read(MCP_CANINTF)&MCP_RX1IF){
 1c2:	8c e2       	ldi	r24, 0x2C	; 44
 1c4:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
 1c8:	81 ff       	sbrs	r24, 1
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <CAN_select_recivebuffer+0x1c>
		return MCP_RXB1CTRL;
 1cc:	80 e7       	ldi	r24, 0x70	; 112
 1ce:	08 95       	ret
}

uint8_t CAN_select_recivebuffer(){
	
	if(mcp2515_read(MCP_CANINTF)&MCP_RX0IF){
		return MCP_RXB0CTRL;
 1d0:	80 e6       	ldi	r24, 0x60	; 96
 1d2:	08 95       	ret
	}else if(mcp2515_read(MCP_CANINTF)&MCP_RX1IF){
		return MCP_RXB1CTRL;
	}else{
		return 0;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 1d6:	08 95       	ret

000001d8 <CAN_receive_data>:


CAN_message_t* CAN_receive_data(CAN_message_t* message) {
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	8c 01       	movw	r16, r24

	uint8_t can_buffer = 0;
	can_buffer = CAN_select_recivebuffer();
 1e4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CAN_select_recivebuffer>
 1e8:	f8 2e       	mov	r15, r24
	
	if(can_buffer==0){
 1ea:	88 23       	and	r24, r24
 1ec:	a9 f1       	breq	.+106    	; 0x258 <CAN_receive_data+0x80>
		return 0;
	}
	
	message->length = mcp2515_read(can_buffer+0x05);
 1ee:	8b 5f       	subi	r24, 0xFB	; 251
 1f0:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
 1f4:	f8 01       	movw	r30, r16
 1f6:	82 83       	std	Z+2, r24	; 0x02
	for (uint8_t i = 0; i < message->length; i++)
 1f8:	88 23       	and	r24, r24
 1fa:	81 f0       	breq	.+32     	; 0x21c <CAN_receive_data+0x44>
 1fc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		message->data[i] = mcp2515_read(can_buffer+0x06+i);
 1fe:	df 2d       	mov	r29, r15
 200:	da 5f       	subi	r29, 0xFA	; 250
 202:	8d 2f       	mov	r24, r29
 204:	8c 0f       	add	r24, r28
 206:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
 20a:	f8 01       	movw	r30, r16
 20c:	ec 0f       	add	r30, r28
 20e:	f1 1d       	adc	r31, r1
 210:	83 83       	std	Z+3, r24	; 0x03
	if(can_buffer==0){
		return 0;
	}
	
	message->length = mcp2515_read(can_buffer+0x05);
	for (uint8_t i = 0; i < message->length; i++)
 212:	cf 5f       	subi	r28, 0xFF	; 255
 214:	f8 01       	movw	r30, r16
 216:	82 81       	ldd	r24, Z+2	; 0x02
 218:	c8 17       	cp	r28, r24
 21a:	98 f3       	brcs	.-26     	; 0x202 <CAN_receive_data+0x2a>
	{
		message->data[i] = mcp2515_read(can_buffer+0x06+i);
	}
	
	message->id  = mcp2515_read(can_buffer+0x02)>>5; //read CAN HI
 21c:	8f 2d       	mov	r24, r15
 21e:	8e 5f       	subi	r24, 0xFE	; 254
 220:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
 224:	82 95       	swap	r24
 226:	86 95       	lsr	r24
 228:	87 70       	andi	r24, 0x07	; 7
 22a:	f8 01       	movw	r30, r16
 22c:	80 83       	st	Z, r24
 22e:	11 82       	std	Z+1, r1	; 0x01
	message->id  = mcp2515_read(can_buffer+0x01)<<3; //read CAN LO
 230:	8f 2d       	mov	r24, r15
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	f8 01       	movw	r30, r16
 248:	91 83       	std	Z+1, r25	; 0x01
 24a:	80 83       	st	Z, r24
	
	mcp2515_bit_modify(MCP_CANINTF, (1<<0)/*0x01*/,0x00);
 24c:	8c e2       	ldi	r24, 0x2C	; 44
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_modify>
	
	return message;
 256:	02 c0       	rjmp	.+4      	; 0x25c <CAN_receive_data+0x84>

	uint8_t can_buffer = 0;
	can_buffer = CAN_select_recivebuffer();
	
	if(can_buffer==0){
		return 0;
 258:	00 e0       	ldi	r16, 0x00	; 0
 25a:	10 e0       	ldi	r17, 0x00	; 0
	message->id  = mcp2515_read(can_buffer+0x01)<<3; //read CAN LO
	
	mcp2515_bit_modify(MCP_CANINTF, (1<<0)/*0x01*/,0x00);
	
	return message;
}
 25c:	80 2f       	mov	r24, r16
 25e:	91 2f       	mov	r25, r17
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	08 95       	ret

0000026c <CAN_int_vect>:

int CAN_int_vect(void) {
	//TODO
	return 0;
}
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	08 95       	ret

00000272 <ISR>:

ISR(INT0_vect){
	//set interupt vectore value
	return INT0_vect;
 272:	08 95       	ret

00000274 <main>:
#include <avr/interrupt.h>

#define MYUBRR F_OSC/16UL/BAUD-1

int main(void)
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	66 97       	sbiw	r28, 0x16	; 22
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
 288:	8a e1       	ldi	r24, 0x1A	; 26
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <UART_init>
	printf("Uart initiated\n\r");
 290:	00 d0       	rcall	.+0      	; 0x292 <main+0x1e>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	ad b7       	in	r26, 0x3d	; 61
 298:	be b7       	in	r27, 0x3e	; 62
 29a:	12 96       	adiw	r26, 0x02	; 2
 29c:	9c 93       	st	X, r25
 29e:	8e 93       	st	-X, r24
 2a0:	11 97       	sbiw	r26, 0x01	; 1
 2a2:	0e 94 93 04 	call	0x926	; 0x926 <printf>
	CAN_init();
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0e 94 67 00 	call	0xce	; 0xce <CAN_init>
	printf("Can initiated\n\r");
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <main+0x3c>
 2b0:	81 e1       	ldi	r24, 0x11	; 17
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	ed b7       	in	r30, 0x3d	; 61
 2b6:	fe b7       	in	r31, 0x3e	; 62
 2b8:	92 83       	std	Z+2, r25	; 0x02
 2ba:	81 83       	std	Z+1, r24	; 0x01
 2bc:	0e 94 93 04 	call	0x926	; 0x926 <printf>
	
	CAN_message_t message_send;
	CAN_message_t message_receive;
	message_receive.id = 0;
 2c0:	1d 86       	std	Y+13, r1	; 0x0d
 2c2:	1c 86       	std	Y+12, r1	; 0x0c
	message_receive.length = 0;
 2c4:	1e 86       	std	Y+14, r1	; 0x0e
	for(int i = 0; i < 8; i++) {
		message_receive.data[i]=0;
 2c6:	1f 86       	std	Y+15, r1	; 0x0f
 2c8:	18 8a       	std	Y+16, r1	; 0x10
 2ca:	19 8a       	std	Y+17, r1	; 0x11
 2cc:	1a 8a       	std	Y+18, r1	; 0x12
 2ce:	1b 8a       	std	Y+19, r1	; 0x13
 2d0:	1c 8a       	std	Y+20, r1	; 0x14
 2d2:	1d 8a       	std	Y+21, r1	; 0x15
 2d4:	1e 8a       	std	Y+22, r1	; 0x16
	}
	CAN_message_t* message_received = malloc(sizeof(CAN_message_t));
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	8b e0       	ldi	r24, 0x0B	; 11
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 1a 03 	call	0x634	; 0x634 <malloc>
	
	message_send.id = 24;
 2e2:	88 e1       	ldi	r24, 0x18	; 24
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	89 83       	std	Y+1, r24	; 0x01
	message_send.length = 7;
 2ea:	87 e0       	ldi	r24, 0x07	; 7
 2ec:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8_t i; i < message_send.length;i++){
 2ee:	80 e0       	ldi	r24, 0x00	; 0
	message_send.data[i] = (uint8_t) 1;
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	e4 e0       	ldi	r30, 0x04	; 4
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	ec 0f       	add	r30, r28
 2f8:	fd 1f       	adc	r31, r29
 2fa:	e8 0f       	add	r30, r24
 2fc:	f1 1d       	adc	r31, r1
 2fe:	90 83       	st	Z, r25
	}
	CAN_message_t* message_received = malloc(sizeof(CAN_message_t));
	
	message_send.id = 24;
	message_send.length = 7;
	for(uint8_t i; i < message_send.length;i++){
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	87 30       	cpi	r24, 0x07	; 7
 304:	b1 f7       	brne	.-20     	; 0x2f2 <main+0x7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	8f e0       	ldi	r24, 0x0F	; 15
 308:	98 e9       	ldi	r25, 0x98	; 152
 30a:	a2 e0       	ldi	r26, 0x02	; 2
 30c:	81 50       	subi	r24, 0x01	; 1
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	a0 40       	sbci	r26, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x98>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0xa2>
 316:	00 00       	nop
	
	
	_delay_ms(100);
	
	
	for(int i = 0; i < message_receive.length; i++) {
 318:	8e 85       	ldd	r24, Y+14	; 0x0e
 31a:	88 23       	and	r24, r24
 31c:	61 f1       	breq	.+88     	; 0x376 <main+0x102>
 31e:	0f 2e       	mov	r0, r31
 320:	ff e0       	ldi	r31, 0x0F	; 15
 322:	ef 2e       	mov	r14, r31
 324:	ff 24       	eor	r15, r15
 326:	f0 2d       	mov	r31, r0
 328:	ec 0e       	add	r14, r28
 32a:	fd 1e       	adc	r15, r29
 32c:	00 e0       	ldi	r16, 0x00	; 0
 32e:	10 e0       	ldi	r17, 0x00	; 0
		 printf("%i", message_receive.data[i]);
 330:	0f 2e       	mov	r0, r31
 332:	f1 e2       	ldi	r31, 0x21	; 33
 334:	cf 2e       	mov	r12, r31
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	df 2e       	mov	r13, r31
 33a:	f0 2d       	mov	r31, r0
 33c:	d7 01       	movw	r26, r14
 33e:	8d 91       	ld	r24, X+
 340:	7d 01       	movw	r14, r26
 342:	00 d0       	rcall	.+0      	; 0x344 <main+0xd0>
 344:	00 d0       	rcall	.+0      	; 0x346 <main+0xd2>
 346:	ed b7       	in	r30, 0x3d	; 61
 348:	fe b7       	in	r31, 0x3e	; 62
 34a:	31 96       	adiw	r30, 0x01	; 1
 34c:	ad b7       	in	r26, 0x3d	; 61
 34e:	be b7       	in	r27, 0x3e	; 62
 350:	12 96       	adiw	r26, 0x02	; 2
 352:	dc 92       	st	X, r13
 354:	ce 92       	st	-X, r12
 356:	11 97       	sbiw	r26, 0x01	; 1
 358:	82 83       	std	Z+2, r24	; 0x02
 35a:	13 82       	std	Z+3, r1	; 0x03
 35c:	0e 94 93 04 	call	0x926	; 0x926 <printf>
	
	
	_delay_ms(100);
	
	
	for(int i = 0; i < message_receive.length; i++) {
 360:	0f 5f       	subi	r16, 0xFF	; 255
 362:	1f 4f       	sbci	r17, 0xFF	; 255
 364:	8e 85       	ldd	r24, Y+14	; 0x0e
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	08 17       	cp	r16, r24
 372:	19 07       	cpc	r17, r25
 374:	1c f3       	brlt	.-58     	; 0x33c <main+0xc8>
		 printf("%i", message_receive.data[i]);
	}
	printf("\n\r");
 376:	00 d0       	rcall	.+0      	; 0x378 <main+0x104>
 378:	84 e2       	ldi	r24, 0x24	; 36
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	ed b7       	in	r30, 0x3d	; 61
 37e:	fe b7       	in	r31, 0x3e	; 62
 380:	92 83       	std	Z+2, r25	; 0x02
 382:	81 83       	std	Z+1, r24	; 0x01
 384:	0e 94 93 04 	call	0x926	; 0x926 <printf>
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
	
    while(1)
    {
		_delay_ms(1000);
		CAN_send_message(&message_send,0);
		printf("Message sent\n\r");
 38c:	07 e2       	ldi	r16, 0x27	; 39
 38e:	11 e0       	ldi	r17, 0x01	; 1
		_delay_ms(1000);
		CAN_receive_data(&message_receive);
		printf("Recived message: \n\r");
 390:	0f 2e       	mov	r0, r31
 392:	f6 e3       	ldi	r31, 0x36	; 54
 394:	ef 2e       	mov	r14, r31
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	ff 2e       	mov	r15, r31
 39a:	f0 2d       	mov	r31, r0
		printf("Message id: %i\n\r", message_receive.id);
 39c:	0f 2e       	mov	r0, r31
 39e:	fa e4       	ldi	r31, 0x4A	; 74
 3a0:	cf 2e       	mov	r12, r31
 3a2:	f1 e0       	ldi	r31, 0x01	; 1
 3a4:	df 2e       	mov	r13, r31
 3a6:	f0 2d       	mov	r31, r0
		printf("Message length: %i\n\r", message_receive.length);
 3a8:	0f 2e       	mov	r0, r31
 3aa:	fb e5       	ldi	r31, 0x5B	; 91
 3ac:	af 2e       	mov	r10, r31
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	bf 2e       	mov	r11, r31
 3b2:	f0 2d       	mov	r31, r0
		printf("Message data: ");
 3b4:	0f 2e       	mov	r0, r31
 3b6:	f0 e7       	ldi	r31, 0x70	; 112
 3b8:	8f 2e       	mov	r8, r31
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	9f 2e       	mov	r9, r31
 3be:	f0 2d       	mov	r31, r0
 3c0:	8f e9       	ldi	r24, 0x9F	; 159
 3c2:	90 ef       	ldi	r25, 0xF0	; 240
 3c4:	a9 e1       	ldi	r26, 0x19	; 25
 3c6:	81 50       	subi	r24, 0x01	; 1
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	a0 40       	sbci	r26, 0x00	; 0
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <main+0x152>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <main+0x15c>
 3d0:	00 00       	nop
	printf("\n\r");
	
    while(1)
    {
		_delay_ms(1000);
		CAN_send_message(&message_send,0);
 3d2:	ce 01       	movw	r24, r28
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	0e 94 91 00 	call	0x122	; 0x122 <CAN_send_message>
		printf("Message sent\n\r");
 3dc:	00 d0       	rcall	.+0      	; 0x3de <main+0x16a>
 3de:	ad b7       	in	r26, 0x3d	; 61
 3e0:	be b7       	in	r27, 0x3e	; 62
 3e2:	12 96       	adiw	r26, 0x02	; 2
 3e4:	1c 93       	st	X, r17
 3e6:	0e 93       	st	-X, r16
 3e8:	11 97       	sbiw	r26, 0x01	; 1
 3ea:	0e 94 93 04 	call	0x926	; 0x926 <printf>
 3ee:	8f e9       	ldi	r24, 0x9F	; 159
 3f0:	90 ef       	ldi	r25, 0xF0	; 240
 3f2:	a9 e1       	ldi	r26, 0x19	; 25
 3f4:	81 50       	subi	r24, 0x01	; 1
 3f6:	90 40       	sbci	r25, 0x00	; 0
 3f8:	a0 40       	sbci	r26, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x180>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x18a>
 3fe:	00 00       	nop
		_delay_ms(1000);
		CAN_receive_data(&message_receive);
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	ce 01       	movw	r24, r28
 406:	0c 96       	adiw	r24, 0x0c	; 12
 408:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <CAN_receive_data>
		printf("Recived message: \n\r");
 40c:	00 d0       	rcall	.+0      	; 0x40e <main+0x19a>
 40e:	ad b7       	in	r26, 0x3d	; 61
 410:	be b7       	in	r27, 0x3e	; 62
 412:	12 96       	adiw	r26, 0x02	; 2
 414:	fc 92       	st	X, r15
 416:	ee 92       	st	-X, r14
 418:	11 97       	sbiw	r26, 0x01	; 1
 41a:	0e 94 93 04 	call	0x926	; 0x926 <printf>
		printf("Message id: %i\n\r", message_receive.id);
 41e:	00 d0       	rcall	.+0      	; 0x420 <main+0x1ac>
 420:	ed b7       	in	r30, 0x3d	; 61
 422:	fe b7       	in	r31, 0x3e	; 62
 424:	d2 82       	std	Z+2, r13	; 0x02
 426:	c1 82       	std	Z+1, r12	; 0x01
 428:	8c 85       	ldd	r24, Y+12	; 0x0c
 42a:	9d 85       	ldd	r25, Y+13	; 0x0d
 42c:	94 83       	std	Z+4, r25	; 0x04
 42e:	83 83       	std	Z+3, r24	; 0x03
 430:	0e 94 93 04 	call	0x926	; 0x926 <printf>
		printf("Message length: %i\n\r", message_receive.length);
 434:	ed b7       	in	r30, 0x3d	; 61
 436:	fe b7       	in	r31, 0x3e	; 62
 438:	31 96       	adiw	r30, 0x01	; 1
 43a:	ad b7       	in	r26, 0x3d	; 61
 43c:	be b7       	in	r27, 0x3e	; 62
 43e:	12 96       	adiw	r26, 0x02	; 2
 440:	bc 92       	st	X, r11
 442:	ae 92       	st	-X, r10
 444:	11 97       	sbiw	r26, 0x01	; 1
 446:	8e 85       	ldd	r24, Y+14	; 0x0e
 448:	82 83       	std	Z+2, r24	; 0x02
 44a:	13 82       	std	Z+3, r1	; 0x03
 44c:	0e 94 93 04 	call	0x926	; 0x926 <printf>
		printf("Message data: ");
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	ed b7       	in	r30, 0x3d	; 61
 456:	fe b7       	in	r31, 0x3e	; 62
 458:	92 82       	std	Z+2, r9	; 0x02
 45a:	81 82       	std	Z+1, r8	; 0x01
 45c:	0e 94 93 04 	call	0x926	; 0x926 <printf>
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	ad cf       	rjmp	.-166    	; 0x3c0 <main+0x14c>

00000466 <mcp2515_read>:
	}
	
	return 0;
}

uint8_t mcp2515_read(uint8_t address) {
 466:	cf 93       	push	r28
 468:	c8 2f       	mov	r28, r24
	//Select CAN-controller
	SPI_select();
 46a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <SPI_select>
	
	SPI_write(MCP_READ);		//Send read command
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
	SPI_write(address);			//Send address
 474:	8c 2f       	mov	r24, r28
 476:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
	
	uint8_t result = SPI_read();	//Read result
 47a:	0e 94 cf 02 	call	0x59e	; 0x59e <SPI_read>
 47e:	c8 2f       	mov	r28, r24
	
	//De-select CAN-controller
	SPI_deselect();
 480:	0e 94 d6 02 	call	0x5ac	; 0x5ac <SPI_deselect>
	
	return result;
}
 484:	8c 2f       	mov	r24, r28
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data) {
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	d8 2f       	mov	r29, r24
 490:	c6 2f       	mov	r28, r22
	//Select CAN-controller
	SPI_select();
 492:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <SPI_select>
		
	SPI_write(MCP_WRITE);	//Send write command
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
	SPI_write(address);		//Send address
 49c:	8d 2f       	mov	r24, r29
 49e:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
	SPI_write(data);			//Send data
 4a2:	8c 2f       	mov	r24, r28
 4a4:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
		
	//De-select CAN-controller
	SPI_deselect();
 4a8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <SPI_deselect>
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command) {
 4b2:	cf 93       	push	r28
 4b4:	c8 2f       	mov	r28, r24
	//Select CAN-controller
	SPI_select();
 4b6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <SPI_select>
	
	//Check the last three bits for the commands
	if(command < 8) {
 4ba:	c8 30       	cpi	r28, 0x08	; 8
 4bc:	58 f4       	brcc	.+22     	; 0x4d4 <mcp2515_request_to_send+0x22>
		SPI_write(MCP_RTS | (1<<command));
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	c9 01       	movw	r24, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <mcp2515_request_to_send+0x18>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	ca 95       	dec	r28
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <mcp2515_request_to_send+0x14>
 4ce:	80 68       	ori	r24, 0x80	; 128
 4d0:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
	} 
	
	//Deselect CAN-controller
	SPI_deselect();	
 4d4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <SPI_deselect>
}
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	18 2f       	mov	r17, r24
 4e4:	d6 2f       	mov	r29, r22
 4e6:	c4 2f       	mov	r28, r20
	//Select CAN-controller
	SPI_select();
 4e8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <SPI_select>
		
	SPI_write(MCP_BITMOD);		//Send bit modify command
 4ec:	85 e0       	ldi	r24, 0x05	; 5
 4ee:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
	SPI_write(address);			//Send address
 4f2:	81 2f       	mov	r24, r17
 4f4:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
	SPI_write(mask);				//Send mask byte
 4f8:	8d 2f       	mov	r24, r29
 4fa:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
	SPI_write(data);				//Send data
 4fe:	8c 2f       	mov	r24, r28
 500:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
		
	//Deselect CAN-controller
	SPI_deselect();
 504:	0e 94 d6 02 	call	0x5ac	; 0x5ac <SPI_deselect>
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	08 95       	ret

00000510 <mcp2515_reset>:

void mcp2515_reset(void) {
	SPI_select();			//Select CAN-controller
 510:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <SPI_select>
	SPI_write(MCP_RESET);	//Send reset command
 514:	80 ec       	ldi	r24, 0xC0	; 192
 516:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
	SPI_deselect();			//De-select CAN-controller
 51a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <SPI_deselect>
}
 51e:	08 95       	ret

00000520 <mcp2515_init>:
#include <avr/io.h>
#include "uart.h"
#include "spi.h"
#include "mcp2515.h"

uint8_t mcp2515_init(void) {
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	0f 92       	push	r0
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//Initialize SPI driver
	SPI_init();
 52a:	0e 94 c1 02 	call	0x582	; 0x582 <SPI_init>
	
	//Reset the CAN controller
	mcp2515_reset();
 52e:	0e 94 88 02 	call	0x510	; 0x510 <mcp2515_reset>
	
	//Self-test
	value = mcp2515_read(MCP_CANSTAT);
 532:	8e e0       	ldi	r24, 0x0E	; 14
 534:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
 538:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	80 7e       	andi	r24, 0xE0	; 224
 53e:	80 38       	cpi	r24, 0x80	; 128
 540:	69 f0       	breq	.+26     	; 0x55c <mcp2515_init+0x3c>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
 542:	00 d0       	rcall	.+0      	; 0x544 <mcp2515_init+0x24>
 544:	8f e7       	ldi	r24, 0x7F	; 127
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	ed b7       	in	r30, 0x3d	; 61
 54a:	fe b7       	in	r31, 0x3e	; 62
 54c:	92 83       	std	Z+2, r25	; 0x02
 54e:	81 83       	std	Z+1, r24	; 0x01
 550:	0e 94 93 04 	call	0x926	; 0x926 <printf>
		return 1;
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	01 c0       	rjmp	.+2      	; 0x55e <mcp2515_init+0x3e>
	}
	
	return 0;
 55c:	80 e0       	ldi	r24, 0x00	; 0
}
 55e:	0f 90       	pop	r0
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <mcp2515_read_status>:
	SPI_deselect();			//De-select CAN-controller
}



uint8_t mcp2515_read_status(void) {
 566:	cf 93       	push	r28
	//Select CAN-controller
	SPI_select();
 568:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <SPI_select>
	
	SPI_write(MCP_READ_STATUS);	//Send read status command
 56c:	80 ea       	ldi	r24, 0xA0	; 160
 56e:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_write>
	uint8_t result = SPI_read();		//Read result
 572:	0e 94 cf 02 	call	0x59e	; 0x59e <SPI_read>
 576:	c8 2f       	mov	r28, r24
	
	//Deselect CAN-controller
	SPI_deselect();
 578:	0e 94 d6 02 	call	0x5ac	; 0x5ac <SPI_deselect>
	
	return result;
 57c:	8c 2f       	mov	r24, r28
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <SPI_init>:
#define SPI_MISO PB3
#define SPI_SCK PB1

int SPI_init(void) {
	//Set MOSI, SCK and SS as output pins
	SPI_DDR |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_SS);
 582:	87 b3       	in	r24, 0x17	; 23
 584:	87 60       	ori	r24, 0x07	; 7
 586:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin (maybe not needed)
	SPI_DDR &= ~(1<<SPI_MISO);
 588:	bb 98       	cbi	0x17, 3	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR	 |= ((1<<SPE) | (1<<MSTR) | ((1<<SPR1)| (1<<SPR0)));
 58a:	8d b1       	in	r24, 0x0d	; 13
 58c:	83 65       	ori	r24, 0x53	; 83
 58e:	8d b9       	out	0x0d, r24	; 13
	
	return 0;
}
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	08 95       	ret

00000596 <SPI_write>:

void SPI_write(uint8_t data) {
	
	//Start the transmission
	SPDR = data;
 596:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for data to be transmitted (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
 598:	77 9b       	sbis	0x0e, 7	; 14
 59a:	fe cf       	rjmp	.-4      	; 0x598 <SPI_write+0x2>
	
}
 59c:	08 95       	ret

0000059e <SPI_read>:

uint8_t SPI_read(void) {
	//Send dummy data to read from slave
	SPDR=0x00;
 59e:	1f b8       	out	0x0f, r1	; 15
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
 5a0:	77 9b       	sbis	0x0e, 7	; 14
 5a2:	fe cf       	rjmp	.-4      	; 0x5a0 <SPI_read+0x2>
	
	return SPDR;
 5a4:	8f b1       	in	r24, 0x0f	; 15
}
 5a6:	08 95       	ret

000005a8 <SPI_select>:

void SPI_select(void) {
	//Set !SS to 0 to select the slave
	SPI_PORT &= ~(1<<SPI_SS);
 5a8:	c0 98       	cbi	0x18, 0	; 24
}
 5aa:	08 95       	ret

000005ac <SPI_deselect>:

void SPI_deselect(void) {
	//Set !SS to 1 to de-select the slave
	SPI_PORT |= (1<<SPI_SS);
 5ac:	c0 9a       	sbi	0x18, 0	; 24
}
 5ae:	08 95       	ret

000005b0 <UART_putchar>:
	return 0;
}

int UART_putchar(char c, FILE *f) {
	//Wait for empty transmit buffer
	while (!(UCSR1A & (1<<UDRE1)));
 5b0:	eb e9       	ldi	r30, 0x9B	; 155
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	90 81       	ld	r25, Z
 5b6:	95 ff       	sbrs	r25, 5
 5b8:	fd cf       	rjmp	.-6      	; 0x5b4 <UART_putchar+0x4>
	
	//Put data into buffer
	UDR1 = c;
 5ba:	80 93 9c 00 	sts	0x009C, r24

	return 0;
}
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	08 95       	ret

000005c4 <UART_recchar>:

unsigned char UART_recchar(void) {
	//Wait for data to be received
	while (!(UCSR1A & (1<<RXC1)));
 5c4:	eb e9       	ldi	r30, 0x9B	; 155
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	88 23       	and	r24, r24
 5cc:	ec f7       	brge	.-6      	; 0x5c8 <UART_recchar+0x4>
	
	//Return data
	return UDR1;	
 5ce:	80 91 9c 00 	lds	r24, 0x009C
}
 5d2:	08 95       	ret

000005d4 <UART_init>:
FILE *uart;


int UART_init(unsigned int baudrate) {
	//Set UART0 baud rate
	UBRR1L = (unsigned char)(baudrate);
 5d4:	80 93 99 00 	sts	0x0099, r24
	UBRR1H = (unsigned char)(baudrate >> 8);
 5d8:	90 93 98 00 	sts	0x0098, r25
	
	//Enable TX0 and RX0
	UCSR1B |= (1<<RXEN1) | (1<<TXEN1);
 5dc:	ea e9       	ldi	r30, 0x9A	; 154
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	88 61       	ori	r24, 0x18	; 24
 5e4:	80 83       	st	Z, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR1C |=  (1<<USBS1)| (3<<UCSZ10);
 5e6:	ed e9       	ldi	r30, 0x9D	; 157
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	8e 60       	ori	r24, 0x0E	; 14
 5ee:	80 83       	st	Z, r24
	
	//Connect printf
	uart = fdevopen(&UART_putchar, &UART_recchar);
 5f0:	88 ed       	ldi	r24, 0xD8	; 216
 5f2:	92 e0       	ldi	r25, 0x02	; 2
 5f4:	62 ee       	ldi	r22, 0xE2	; 226
 5f6:	72 e0       	ldi	r23, 0x02	; 2
 5f8:	0e 94 49 04 	call	0x892	; 0x892 <fdevopen>
 5fc:	90 93 bb 01 	sts	0x01BB, r25
 600:	80 93 ba 01 	sts	0x01BA, r24

	return 0;
}
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	08 95       	ret

0000060a <UART_print>:
	
	//Return data
	return UDR1;	
}

int UART_print(char * str){
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	ec 01       	movw	r28, r24
	int i = 0;
	while (str[i] != 0x00){
 610:	88 81       	ld	r24, Y
 612:	88 23       	and	r24, r24
 614:	51 f0       	breq	.+20     	; 0x62a <UART_print+0x20>
	
	//Return data
	return UDR1;	
}

int UART_print(char * str){
 616:	21 96       	adiw	r28, 0x01	; 1
	int i = 0;
	while (str[i] != 0x00){
		UART_putchar(str[i],uart);
 618:	60 91 ba 01 	lds	r22, 0x01BA
 61c:	70 91 bb 01 	lds	r23, 0x01BB
 620:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_putchar>
	return UDR1;	
}

int UART_print(char * str){
	int i = 0;
	while (str[i] != 0x00){
 624:	89 91       	ld	r24, Y+
 626:	88 23       	and	r24, r24
 628:	b9 f7       	brne	.-18     	; 0x618 <UART_print+0xe>
		UART_putchar(str[i],uart);
		i++;
	}
	return 0;
}
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <malloc>:
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	ac 01       	movw	r20, r24
 63a:	82 30       	cpi	r24, 0x02	; 2
 63c:	91 05       	cpc	r25, r1
 63e:	10 f4       	brcc	.+4      	; 0x644 <malloc+0x10>
 640:	42 e0       	ldi	r20, 0x02	; 2
 642:	50 e0       	ldi	r21, 0x00	; 0
 644:	e0 91 be 01 	lds	r30, 0x01BE
 648:	f0 91 bf 01 	lds	r31, 0x01BF
 64c:	20 e0       	ldi	r18, 0x00	; 0
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	a0 e0       	ldi	r26, 0x00	; 0
 652:	b0 e0       	ldi	r27, 0x00	; 0
 654:	24 c0       	rjmp	.+72     	; 0x69e <malloc+0x6a>
 656:	80 81       	ld	r24, Z
 658:	91 81       	ldd	r25, Z+1	; 0x01
 65a:	84 17       	cp	r24, r20
 65c:	95 07       	cpc	r25, r21
 65e:	d0 f0       	brcs	.+52     	; 0x694 <malloc+0x60>
 660:	84 17       	cp	r24, r20
 662:	95 07       	cpc	r25, r21
 664:	71 f4       	brne	.+28     	; 0x682 <malloc+0x4e>
 666:	82 81       	ldd	r24, Z+2	; 0x02
 668:	93 81       	ldd	r25, Z+3	; 0x03
 66a:	10 97       	sbiw	r26, 0x00	; 0
 66c:	29 f0       	breq	.+10     	; 0x678 <malloc+0x44>
 66e:	13 96       	adiw	r26, 0x03	; 3
 670:	9c 93       	st	X, r25
 672:	8e 93       	st	-X, r24
 674:	12 97       	sbiw	r26, 0x02	; 2
 676:	2c c0       	rjmp	.+88     	; 0x6d0 <malloc+0x9c>
 678:	90 93 bf 01 	sts	0x01BF, r25
 67c:	80 93 be 01 	sts	0x01BE, r24
 680:	27 c0       	rjmp	.+78     	; 0x6d0 <malloc+0x9c>
 682:	21 15       	cp	r18, r1
 684:	31 05       	cpc	r19, r1
 686:	19 f0       	breq	.+6      	; 0x68e <malloc+0x5a>
 688:	82 17       	cp	r24, r18
 68a:	93 07       	cpc	r25, r19
 68c:	18 f4       	brcc	.+6      	; 0x694 <malloc+0x60>
 68e:	9c 01       	movw	r18, r24
 690:	bd 01       	movw	r22, r26
 692:	ef 01       	movw	r28, r30
 694:	92 81       	ldd	r25, Z+2	; 0x02
 696:	83 81       	ldd	r24, Z+3	; 0x03
 698:	df 01       	movw	r26, r30
 69a:	e9 2f       	mov	r30, r25
 69c:	f8 2f       	mov	r31, r24
 69e:	30 97       	sbiw	r30, 0x00	; 0
 6a0:	d1 f6       	brne	.-76     	; 0x656 <malloc+0x22>
 6a2:	21 15       	cp	r18, r1
 6a4:	31 05       	cpc	r19, r1
 6a6:	f9 f0       	breq	.+62     	; 0x6e6 <malloc+0xb2>
 6a8:	c9 01       	movw	r24, r18
 6aa:	84 1b       	sub	r24, r20
 6ac:	95 0b       	sbc	r25, r21
 6ae:	84 30       	cpi	r24, 0x04	; 4
 6b0:	91 05       	cpc	r25, r1
 6b2:	80 f4       	brcc	.+32     	; 0x6d4 <malloc+0xa0>
 6b4:	8a 81       	ldd	r24, Y+2	; 0x02
 6b6:	9b 81       	ldd	r25, Y+3	; 0x03
 6b8:	61 15       	cp	r22, r1
 6ba:	71 05       	cpc	r23, r1
 6bc:	21 f0       	breq	.+8      	; 0x6c6 <malloc+0x92>
 6be:	fb 01       	movw	r30, r22
 6c0:	93 83       	std	Z+3, r25	; 0x03
 6c2:	82 83       	std	Z+2, r24	; 0x02
 6c4:	04 c0       	rjmp	.+8      	; 0x6ce <malloc+0x9a>
 6c6:	90 93 bf 01 	sts	0x01BF, r25
 6ca:	80 93 be 01 	sts	0x01BE, r24
 6ce:	fe 01       	movw	r30, r28
 6d0:	32 96       	adiw	r30, 0x02	; 2
 6d2:	42 c0       	rjmp	.+132    	; 0x758 <malloc+0x124>
 6d4:	fe 01       	movw	r30, r28
 6d6:	e8 0f       	add	r30, r24
 6d8:	f9 1f       	adc	r31, r25
 6da:	41 93       	st	Z+, r20
 6dc:	51 93       	st	Z+, r21
 6de:	02 97       	sbiw	r24, 0x02	; 2
 6e0:	99 83       	std	Y+1, r25	; 0x01
 6e2:	88 83       	st	Y, r24
 6e4:	39 c0       	rjmp	.+114    	; 0x758 <malloc+0x124>
 6e6:	80 91 bc 01 	lds	r24, 0x01BC
 6ea:	90 91 bd 01 	lds	r25, 0x01BD
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	41 f4       	brne	.+16     	; 0x702 <malloc+0xce>
 6f2:	80 91 b5 01 	lds	r24, 0x01B5
 6f6:	90 91 b6 01 	lds	r25, 0x01B6
 6fa:	90 93 bd 01 	sts	0x01BD, r25
 6fe:	80 93 bc 01 	sts	0x01BC, r24
 702:	20 91 b3 01 	lds	r18, 0x01B3
 706:	30 91 b4 01 	lds	r19, 0x01B4
 70a:	21 15       	cp	r18, r1
 70c:	31 05       	cpc	r19, r1
 70e:	41 f4       	brne	.+16     	; 0x720 <malloc+0xec>
 710:	2d b7       	in	r18, 0x3d	; 61
 712:	3e b7       	in	r19, 0x3e	; 62
 714:	80 91 b7 01 	lds	r24, 0x01B7
 718:	90 91 b8 01 	lds	r25, 0x01B8
 71c:	28 1b       	sub	r18, r24
 71e:	39 0b       	sbc	r19, r25
 720:	e0 91 bc 01 	lds	r30, 0x01BC
 724:	f0 91 bd 01 	lds	r31, 0x01BD
 728:	e2 17       	cp	r30, r18
 72a:	f3 07       	cpc	r31, r19
 72c:	98 f4       	brcc	.+38     	; 0x754 <malloc+0x120>
 72e:	2e 1b       	sub	r18, r30
 730:	3f 0b       	sbc	r19, r31
 732:	24 17       	cp	r18, r20
 734:	35 07       	cpc	r19, r21
 736:	70 f0       	brcs	.+28     	; 0x754 <malloc+0x120>
 738:	ca 01       	movw	r24, r20
 73a:	02 96       	adiw	r24, 0x02	; 2
 73c:	28 17       	cp	r18, r24
 73e:	39 07       	cpc	r19, r25
 740:	48 f0       	brcs	.+18     	; 0x754 <malloc+0x120>
 742:	8e 0f       	add	r24, r30
 744:	9f 1f       	adc	r25, r31
 746:	90 93 bd 01 	sts	0x01BD, r25
 74a:	80 93 bc 01 	sts	0x01BC, r24
 74e:	41 93       	st	Z+, r20
 750:	51 93       	st	Z+, r21
 752:	02 c0       	rjmp	.+4      	; 0x758 <malloc+0x124>
 754:	e0 e0       	ldi	r30, 0x00	; 0
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	cf 01       	movw	r24, r30
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	08 95       	ret

00000760 <free>:
 760:	0f 93       	push	r16
 762:	1f 93       	push	r17
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	9c 01       	movw	r18, r24
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	09 f4       	brne	.+2      	; 0x770 <free+0x10>
 76e:	8c c0       	rjmp	.+280    	; 0x888 <free+0x128>
 770:	dc 01       	movw	r26, r24
 772:	12 97       	sbiw	r26, 0x02	; 2
 774:	13 96       	adiw	r26, 0x03	; 3
 776:	1c 92       	st	X, r1
 778:	1e 92       	st	-X, r1
 77a:	12 97       	sbiw	r26, 0x02	; 2
 77c:	60 91 be 01 	lds	r22, 0x01BE
 780:	70 91 bf 01 	lds	r23, 0x01BF
 784:	61 15       	cp	r22, r1
 786:	71 05       	cpc	r23, r1
 788:	89 f4       	brne	.+34     	; 0x7ac <free+0x4c>
 78a:	8d 91       	ld	r24, X+
 78c:	9c 91       	ld	r25, X
 78e:	11 97       	sbiw	r26, 0x01	; 1
 790:	82 0f       	add	r24, r18
 792:	93 1f       	adc	r25, r19
 794:	20 91 bc 01 	lds	r18, 0x01BC
 798:	30 91 bd 01 	lds	r19, 0x01BD
 79c:	28 17       	cp	r18, r24
 79e:	39 07       	cpc	r19, r25
 7a0:	69 f5       	brne	.+90     	; 0x7fc <free+0x9c>
 7a2:	b0 93 bd 01 	sts	0x01BD, r27
 7a6:	a0 93 bc 01 	sts	0x01BC, r26
 7aa:	6e c0       	rjmp	.+220    	; 0x888 <free+0x128>
 7ac:	fb 01       	movw	r30, r22
 7ae:	40 e0       	ldi	r20, 0x00	; 0
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <free+0x56>
 7b4:	fc 01       	movw	r30, r24
 7b6:	ea 17       	cp	r30, r26
 7b8:	fb 07       	cpc	r31, r27
 7ba:	30 f4       	brcc	.+12     	; 0x7c8 <free+0x68>
 7bc:	82 81       	ldd	r24, Z+2	; 0x02
 7be:	93 81       	ldd	r25, Z+3	; 0x03
 7c0:	af 01       	movw	r20, r30
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	b9 f7       	brne	.-18     	; 0x7b4 <free+0x54>
 7c6:	1f c0       	rjmp	.+62     	; 0x806 <free+0xa6>
 7c8:	e9 01       	movw	r28, r18
 7ca:	22 97       	sbiw	r28, 0x02	; 2
 7cc:	fb 83       	std	Y+3, r31	; 0x03
 7ce:	ea 83       	std	Y+2, r30	; 0x02
 7d0:	08 81       	ld	r16, Y
 7d2:	19 81       	ldd	r17, Y+1	; 0x01
 7d4:	c9 01       	movw	r24, r18
 7d6:	80 0f       	add	r24, r16
 7d8:	91 1f       	adc	r25, r17
 7da:	8e 17       	cp	r24, r30
 7dc:	9f 07       	cpc	r25, r31
 7de:	59 f4       	brne	.+22     	; 0x7f6 <free+0x96>
 7e0:	80 81       	ld	r24, Z
 7e2:	91 81       	ldd	r25, Z+1	; 0x01
 7e4:	80 0f       	add	r24, r16
 7e6:	91 1f       	adc	r25, r17
 7e8:	02 96       	adiw	r24, 0x02	; 2
 7ea:	99 83       	std	Y+1, r25	; 0x01
 7ec:	88 83       	st	Y, r24
 7ee:	82 81       	ldd	r24, Z+2	; 0x02
 7f0:	93 81       	ldd	r25, Z+3	; 0x03
 7f2:	9b 83       	std	Y+3, r25	; 0x03
 7f4:	8a 83       	std	Y+2, r24	; 0x02
 7f6:	41 15       	cp	r20, r1
 7f8:	51 05       	cpc	r21, r1
 7fa:	29 f4       	brne	.+10     	; 0x806 <free+0xa6>
 7fc:	b0 93 bf 01 	sts	0x01BF, r27
 800:	a0 93 be 01 	sts	0x01BE, r26
 804:	41 c0       	rjmp	.+130    	; 0x888 <free+0x128>
 806:	fa 01       	movw	r30, r20
 808:	b3 83       	std	Z+3, r27	; 0x03
 80a:	a2 83       	std	Z+2, r26	; 0x02
 80c:	c1 91       	ld	r28, Z+
 80e:	d1 91       	ld	r29, Z+
 810:	ec 0f       	add	r30, r28
 812:	fd 1f       	adc	r31, r29
 814:	ae 17       	cp	r26, r30
 816:	bf 07       	cpc	r27, r31
 818:	81 f4       	brne	.+32     	; 0x83a <free+0xda>
 81a:	f9 01       	movw	r30, r18
 81c:	92 91       	ld	r25, -Z
 81e:	82 91       	ld	r24, -Z
 820:	8c 0f       	add	r24, r28
 822:	9d 1f       	adc	r25, r29
 824:	02 96       	adiw	r24, 0x02	; 2
 826:	da 01       	movw	r26, r20
 828:	11 96       	adiw	r26, 0x01	; 1
 82a:	9c 93       	st	X, r25
 82c:	8e 93       	st	-X, r24
 82e:	82 81       	ldd	r24, Z+2	; 0x02
 830:	93 81       	ldd	r25, Z+3	; 0x03
 832:	13 96       	adiw	r26, 0x03	; 3
 834:	9c 93       	st	X, r25
 836:	8e 93       	st	-X, r24
 838:	12 97       	sbiw	r26, 0x02	; 2
 83a:	e0 e0       	ldi	r30, 0x00	; 0
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <free+0xe4>
 840:	fb 01       	movw	r30, r22
 842:	bc 01       	movw	r22, r24
 844:	db 01       	movw	r26, r22
 846:	12 96       	adiw	r26, 0x02	; 2
 848:	8d 91       	ld	r24, X+
 84a:	9c 91       	ld	r25, X
 84c:	13 97       	sbiw	r26, 0x03	; 3
 84e:	00 97       	sbiw	r24, 0x00	; 0
 850:	b9 f7       	brne	.-18     	; 0x840 <free+0xe0>
 852:	cb 01       	movw	r24, r22
 854:	02 96       	adiw	r24, 0x02	; 2
 856:	2d 91       	ld	r18, X+
 858:	3c 91       	ld	r19, X
 85a:	11 97       	sbiw	r26, 0x01	; 1
 85c:	82 0f       	add	r24, r18
 85e:	93 1f       	adc	r25, r19
 860:	20 91 bc 01 	lds	r18, 0x01BC
 864:	30 91 bd 01 	lds	r19, 0x01BD
 868:	28 17       	cp	r18, r24
 86a:	39 07       	cpc	r19, r25
 86c:	69 f4       	brne	.+26     	; 0x888 <free+0x128>
 86e:	30 97       	sbiw	r30, 0x00	; 0
 870:	29 f4       	brne	.+10     	; 0x87c <free+0x11c>
 872:	10 92 bf 01 	sts	0x01BF, r1
 876:	10 92 be 01 	sts	0x01BE, r1
 87a:	02 c0       	rjmp	.+4      	; 0x880 <free+0x120>
 87c:	13 82       	std	Z+3, r1	; 0x03
 87e:	12 82       	std	Z+2, r1	; 0x02
 880:	70 93 bd 01 	sts	0x01BD, r23
 884:	60 93 bc 01 	sts	0x01BC, r22
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	1f 91       	pop	r17
 88e:	0f 91       	pop	r16
 890:	08 95       	ret

00000892 <fdevopen>:
 892:	0f 93       	push	r16
 894:	1f 93       	push	r17
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	8c 01       	movw	r16, r24
 89c:	eb 01       	movw	r28, r22
 89e:	00 97       	sbiw	r24, 0x00	; 0
 8a0:	11 f4       	brne	.+4      	; 0x8a6 <fdevopen+0x14>
 8a2:	20 97       	sbiw	r28, 0x00	; 0
 8a4:	c1 f1       	breq	.+112    	; 0x916 <fdevopen+0x84>
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	6e e0       	ldi	r22, 0x0E	; 14
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	0e 94 ac 06 	call	0xd58	; 0xd58 <calloc>
 8b2:	fc 01       	movw	r30, r24
 8b4:	00 97       	sbiw	r24, 0x00	; 0
 8b6:	89 f1       	breq	.+98     	; 0x91a <fdevopen+0x88>
 8b8:	80 e8       	ldi	r24, 0x80	; 128
 8ba:	83 83       	std	Z+3, r24	; 0x03
 8bc:	20 97       	sbiw	r28, 0x00	; 0
 8be:	71 f0       	breq	.+28     	; 0x8dc <fdevopen+0x4a>
 8c0:	d3 87       	std	Z+11, r29	; 0x0b
 8c2:	c2 87       	std	Z+10, r28	; 0x0a
 8c4:	81 e8       	ldi	r24, 0x81	; 129
 8c6:	83 83       	std	Z+3, r24	; 0x03
 8c8:	80 91 c0 01 	lds	r24, 0x01C0
 8cc:	90 91 c1 01 	lds	r25, 0x01C1
 8d0:	00 97       	sbiw	r24, 0x00	; 0
 8d2:	21 f4       	brne	.+8      	; 0x8dc <fdevopen+0x4a>
 8d4:	f0 93 c1 01 	sts	0x01C1, r31
 8d8:	e0 93 c0 01 	sts	0x01C0, r30
 8dc:	01 15       	cp	r16, r1
 8de:	11 05       	cpc	r17, r1
 8e0:	e1 f0       	breq	.+56     	; 0x91a <fdevopen+0x88>
 8e2:	11 87       	std	Z+9, r17	; 0x09
 8e4:	00 87       	std	Z+8, r16	; 0x08
 8e6:	83 81       	ldd	r24, Z+3	; 0x03
 8e8:	82 60       	ori	r24, 0x02	; 2
 8ea:	83 83       	std	Z+3, r24	; 0x03
 8ec:	80 91 c2 01 	lds	r24, 0x01C2
 8f0:	90 91 c3 01 	lds	r25, 0x01C3
 8f4:	00 97       	sbiw	r24, 0x00	; 0
 8f6:	89 f4       	brne	.+34     	; 0x91a <fdevopen+0x88>
 8f8:	f0 93 c3 01 	sts	0x01C3, r31
 8fc:	e0 93 c2 01 	sts	0x01C2, r30
 900:	80 91 c4 01 	lds	r24, 0x01C4
 904:	90 91 c5 01 	lds	r25, 0x01C5
 908:	00 97       	sbiw	r24, 0x00	; 0
 90a:	39 f4       	brne	.+14     	; 0x91a <fdevopen+0x88>
 90c:	f0 93 c5 01 	sts	0x01C5, r31
 910:	e0 93 c4 01 	sts	0x01C4, r30
 914:	02 c0       	rjmp	.+4      	; 0x91a <fdevopen+0x88>
 916:	e0 e0       	ldi	r30, 0x00	; 0
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	cf 01       	movw	r24, r30
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	1f 91       	pop	r17
 922:	0f 91       	pop	r16
 924:	08 95       	ret

00000926 <printf>:
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
 92e:	fe 01       	movw	r30, r28
 930:	35 96       	adiw	r30, 0x05	; 5
 932:	61 91       	ld	r22, Z+
 934:	71 91       	ld	r23, Z+
 936:	80 91 c2 01 	lds	r24, 0x01C2
 93a:	90 91 c3 01 	lds	r25, 0x01C3
 93e:	af 01       	movw	r20, r30
 940:	0e 94 a5 04 	call	0x94a	; 0x94a <vfprintf>
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	08 95       	ret

0000094a <vfprintf>:
 94a:	2f 92       	push	r2
 94c:	3f 92       	push	r3
 94e:	4f 92       	push	r4
 950:	5f 92       	push	r5
 952:	6f 92       	push	r6
 954:	7f 92       	push	r7
 956:	8f 92       	push	r8
 958:	9f 92       	push	r9
 95a:	af 92       	push	r10
 95c:	bf 92       	push	r11
 95e:	cf 92       	push	r12
 960:	df 92       	push	r13
 962:	ef 92       	push	r14
 964:	ff 92       	push	r15
 966:	0f 93       	push	r16
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	cd b7       	in	r28, 0x3d	; 61
 970:	de b7       	in	r29, 0x3e	; 62
 972:	2d 97       	sbiw	r28, 0x0d	; 13
 974:	0f b6       	in	r0, 0x3f	; 63
 976:	f8 94       	cli
 978:	de bf       	out	0x3e, r29	; 62
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	cd bf       	out	0x3d, r28	; 61
 97e:	3c 01       	movw	r6, r24
 980:	7d 87       	std	Y+13, r23	; 0x0d
 982:	6c 87       	std	Y+12, r22	; 0x0c
 984:	5a 01       	movw	r10, r20
 986:	fc 01       	movw	r30, r24
 988:	17 82       	std	Z+7, r1	; 0x07
 98a:	16 82       	std	Z+6, r1	; 0x06
 98c:	83 81       	ldd	r24, Z+3	; 0x03
 98e:	81 ff       	sbrs	r24, 1
 990:	c8 c1       	rjmp	.+912    	; 0xd22 <vfprintf+0x3d8>
 992:	2e 01       	movw	r4, r28
 994:	08 94       	sec
 996:	41 1c       	adc	r4, r1
 998:	51 1c       	adc	r5, r1
 99a:	f3 01       	movw	r30, r6
 99c:	93 81       	ldd	r25, Z+3	; 0x03
 99e:	ec 85       	ldd	r30, Y+12	; 0x0c
 9a0:	fd 85       	ldd	r31, Y+13	; 0x0d
 9a2:	93 fd       	sbrc	r25, 3
 9a4:	85 91       	lpm	r24, Z+
 9a6:	93 ff       	sbrs	r25, 3
 9a8:	81 91       	ld	r24, Z+
 9aa:	fd 87       	std	Y+13, r31	; 0x0d
 9ac:	ec 87       	std	Y+12, r30	; 0x0c
 9ae:	88 23       	and	r24, r24
 9b0:	09 f4       	brne	.+2      	; 0x9b4 <vfprintf+0x6a>
 9b2:	b3 c1       	rjmp	.+870    	; 0xd1a <vfprintf+0x3d0>
 9b4:	85 32       	cpi	r24, 0x25	; 37
 9b6:	41 f4       	brne	.+16     	; 0x9c8 <vfprintf+0x7e>
 9b8:	93 fd       	sbrc	r25, 3
 9ba:	85 91       	lpm	r24, Z+
 9bc:	93 ff       	sbrs	r25, 3
 9be:	81 91       	ld	r24, Z+
 9c0:	fd 87       	std	Y+13, r31	; 0x0d
 9c2:	ec 87       	std	Y+12, r30	; 0x0c
 9c4:	85 32       	cpi	r24, 0x25	; 37
 9c6:	29 f4       	brne	.+10     	; 0x9d2 <vfprintf+0x88>
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	b3 01       	movw	r22, r6
 9cc:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 9d0:	e4 cf       	rjmp	.-56     	; 0x99a <vfprintf+0x50>
 9d2:	ff 24       	eor	r15, r15
 9d4:	ee 24       	eor	r14, r14
 9d6:	10 e0       	ldi	r17, 0x00	; 0
 9d8:	10 32       	cpi	r17, 0x20	; 32
 9da:	b0 f4       	brcc	.+44     	; 0xa08 <vfprintf+0xbe>
 9dc:	8b 32       	cpi	r24, 0x2B	; 43
 9de:	69 f0       	breq	.+26     	; 0x9fa <vfprintf+0xb0>
 9e0:	8c 32       	cpi	r24, 0x2C	; 44
 9e2:	28 f4       	brcc	.+10     	; 0x9ee <vfprintf+0xa4>
 9e4:	80 32       	cpi	r24, 0x20	; 32
 9e6:	51 f0       	breq	.+20     	; 0x9fc <vfprintf+0xb2>
 9e8:	83 32       	cpi	r24, 0x23	; 35
 9ea:	71 f4       	brne	.+28     	; 0xa08 <vfprintf+0xbe>
 9ec:	0b c0       	rjmp	.+22     	; 0xa04 <vfprintf+0xba>
 9ee:	8d 32       	cpi	r24, 0x2D	; 45
 9f0:	39 f0       	breq	.+14     	; 0xa00 <vfprintf+0xb6>
 9f2:	80 33       	cpi	r24, 0x30	; 48
 9f4:	49 f4       	brne	.+18     	; 0xa08 <vfprintf+0xbe>
 9f6:	11 60       	ori	r17, 0x01	; 1
 9f8:	2c c0       	rjmp	.+88     	; 0xa52 <vfprintf+0x108>
 9fa:	12 60       	ori	r17, 0x02	; 2
 9fc:	14 60       	ori	r17, 0x04	; 4
 9fe:	29 c0       	rjmp	.+82     	; 0xa52 <vfprintf+0x108>
 a00:	18 60       	ori	r17, 0x08	; 8
 a02:	27 c0       	rjmp	.+78     	; 0xa52 <vfprintf+0x108>
 a04:	10 61       	ori	r17, 0x10	; 16
 a06:	25 c0       	rjmp	.+74     	; 0xa52 <vfprintf+0x108>
 a08:	17 fd       	sbrc	r17, 7
 a0a:	2e c0       	rjmp	.+92     	; 0xa68 <vfprintf+0x11e>
 a0c:	28 2f       	mov	r18, r24
 a0e:	20 53       	subi	r18, 0x30	; 48
 a10:	2a 30       	cpi	r18, 0x0A	; 10
 a12:	98 f4       	brcc	.+38     	; 0xa3a <vfprintf+0xf0>
 a14:	16 ff       	sbrs	r17, 6
 a16:	08 c0       	rjmp	.+16     	; 0xa28 <vfprintf+0xde>
 a18:	8f 2d       	mov	r24, r15
 a1a:	88 0f       	add	r24, r24
 a1c:	f8 2e       	mov	r15, r24
 a1e:	ff 0c       	add	r15, r15
 a20:	ff 0c       	add	r15, r15
 a22:	f8 0e       	add	r15, r24
 a24:	f2 0e       	add	r15, r18
 a26:	15 c0       	rjmp	.+42     	; 0xa52 <vfprintf+0x108>
 a28:	8e 2d       	mov	r24, r14
 a2a:	88 0f       	add	r24, r24
 a2c:	e8 2e       	mov	r14, r24
 a2e:	ee 0c       	add	r14, r14
 a30:	ee 0c       	add	r14, r14
 a32:	e8 0e       	add	r14, r24
 a34:	e2 0e       	add	r14, r18
 a36:	10 62       	ori	r17, 0x20	; 32
 a38:	0c c0       	rjmp	.+24     	; 0xa52 <vfprintf+0x108>
 a3a:	8e 32       	cpi	r24, 0x2E	; 46
 a3c:	21 f4       	brne	.+8      	; 0xa46 <vfprintf+0xfc>
 a3e:	16 fd       	sbrc	r17, 6
 a40:	6c c1       	rjmp	.+728    	; 0xd1a <vfprintf+0x3d0>
 a42:	10 64       	ori	r17, 0x40	; 64
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <vfprintf+0x108>
 a46:	8c 36       	cpi	r24, 0x6C	; 108
 a48:	11 f4       	brne	.+4      	; 0xa4e <vfprintf+0x104>
 a4a:	10 68       	ori	r17, 0x80	; 128
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <vfprintf+0x108>
 a4e:	88 36       	cpi	r24, 0x68	; 104
 a50:	59 f4       	brne	.+22     	; 0xa68 <vfprintf+0x11e>
 a52:	ec 85       	ldd	r30, Y+12	; 0x0c
 a54:	fd 85       	ldd	r31, Y+13	; 0x0d
 a56:	93 fd       	sbrc	r25, 3
 a58:	85 91       	lpm	r24, Z+
 a5a:	93 ff       	sbrs	r25, 3
 a5c:	81 91       	ld	r24, Z+
 a5e:	fd 87       	std	Y+13, r31	; 0x0d
 a60:	ec 87       	std	Y+12, r30	; 0x0c
 a62:	88 23       	and	r24, r24
 a64:	09 f0       	breq	.+2      	; 0xa68 <vfprintf+0x11e>
 a66:	b8 cf       	rjmp	.-144    	; 0x9d8 <vfprintf+0x8e>
 a68:	98 2f       	mov	r25, r24
 a6a:	95 54       	subi	r25, 0x45	; 69
 a6c:	93 30       	cpi	r25, 0x03	; 3
 a6e:	18 f0       	brcs	.+6      	; 0xa76 <vfprintf+0x12c>
 a70:	90 52       	subi	r25, 0x20	; 32
 a72:	93 30       	cpi	r25, 0x03	; 3
 a74:	38 f4       	brcc	.+14     	; 0xa84 <vfprintf+0x13a>
 a76:	24 e0       	ldi	r18, 0x04	; 4
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	a2 0e       	add	r10, r18
 a7c:	b3 1e       	adc	r11, r19
 a7e:	3f e3       	ldi	r19, 0x3F	; 63
 a80:	39 83       	std	Y+1, r19	; 0x01
 a82:	0f c0       	rjmp	.+30     	; 0xaa2 <vfprintf+0x158>
 a84:	83 36       	cpi	r24, 0x63	; 99
 a86:	31 f0       	breq	.+12     	; 0xa94 <vfprintf+0x14a>
 a88:	83 37       	cpi	r24, 0x73	; 115
 a8a:	81 f0       	breq	.+32     	; 0xaac <vfprintf+0x162>
 a8c:	83 35       	cpi	r24, 0x53	; 83
 a8e:	09 f0       	breq	.+2      	; 0xa92 <vfprintf+0x148>
 a90:	5a c0       	rjmp	.+180    	; 0xb46 <vfprintf+0x1fc>
 a92:	22 c0       	rjmp	.+68     	; 0xad8 <vfprintf+0x18e>
 a94:	f5 01       	movw	r30, r10
 a96:	80 81       	ld	r24, Z
 a98:	89 83       	std	Y+1, r24	; 0x01
 a9a:	22 e0       	ldi	r18, 0x02	; 2
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	a2 0e       	add	r10, r18
 aa0:	b3 1e       	adc	r11, r19
 aa2:	21 e0       	ldi	r18, 0x01	; 1
 aa4:	c2 2e       	mov	r12, r18
 aa6:	d1 2c       	mov	r13, r1
 aa8:	42 01       	movw	r8, r4
 aaa:	14 c0       	rjmp	.+40     	; 0xad4 <vfprintf+0x18a>
 aac:	92 e0       	ldi	r25, 0x02	; 2
 aae:	29 2e       	mov	r2, r25
 ab0:	31 2c       	mov	r3, r1
 ab2:	2a 0c       	add	r2, r10
 ab4:	3b 1c       	adc	r3, r11
 ab6:	f5 01       	movw	r30, r10
 ab8:	80 80       	ld	r8, Z
 aba:	91 80       	ldd	r9, Z+1	; 0x01
 abc:	16 ff       	sbrs	r17, 6
 abe:	03 c0       	rjmp	.+6      	; 0xac6 <vfprintf+0x17c>
 ac0:	6f 2d       	mov	r22, r15
 ac2:	70 e0       	ldi	r23, 0x00	; 0
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <vfprintf+0x180>
 ac6:	6f ef       	ldi	r22, 0xFF	; 255
 ac8:	7f ef       	ldi	r23, 0xFF	; 255
 aca:	c4 01       	movw	r24, r8
 acc:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <strnlen>
 ad0:	6c 01       	movw	r12, r24
 ad2:	51 01       	movw	r10, r2
 ad4:	1f 77       	andi	r17, 0x7F	; 127
 ad6:	15 c0       	rjmp	.+42     	; 0xb02 <vfprintf+0x1b8>
 ad8:	82 e0       	ldi	r24, 0x02	; 2
 ada:	28 2e       	mov	r2, r24
 adc:	31 2c       	mov	r3, r1
 ade:	2a 0c       	add	r2, r10
 ae0:	3b 1c       	adc	r3, r11
 ae2:	f5 01       	movw	r30, r10
 ae4:	80 80       	ld	r8, Z
 ae6:	91 80       	ldd	r9, Z+1	; 0x01
 ae8:	16 ff       	sbrs	r17, 6
 aea:	03 c0       	rjmp	.+6      	; 0xaf2 <vfprintf+0x1a8>
 aec:	6f 2d       	mov	r22, r15
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <vfprintf+0x1ac>
 af2:	6f ef       	ldi	r22, 0xFF	; 255
 af4:	7f ef       	ldi	r23, 0xFF	; 255
 af6:	c4 01       	movw	r24, r8
 af8:	0e 94 ca 06 	call	0xd94	; 0xd94 <strnlen_P>
 afc:	6c 01       	movw	r12, r24
 afe:	10 68       	ori	r17, 0x80	; 128
 b00:	51 01       	movw	r10, r2
 b02:	13 fd       	sbrc	r17, 3
 b04:	1c c0       	rjmp	.+56     	; 0xb3e <vfprintf+0x1f4>
 b06:	06 c0       	rjmp	.+12     	; 0xb14 <vfprintf+0x1ca>
 b08:	80 e2       	ldi	r24, 0x20	; 32
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	b3 01       	movw	r22, r6
 b0e:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 b12:	ea 94       	dec	r14
 b14:	8e 2d       	mov	r24, r14
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	c8 16       	cp	r12, r24
 b1a:	d9 06       	cpc	r13, r25
 b1c:	a8 f3       	brcs	.-22     	; 0xb08 <vfprintf+0x1be>
 b1e:	0f c0       	rjmp	.+30     	; 0xb3e <vfprintf+0x1f4>
 b20:	f4 01       	movw	r30, r8
 b22:	17 fd       	sbrc	r17, 7
 b24:	85 91       	lpm	r24, Z+
 b26:	17 ff       	sbrs	r17, 7
 b28:	81 91       	ld	r24, Z+
 b2a:	4f 01       	movw	r8, r30
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	b3 01       	movw	r22, r6
 b30:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 b34:	e1 10       	cpse	r14, r1
 b36:	ea 94       	dec	r14
 b38:	08 94       	sec
 b3a:	c1 08       	sbc	r12, r1
 b3c:	d1 08       	sbc	r13, r1
 b3e:	c1 14       	cp	r12, r1
 b40:	d1 04       	cpc	r13, r1
 b42:	71 f7       	brne	.-36     	; 0xb20 <vfprintf+0x1d6>
 b44:	e7 c0       	rjmp	.+462    	; 0xd14 <vfprintf+0x3ca>
 b46:	84 36       	cpi	r24, 0x64	; 100
 b48:	11 f0       	breq	.+4      	; 0xb4e <vfprintf+0x204>
 b4a:	89 36       	cpi	r24, 0x69	; 105
 b4c:	51 f5       	brne	.+84     	; 0xba2 <vfprintf+0x258>
 b4e:	f5 01       	movw	r30, r10
 b50:	17 ff       	sbrs	r17, 7
 b52:	07 c0       	rjmp	.+14     	; 0xb62 <vfprintf+0x218>
 b54:	80 81       	ld	r24, Z
 b56:	91 81       	ldd	r25, Z+1	; 0x01
 b58:	a2 81       	ldd	r26, Z+2	; 0x02
 b5a:	b3 81       	ldd	r27, Z+3	; 0x03
 b5c:	24 e0       	ldi	r18, 0x04	; 4
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	08 c0       	rjmp	.+16     	; 0xb72 <vfprintf+0x228>
 b62:	80 81       	ld	r24, Z
 b64:	91 81       	ldd	r25, Z+1	; 0x01
 b66:	aa 27       	eor	r26, r26
 b68:	97 fd       	sbrc	r25, 7
 b6a:	a0 95       	com	r26
 b6c:	ba 2f       	mov	r27, r26
 b6e:	22 e0       	ldi	r18, 0x02	; 2
 b70:	30 e0       	ldi	r19, 0x00	; 0
 b72:	a2 0e       	add	r10, r18
 b74:	b3 1e       	adc	r11, r19
 b76:	01 2f       	mov	r16, r17
 b78:	0f 76       	andi	r16, 0x6F	; 111
 b7a:	b7 ff       	sbrs	r27, 7
 b7c:	08 c0       	rjmp	.+16     	; 0xb8e <vfprintf+0x244>
 b7e:	b0 95       	com	r27
 b80:	a0 95       	com	r26
 b82:	90 95       	com	r25
 b84:	81 95       	neg	r24
 b86:	9f 4f       	sbci	r25, 0xFF	; 255
 b88:	af 4f       	sbci	r26, 0xFF	; 255
 b8a:	bf 4f       	sbci	r27, 0xFF	; 255
 b8c:	00 68       	ori	r16, 0x80	; 128
 b8e:	bc 01       	movw	r22, r24
 b90:	cd 01       	movw	r24, r26
 b92:	a2 01       	movw	r20, r4
 b94:	2a e0       	ldi	r18, 0x0A	; 10
 b96:	30 e0       	ldi	r19, 0x00	; 0
 b98:	0e 94 13 07 	call	0xe26	; 0xe26 <__ultoa_invert>
 b9c:	d8 2e       	mov	r13, r24
 b9e:	d4 18       	sub	r13, r4
 ba0:	3f c0       	rjmp	.+126    	; 0xc20 <vfprintf+0x2d6>
 ba2:	85 37       	cpi	r24, 0x75	; 117
 ba4:	21 f4       	brne	.+8      	; 0xbae <vfprintf+0x264>
 ba6:	1f 7e       	andi	r17, 0xEF	; 239
 ba8:	2a e0       	ldi	r18, 0x0A	; 10
 baa:	30 e0       	ldi	r19, 0x00	; 0
 bac:	20 c0       	rjmp	.+64     	; 0xbee <vfprintf+0x2a4>
 bae:	19 7f       	andi	r17, 0xF9	; 249
 bb0:	8f 36       	cpi	r24, 0x6F	; 111
 bb2:	a9 f0       	breq	.+42     	; 0xbde <vfprintf+0x294>
 bb4:	80 37       	cpi	r24, 0x70	; 112
 bb6:	20 f4       	brcc	.+8      	; 0xbc0 <vfprintf+0x276>
 bb8:	88 35       	cpi	r24, 0x58	; 88
 bba:	09 f0       	breq	.+2      	; 0xbbe <vfprintf+0x274>
 bbc:	ae c0       	rjmp	.+348    	; 0xd1a <vfprintf+0x3d0>
 bbe:	0b c0       	rjmp	.+22     	; 0xbd6 <vfprintf+0x28c>
 bc0:	80 37       	cpi	r24, 0x70	; 112
 bc2:	21 f0       	breq	.+8      	; 0xbcc <vfprintf+0x282>
 bc4:	88 37       	cpi	r24, 0x78	; 120
 bc6:	09 f0       	breq	.+2      	; 0xbca <vfprintf+0x280>
 bc8:	a8 c0       	rjmp	.+336    	; 0xd1a <vfprintf+0x3d0>
 bca:	01 c0       	rjmp	.+2      	; 0xbce <vfprintf+0x284>
 bcc:	10 61       	ori	r17, 0x10	; 16
 bce:	14 ff       	sbrs	r17, 4
 bd0:	09 c0       	rjmp	.+18     	; 0xbe4 <vfprintf+0x29a>
 bd2:	14 60       	ori	r17, 0x04	; 4
 bd4:	07 c0       	rjmp	.+14     	; 0xbe4 <vfprintf+0x29a>
 bd6:	14 ff       	sbrs	r17, 4
 bd8:	08 c0       	rjmp	.+16     	; 0xbea <vfprintf+0x2a0>
 bda:	16 60       	ori	r17, 0x06	; 6
 bdc:	06 c0       	rjmp	.+12     	; 0xbea <vfprintf+0x2a0>
 bde:	28 e0       	ldi	r18, 0x08	; 8
 be0:	30 e0       	ldi	r19, 0x00	; 0
 be2:	05 c0       	rjmp	.+10     	; 0xbee <vfprintf+0x2a4>
 be4:	20 e1       	ldi	r18, 0x10	; 16
 be6:	30 e0       	ldi	r19, 0x00	; 0
 be8:	02 c0       	rjmp	.+4      	; 0xbee <vfprintf+0x2a4>
 bea:	20 e1       	ldi	r18, 0x10	; 16
 bec:	32 e0       	ldi	r19, 0x02	; 2
 bee:	f5 01       	movw	r30, r10
 bf0:	17 ff       	sbrs	r17, 7
 bf2:	07 c0       	rjmp	.+14     	; 0xc02 <vfprintf+0x2b8>
 bf4:	60 81       	ld	r22, Z
 bf6:	71 81       	ldd	r23, Z+1	; 0x01
 bf8:	82 81       	ldd	r24, Z+2	; 0x02
 bfa:	93 81       	ldd	r25, Z+3	; 0x03
 bfc:	44 e0       	ldi	r20, 0x04	; 4
 bfe:	50 e0       	ldi	r21, 0x00	; 0
 c00:	06 c0       	rjmp	.+12     	; 0xc0e <vfprintf+0x2c4>
 c02:	60 81       	ld	r22, Z
 c04:	71 81       	ldd	r23, Z+1	; 0x01
 c06:	80 e0       	ldi	r24, 0x00	; 0
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	42 e0       	ldi	r20, 0x02	; 2
 c0c:	50 e0       	ldi	r21, 0x00	; 0
 c0e:	a4 0e       	add	r10, r20
 c10:	b5 1e       	adc	r11, r21
 c12:	a2 01       	movw	r20, r4
 c14:	0e 94 13 07 	call	0xe26	; 0xe26 <__ultoa_invert>
 c18:	d8 2e       	mov	r13, r24
 c1a:	d4 18       	sub	r13, r4
 c1c:	01 2f       	mov	r16, r17
 c1e:	0f 77       	andi	r16, 0x7F	; 127
 c20:	06 ff       	sbrs	r16, 6
 c22:	09 c0       	rjmp	.+18     	; 0xc36 <vfprintf+0x2ec>
 c24:	0e 7f       	andi	r16, 0xFE	; 254
 c26:	df 14       	cp	r13, r15
 c28:	30 f4       	brcc	.+12     	; 0xc36 <vfprintf+0x2ec>
 c2a:	04 ff       	sbrs	r16, 4
 c2c:	06 c0       	rjmp	.+12     	; 0xc3a <vfprintf+0x2f0>
 c2e:	02 fd       	sbrc	r16, 2
 c30:	04 c0       	rjmp	.+8      	; 0xc3a <vfprintf+0x2f0>
 c32:	0f 7e       	andi	r16, 0xEF	; 239
 c34:	02 c0       	rjmp	.+4      	; 0xc3a <vfprintf+0x2f0>
 c36:	1d 2d       	mov	r17, r13
 c38:	01 c0       	rjmp	.+2      	; 0xc3c <vfprintf+0x2f2>
 c3a:	1f 2d       	mov	r17, r15
 c3c:	80 2f       	mov	r24, r16
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	04 ff       	sbrs	r16, 4
 c42:	0c c0       	rjmp	.+24     	; 0xc5c <vfprintf+0x312>
 c44:	fe 01       	movw	r30, r28
 c46:	ed 0d       	add	r30, r13
 c48:	f1 1d       	adc	r31, r1
 c4a:	20 81       	ld	r18, Z
 c4c:	20 33       	cpi	r18, 0x30	; 48
 c4e:	11 f4       	brne	.+4      	; 0xc54 <vfprintf+0x30a>
 c50:	09 7e       	andi	r16, 0xE9	; 233
 c52:	09 c0       	rjmp	.+18     	; 0xc66 <vfprintf+0x31c>
 c54:	02 ff       	sbrs	r16, 2
 c56:	06 c0       	rjmp	.+12     	; 0xc64 <vfprintf+0x31a>
 c58:	1e 5f       	subi	r17, 0xFE	; 254
 c5a:	05 c0       	rjmp	.+10     	; 0xc66 <vfprintf+0x31c>
 c5c:	86 78       	andi	r24, 0x86	; 134
 c5e:	90 70       	andi	r25, 0x00	; 0
 c60:	00 97       	sbiw	r24, 0x00	; 0
 c62:	09 f0       	breq	.+2      	; 0xc66 <vfprintf+0x31c>
 c64:	1f 5f       	subi	r17, 0xFF	; 255
 c66:	80 2e       	mov	r8, r16
 c68:	99 24       	eor	r9, r9
 c6a:	03 fd       	sbrc	r16, 3
 c6c:	12 c0       	rjmp	.+36     	; 0xc92 <vfprintf+0x348>
 c6e:	00 ff       	sbrs	r16, 0
 c70:	0d c0       	rjmp	.+26     	; 0xc8c <vfprintf+0x342>
 c72:	fd 2c       	mov	r15, r13
 c74:	1e 15       	cp	r17, r14
 c76:	50 f4       	brcc	.+20     	; 0xc8c <vfprintf+0x342>
 c78:	fe 0c       	add	r15, r14
 c7a:	f1 1a       	sub	r15, r17
 c7c:	1e 2d       	mov	r17, r14
 c7e:	06 c0       	rjmp	.+12     	; 0xc8c <vfprintf+0x342>
 c80:	80 e2       	ldi	r24, 0x20	; 32
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	b3 01       	movw	r22, r6
 c86:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 c8a:	1f 5f       	subi	r17, 0xFF	; 255
 c8c:	1e 15       	cp	r17, r14
 c8e:	c0 f3       	brcs	.-16     	; 0xc80 <vfprintf+0x336>
 c90:	04 c0       	rjmp	.+8      	; 0xc9a <vfprintf+0x350>
 c92:	1e 15       	cp	r17, r14
 c94:	10 f4       	brcc	.+4      	; 0xc9a <vfprintf+0x350>
 c96:	e1 1a       	sub	r14, r17
 c98:	01 c0       	rjmp	.+2      	; 0xc9c <vfprintf+0x352>
 c9a:	ee 24       	eor	r14, r14
 c9c:	84 fe       	sbrs	r8, 4
 c9e:	0f c0       	rjmp	.+30     	; 0xcbe <vfprintf+0x374>
 ca0:	80 e3       	ldi	r24, 0x30	; 48
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	b3 01       	movw	r22, r6
 ca6:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 caa:	82 fe       	sbrs	r8, 2
 cac:	1f c0       	rjmp	.+62     	; 0xcec <vfprintf+0x3a2>
 cae:	81 fe       	sbrs	r8, 1
 cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <vfprintf+0x36e>
 cb2:	88 e5       	ldi	r24, 0x58	; 88
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	10 c0       	rjmp	.+32     	; 0xcd8 <vfprintf+0x38e>
 cb8:	88 e7       	ldi	r24, 0x78	; 120
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <vfprintf+0x38e>
 cbe:	c4 01       	movw	r24, r8
 cc0:	86 78       	andi	r24, 0x86	; 134
 cc2:	90 70       	andi	r25, 0x00	; 0
 cc4:	00 97       	sbiw	r24, 0x00	; 0
 cc6:	91 f0       	breq	.+36     	; 0xcec <vfprintf+0x3a2>
 cc8:	81 fc       	sbrc	r8, 1
 cca:	02 c0       	rjmp	.+4      	; 0xcd0 <vfprintf+0x386>
 ccc:	80 e2       	ldi	r24, 0x20	; 32
 cce:	01 c0       	rjmp	.+2      	; 0xcd2 <vfprintf+0x388>
 cd0:	8b e2       	ldi	r24, 0x2B	; 43
 cd2:	07 fd       	sbrc	r16, 7
 cd4:	8d e2       	ldi	r24, 0x2D	; 45
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	b3 01       	movw	r22, r6
 cda:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 cde:	06 c0       	rjmp	.+12     	; 0xcec <vfprintf+0x3a2>
 ce0:	80 e3       	ldi	r24, 0x30	; 48
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	b3 01       	movw	r22, r6
 ce6:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 cea:	fa 94       	dec	r15
 cec:	df 14       	cp	r13, r15
 cee:	c0 f3       	brcs	.-16     	; 0xce0 <vfprintf+0x396>
 cf0:	da 94       	dec	r13
 cf2:	f2 01       	movw	r30, r4
 cf4:	ed 0d       	add	r30, r13
 cf6:	f1 1d       	adc	r31, r1
 cf8:	80 81       	ld	r24, Z
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	b3 01       	movw	r22, r6
 cfe:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d02:	dd 20       	and	r13, r13
 d04:	a9 f7       	brne	.-22     	; 0xcf0 <vfprintf+0x3a6>
 d06:	06 c0       	rjmp	.+12     	; 0xd14 <vfprintf+0x3ca>
 d08:	80 e2       	ldi	r24, 0x20	; 32
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	b3 01       	movw	r22, r6
 d0e:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d12:	ea 94       	dec	r14
 d14:	ee 20       	and	r14, r14
 d16:	c1 f7       	brne	.-16     	; 0xd08 <vfprintf+0x3be>
 d18:	40 ce       	rjmp	.-896    	; 0x99a <vfprintf+0x50>
 d1a:	f3 01       	movw	r30, r6
 d1c:	86 81       	ldd	r24, Z+6	; 0x06
 d1e:	97 81       	ldd	r25, Z+7	; 0x07
 d20:	02 c0       	rjmp	.+4      	; 0xd26 <vfprintf+0x3dc>
 d22:	8f ef       	ldi	r24, 0xFF	; 255
 d24:	9f ef       	ldi	r25, 0xFF	; 255
 d26:	2d 96       	adiw	r28, 0x0d	; 13
 d28:	0f b6       	in	r0, 0x3f	; 63
 d2a:	f8 94       	cli
 d2c:	de bf       	out	0x3e, r29	; 62
 d2e:	0f be       	out	0x3f, r0	; 63
 d30:	cd bf       	out	0x3d, r28	; 61
 d32:	df 91       	pop	r29
 d34:	cf 91       	pop	r28
 d36:	1f 91       	pop	r17
 d38:	0f 91       	pop	r16
 d3a:	ff 90       	pop	r15
 d3c:	ef 90       	pop	r14
 d3e:	df 90       	pop	r13
 d40:	cf 90       	pop	r12
 d42:	bf 90       	pop	r11
 d44:	af 90       	pop	r10
 d46:	9f 90       	pop	r9
 d48:	8f 90       	pop	r8
 d4a:	7f 90       	pop	r7
 d4c:	6f 90       	pop	r6
 d4e:	5f 90       	pop	r5
 d50:	4f 90       	pop	r4
 d52:	3f 90       	pop	r3
 d54:	2f 90       	pop	r2
 d56:	08 95       	ret

00000d58 <calloc>:
 d58:	0f 93       	push	r16
 d5a:	1f 93       	push	r17
 d5c:	cf 93       	push	r28
 d5e:	df 93       	push	r29
 d60:	68 9f       	mul	r22, r24
 d62:	80 01       	movw	r16, r0
 d64:	69 9f       	mul	r22, r25
 d66:	10 0d       	add	r17, r0
 d68:	78 9f       	mul	r23, r24
 d6a:	10 0d       	add	r17, r0
 d6c:	11 24       	eor	r1, r1
 d6e:	c8 01       	movw	r24, r16
 d70:	0e 94 1a 03 	call	0x634	; 0x634 <malloc>
 d74:	c8 2f       	mov	r28, r24
 d76:	d9 2f       	mov	r29, r25
 d78:	20 97       	sbiw	r28, 0x00	; 0
 d7a:	31 f0       	breq	.+12     	; 0xd88 <calloc+0x30>
 d7c:	8c 2f       	mov	r24, r28
 d7e:	60 e0       	ldi	r22, 0x00	; 0
 d80:	70 e0       	ldi	r23, 0x00	; 0
 d82:	a8 01       	movw	r20, r16
 d84:	0e 94 d5 06 	call	0xdaa	; 0xdaa <memset>
 d88:	ce 01       	movw	r24, r28
 d8a:	df 91       	pop	r29
 d8c:	cf 91       	pop	r28
 d8e:	1f 91       	pop	r17
 d90:	0f 91       	pop	r16
 d92:	08 95       	ret

00000d94 <strnlen_P>:
 d94:	fc 01       	movw	r30, r24
 d96:	05 90       	lpm	r0, Z+
 d98:	61 50       	subi	r22, 0x01	; 1
 d9a:	70 40       	sbci	r23, 0x00	; 0
 d9c:	01 10       	cpse	r0, r1
 d9e:	d8 f7       	brcc	.-10     	; 0xd96 <strnlen_P+0x2>
 da0:	80 95       	com	r24
 da2:	90 95       	com	r25
 da4:	8e 0f       	add	r24, r30
 da6:	9f 1f       	adc	r25, r31
 da8:	08 95       	ret

00000daa <memset>:
 daa:	dc 01       	movw	r26, r24
 dac:	01 c0       	rjmp	.+2      	; 0xdb0 <memset+0x6>
 dae:	6d 93       	st	X+, r22
 db0:	41 50       	subi	r20, 0x01	; 1
 db2:	50 40       	sbci	r21, 0x00	; 0
 db4:	e0 f7       	brcc	.-8      	; 0xdae <memset+0x4>
 db6:	08 95       	ret

00000db8 <strnlen>:
 db8:	fc 01       	movw	r30, r24
 dba:	61 50       	subi	r22, 0x01	; 1
 dbc:	70 40       	sbci	r23, 0x00	; 0
 dbe:	01 90       	ld	r0, Z+
 dc0:	01 10       	cpse	r0, r1
 dc2:	d8 f7       	brcc	.-10     	; 0xdba <strnlen+0x2>
 dc4:	80 95       	com	r24
 dc6:	90 95       	com	r25
 dc8:	8e 0f       	add	r24, r30
 dca:	9f 1f       	adc	r25, r31
 dcc:	08 95       	ret

00000dce <fputc>:
 dce:	0f 93       	push	r16
 dd0:	1f 93       	push	r17
 dd2:	cf 93       	push	r28
 dd4:	df 93       	push	r29
 dd6:	8c 01       	movw	r16, r24
 dd8:	eb 01       	movw	r28, r22
 dda:	8b 81       	ldd	r24, Y+3	; 0x03
 ddc:	81 ff       	sbrs	r24, 1
 dde:	1b c0       	rjmp	.+54     	; 0xe16 <fputc+0x48>
 de0:	82 ff       	sbrs	r24, 2
 de2:	0d c0       	rjmp	.+26     	; 0xdfe <fputc+0x30>
 de4:	2e 81       	ldd	r18, Y+6	; 0x06
 de6:	3f 81       	ldd	r19, Y+7	; 0x07
 de8:	8c 81       	ldd	r24, Y+4	; 0x04
 dea:	9d 81       	ldd	r25, Y+5	; 0x05
 dec:	28 17       	cp	r18, r24
 dee:	39 07       	cpc	r19, r25
 df0:	64 f4       	brge	.+24     	; 0xe0a <fputc+0x3c>
 df2:	e8 81       	ld	r30, Y
 df4:	f9 81       	ldd	r31, Y+1	; 0x01
 df6:	01 93       	st	Z+, r16
 df8:	f9 83       	std	Y+1, r31	; 0x01
 dfa:	e8 83       	st	Y, r30
 dfc:	06 c0       	rjmp	.+12     	; 0xe0a <fputc+0x3c>
 dfe:	e8 85       	ldd	r30, Y+8	; 0x08
 e00:	f9 85       	ldd	r31, Y+9	; 0x09
 e02:	80 2f       	mov	r24, r16
 e04:	09 95       	icall
 e06:	00 97       	sbiw	r24, 0x00	; 0
 e08:	31 f4       	brne	.+12     	; 0xe16 <fputc+0x48>
 e0a:	8e 81       	ldd	r24, Y+6	; 0x06
 e0c:	9f 81       	ldd	r25, Y+7	; 0x07
 e0e:	01 96       	adiw	r24, 0x01	; 1
 e10:	9f 83       	std	Y+7, r25	; 0x07
 e12:	8e 83       	std	Y+6, r24	; 0x06
 e14:	02 c0       	rjmp	.+4      	; 0xe1a <fputc+0x4c>
 e16:	0f ef       	ldi	r16, 0xFF	; 255
 e18:	1f ef       	ldi	r17, 0xFF	; 255
 e1a:	c8 01       	movw	r24, r16
 e1c:	df 91       	pop	r29
 e1e:	cf 91       	pop	r28
 e20:	1f 91       	pop	r17
 e22:	0f 91       	pop	r16
 e24:	08 95       	ret

00000e26 <__ultoa_invert>:
 e26:	fa 01       	movw	r30, r20
 e28:	aa 27       	eor	r26, r26
 e2a:	28 30       	cpi	r18, 0x08	; 8
 e2c:	51 f1       	breq	.+84     	; 0xe82 <__ultoa_invert+0x5c>
 e2e:	20 31       	cpi	r18, 0x10	; 16
 e30:	81 f1       	breq	.+96     	; 0xe92 <__ultoa_invert+0x6c>
 e32:	e8 94       	clt
 e34:	6f 93       	push	r22
 e36:	6e 7f       	andi	r22, 0xFE	; 254
 e38:	6e 5f       	subi	r22, 0xFE	; 254
 e3a:	7f 4f       	sbci	r23, 0xFF	; 255
 e3c:	8f 4f       	sbci	r24, 0xFF	; 255
 e3e:	9f 4f       	sbci	r25, 0xFF	; 255
 e40:	af 4f       	sbci	r26, 0xFF	; 255
 e42:	b1 e0       	ldi	r27, 0x01	; 1
 e44:	3e d0       	rcall	.+124    	; 0xec2 <__ultoa_invert+0x9c>
 e46:	b4 e0       	ldi	r27, 0x04	; 4
 e48:	3c d0       	rcall	.+120    	; 0xec2 <__ultoa_invert+0x9c>
 e4a:	67 0f       	add	r22, r23
 e4c:	78 1f       	adc	r23, r24
 e4e:	89 1f       	adc	r24, r25
 e50:	9a 1f       	adc	r25, r26
 e52:	a1 1d       	adc	r26, r1
 e54:	68 0f       	add	r22, r24
 e56:	79 1f       	adc	r23, r25
 e58:	8a 1f       	adc	r24, r26
 e5a:	91 1d       	adc	r25, r1
 e5c:	a1 1d       	adc	r26, r1
 e5e:	6a 0f       	add	r22, r26
 e60:	71 1d       	adc	r23, r1
 e62:	81 1d       	adc	r24, r1
 e64:	91 1d       	adc	r25, r1
 e66:	a1 1d       	adc	r26, r1
 e68:	20 d0       	rcall	.+64     	; 0xeaa <__ultoa_invert+0x84>
 e6a:	09 f4       	brne	.+2      	; 0xe6e <__ultoa_invert+0x48>
 e6c:	68 94       	set
 e6e:	3f 91       	pop	r19
 e70:	2a e0       	ldi	r18, 0x0A	; 10
 e72:	26 9f       	mul	r18, r22
 e74:	11 24       	eor	r1, r1
 e76:	30 19       	sub	r19, r0
 e78:	30 5d       	subi	r19, 0xD0	; 208
 e7a:	31 93       	st	Z+, r19
 e7c:	de f6       	brtc	.-74     	; 0xe34 <__ultoa_invert+0xe>
 e7e:	cf 01       	movw	r24, r30
 e80:	08 95       	ret
 e82:	46 2f       	mov	r20, r22
 e84:	47 70       	andi	r20, 0x07	; 7
 e86:	40 5d       	subi	r20, 0xD0	; 208
 e88:	41 93       	st	Z+, r20
 e8a:	b3 e0       	ldi	r27, 0x03	; 3
 e8c:	0f d0       	rcall	.+30     	; 0xeac <__ultoa_invert+0x86>
 e8e:	c9 f7       	brne	.-14     	; 0xe82 <__ultoa_invert+0x5c>
 e90:	f6 cf       	rjmp	.-20     	; 0xe7e <__ultoa_invert+0x58>
 e92:	46 2f       	mov	r20, r22
 e94:	4f 70       	andi	r20, 0x0F	; 15
 e96:	40 5d       	subi	r20, 0xD0	; 208
 e98:	4a 33       	cpi	r20, 0x3A	; 58
 e9a:	18 f0       	brcs	.+6      	; 0xea2 <__ultoa_invert+0x7c>
 e9c:	49 5d       	subi	r20, 0xD9	; 217
 e9e:	31 fd       	sbrc	r19, 1
 ea0:	40 52       	subi	r20, 0x20	; 32
 ea2:	41 93       	st	Z+, r20
 ea4:	02 d0       	rcall	.+4      	; 0xeaa <__ultoa_invert+0x84>
 ea6:	a9 f7       	brne	.-22     	; 0xe92 <__ultoa_invert+0x6c>
 ea8:	ea cf       	rjmp	.-44     	; 0xe7e <__ultoa_invert+0x58>
 eaa:	b4 e0       	ldi	r27, 0x04	; 4
 eac:	a6 95       	lsr	r26
 eae:	97 95       	ror	r25
 eb0:	87 95       	ror	r24
 eb2:	77 95       	ror	r23
 eb4:	67 95       	ror	r22
 eb6:	ba 95       	dec	r27
 eb8:	c9 f7       	brne	.-14     	; 0xeac <__ultoa_invert+0x86>
 eba:	00 97       	sbiw	r24, 0x00	; 0
 ebc:	61 05       	cpc	r22, r1
 ebe:	71 05       	cpc	r23, r1
 ec0:	08 95       	ret
 ec2:	9b 01       	movw	r18, r22
 ec4:	ac 01       	movw	r20, r24
 ec6:	0a 2e       	mov	r0, r26
 ec8:	06 94       	lsr	r0
 eca:	57 95       	ror	r21
 ecc:	47 95       	ror	r20
 ece:	37 95       	ror	r19
 ed0:	27 95       	ror	r18
 ed2:	ba 95       	dec	r27
 ed4:	c9 f7       	brne	.-14     	; 0xec8 <__ultoa_invert+0xa2>
 ed6:	62 0f       	add	r22, r18
 ed8:	73 1f       	adc	r23, r19
 eda:	84 1f       	adc	r24, r20
 edc:	95 1f       	adc	r25, r21
 ede:	a0 1d       	adc	r26, r0
 ee0:	08 95       	ret

00000ee2 <_exit>:
 ee2:	f8 94       	cli

00000ee4 <__stop_program>:
 ee4:	ff cf       	rjmp	.-2      	; 0xee4 <__stop_program>
