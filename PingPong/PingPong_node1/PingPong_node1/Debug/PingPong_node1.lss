
PingPong_node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  00001db2  00001e46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001db2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800280  00800280  00001fc6  2**0
                  ALLOC
  3 .stab         00000d74  00000000  00000000  00001fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002e6  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003022  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000368  00000000  00000000  00003051  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003539  00000000  00000000  000033b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015d8  00000000  00000000  000068f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001c6c  00000000  00000000  00007eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000784  00000000  00000000  00009b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a32  00000000  00000000  0000a2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002246  00000000  00000000  0000acee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002d0  00000000  00000000  0000cf34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	printf("SRAM[%X] = %02X \n\r", address, ext_ram[address]);
	
	return 0;
}

void SRAM_test(void) {
       0:	0c 94 84 02 	jmp	0x508	; 0x508 <__ctors_end>
       4:	0c 94 ac 03 	jmp	0x758	; 0x758 <__vector_1>
       8:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
       c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
	uint16_t i, werrors, rerrors;
	werrors = 0;
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");
      10:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      14:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
void SRAM_test(void) {
	//Start address for the SRAM
	volatile char *ext_ram = (char *) 0x1800;

	uint16_t i, werrors, rerrors;
	werrors = 0;
      18:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
      1c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
		testvalue = ~(i % 256);
		ext_ram[i] = testvalue;
		if (ext_ram[i] != testvalue) {
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
      20:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      24:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      28:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
	printf("SRAM[%X] = %02X \n\r", address, ext_ram[address]);
	
	return 0;
}

void SRAM_test(void) {
      2c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      30:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		ext_ram[i] = testvalue;
      34:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
		if (ext_ram[i] != testvalue) {
      38:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
      3c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      40:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      44:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      48:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      4c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      50:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
			werrors++;
      54:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      58:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      5c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      60:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      64:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
      68:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      6c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>

00000070 <circles>:
	...
		}
	}

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		if (ext_ram[i] != testvalue) {
      90:	06 09 09 06 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			rerrors++;
      b0:	0c 12 21 21 12 0c 00 00 00 00 00 00 00 00 00 00     ..!!............
	...
		}
	}

	printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
      d0:	3c 42 81 81 81 81 42 3c 00 00 00 00 00 00 00 00     <B....B<........
	...
      f0:	78 84 02 01 01 01 01 02 84 78 00 00 00 00 00 00     x........x......
     100:	00 00 01 02 02 02 02 01 00 00 00 00 00 00 00 00     ................
     110:	f8 04 02 01 01 01 01 01 01 02 04 f8 00 00 00 00     ................
     120:	01 02 04 08 08 08 08 08 08 04 02 01 00 00 00 00     ................
     130:	f0 08 04 02 01 01 01 01 01 01 02 04 08 f0 00 00     ................
     140:	03 04 08 10 20 20 20 20 20 20 10 08 04 03 00 00     ....      ......

00000150 <mario>:
     150:	00 00 00 00 f0 fc ff ff ff ff ff ff ff ff ff ff     ................
     160:	fc f0 f0 f0 f0 f0 00 00 00 00 f0 fc ff ff ff ff     ................
     170:	ff ff ff ff ff ff ff ff ff ff f0 f0 f0 c0 00 00     ................
     180:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     190:	ff ff ff ff ff 3f 0f 0f 00 00 00 00 c0 f0 ff ff     .....?..........
     1a0:	ff ff ff ff ff ff ff ff 0f 0f 0f 03 00 00 00 00     ................
     1b0:	c0 f0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1c0:	ff ff ff ff ff fc f0 c0 ff ff ff 3f 3f ff ff ff     ...........??...
     1d0:	ff ff ff ff ff ff ff ff ff ff ff 3f 3f ff ff ff     ...........??...
     1e0:	0f 0f 0f 0f c0 ff ff ff ff 3f 0f 0f 0f 0f 3f ff     .........?....?.
     1f0:	ff ff ff c0 0f 0f 0f 0f f0 fc ff ff ff ff ff ff     ................
	...
     208:	ff ff ff ff ff ff fc f0                             ........

00000210 <font>:
	...
     218:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     228:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     238:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     248:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     258:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     268:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     278:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     288:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     298:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2a8:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2b8:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2c8:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2d8:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     2e8:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     2f8:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     308:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     318:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     328:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     338:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     348:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     358:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     368:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     378:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     388:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     398:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3a8:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3b8:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3c8:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3d8:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     3e8:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     3f8:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     408:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     418:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     428:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     438:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     448:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     458:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     468:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     478:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     488:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     498:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4a8:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4b8:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4c8:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4d8:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     4e8:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     4f8:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

00000508 <__ctors_end>:
     508:	11 24       	eor	r1, r1
     50a:	1f be       	out	0x3f, r1	; 63
     50c:	cf ef       	ldi	r28, 0xFF	; 255
     50e:	d4 e0       	ldi	r29, 0x04	; 4
     510:	de bf       	out	0x3e, r29	; 62
     512:	cd bf       	out	0x3d, r28	; 61

00000514 <__do_copy_data>:
     514:	12 e0       	ldi	r17, 0x02	; 2
     516:	a0 e0       	ldi	r26, 0x00	; 0
     518:	b1 e0       	ldi	r27, 0x01	; 1
     51a:	e2 eb       	ldi	r30, 0xB2	; 178
     51c:	fd e1       	ldi	r31, 0x1D	; 29
     51e:	02 c0       	rjmp	.+4      	; 0x524 <__do_copy_data+0x10>
     520:	05 90       	lpm	r0, Z+
     522:	0d 92       	st	X+, r0
     524:	a0 38       	cpi	r26, 0x80	; 128
     526:	b1 07       	cpc	r27, r17
     528:	d9 f7       	brne	.-10     	; 0x520 <__do_copy_data+0xc>

0000052a <__do_clear_bss>:
     52a:	22 e0       	ldi	r18, 0x02	; 2
     52c:	a0 e8       	ldi	r26, 0x80	; 128
     52e:	b2 e0       	ldi	r27, 0x02	; 2
     530:	01 c0       	rjmp	.+2      	; 0x534 <.do_clear_bss_start>

00000532 <.do_clear_bss_loop>:
     532:	1d 92       	st	X+, r1

00000534 <.do_clear_bss_start>:
     534:	a3 3b       	cpi	r26, 0xB3	; 179
     536:	b2 07       	cpc	r27, r18
     538:	e1 f7       	brne	.-8      	; 0x532 <.do_clear_bss_loop>
     53a:	0e 94 b6 04 	call	0x96c	; 0x96c <main>
     53e:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <_exit>

00000542 <__bad_interrupt>:
     542:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000546 <ADC_init>:
#include <stdio.h>
#include "setup.h"

int ADC_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
     546:	85 b7       	in	r24, 0x35	; 53
     548:	80 68       	ori	r24, 0x80	; 128
     54a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     54c:	80 b7       	in	r24, 0x30	; 48
     54e:	80 62       	ori	r24, 0x20	; 32
     550:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	DDRE &= ~(1<<PINE0);
     552:	30 98       	cbi	0x06, 0	; 6
	
	return 0;
}
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	08 95       	ret

0000055a <ADC_read>:

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
     55a:	84 30       	cpi	r24, 0x04	; 4
     55c:	40 f4       	brcc	.+16     	; 0x56e <ADC_read+0x14>
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
     55e:	84 60       	ori	r24, 0x04	; 4
     560:	80 93 00 14 	sts	0x1400, r24
	
	//Wait for the data to be read (this can be done with an interrupt)
	while(test_bit(PINE, PINE0));
     564:	28 99       	sbic	0x05, 0	; 5
     566:	fe cf       	rjmp	.-4      	; 0x564 <ADC_read+0xa>
	
	return *adc;
     568:	80 91 00 14 	lds	r24, 0x1400
     56c:	08 95       	ret

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
     56e:	80 e0       	ldi	r24, 0x00	; 0
	
	//Wait for the data to be read (this can be done with an interrupt)
	while(test_bit(PINE, PINE0));
	
	return *adc;
     570:	08 95       	ret

00000572 <CAN_init>:

uint8_t rx_flag = 0;

int CAN_init(void) {
	//Enter config mode
	mcp2515_init();
     572:	0e 94 7f 06 	call	0xcfe	; 0xcfe <mcp2515_init>
	
	//TX0 - Set transmit priority (0 - lowest)
	//mcp2515_bit_modify(MCP_TXB0CTRL, 0b00000011, 0);
			
	//RX0 - Turn masks/filters off, rollover disabled
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100100, 0xFF);
     576:	4f ef       	ldi	r20, 0xFF	; 255
     578:	64 e6       	ldi	r22, 0x64	; 100
     57a:	80 e6       	ldi	r24, 0x60	; 96
     57c:	0e 94 47 06 	call	0xc8e	; 0xc8e <mcp2515_bit_modify>
	
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	60 ee       	ldi	r22, 0xE0	; 224
     584:	8f e0       	ldi	r24, 0x0F	; 15
     586:	0e 94 47 06 	call	0xc8e	; 0xc8e <mcp2515_bit_modify>
	
	//Enable interrupt when message is sent (TX0IE = 1)
	//mcp2515_bit_modify(MCP_CANINTE, 0x04, 1);
	
	//Enable interrupt when message is received (RX0IE = 1)
	mcp2515_bit_modify(MCP_CANINTE, 0x01, 1);
     58a:	41 e0       	ldi	r20, 0x01	; 1
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	8b e2       	ldi	r24, 0x2B	; 43
     590:	0e 94 47 06 	call	0xc8e	; 0xc8e <mcp2515_bit_modify>

	return 0;
}
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	08 95       	ret

0000059a <CAN_error>:
	
	return 0;
}

int CAN_error(void) {
	uint8_t error = mcp2515_read(MCP_TXB0CTRL);
     59a:	80 e3       	ldi	r24, 0x30	; 48
     59c:	0e 94 6d 06 	call	0xcda	; 0xcda <mcp2515_read>
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
     5a0:	84 fd       	sbrc	r24, 4
     5a2:	05 c0       	rjmp	.+10     	; 0x5ae <CAN_error+0x14>
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
     5a4:	85 ff       	sbrs	r24, 5
     5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <CAN_error+0x1a>
     5a8:	2e ef       	ldi	r18, 0xFE	; 254
     5aa:	3f ef       	ldi	r19, 0xFF	; 255
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <CAN_error+0x1e>

int CAN_error(void) {
	uint8_t error = mcp2515_read(MCP_TXB0CTRL);
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
     5ae:	2f ef       	ldi	r18, 0xFF	; 255
     5b0:	3f ef       	ldi	r19, 0xFF	; 255
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <CAN_error+0x1e>
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
	
	return 0;
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
}
     5b8:	82 2f       	mov	r24, r18
     5ba:	93 2f       	mov	r25, r19
     5bc:	08 95       	ret

000005be <CAN_transmit_complete>:


int CAN_transmit_complete(void) {
	//Check if TX buffer is not pending transmission (TXREQ = 0)
	if (test_bit(mcp2515_read(MCP_TXB0CTRL), 3)) {
     5be:	80 e3       	ldi	r24, 0x30	; 48
     5c0:	0e 94 6d 06 	call	0xcda	; 0xcda <mcp2515_read>
     5c4:	86 95       	lsr	r24
     5c6:	86 95       	lsr	r24
     5c8:	86 95       	lsr	r24
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	89 27       	eor	r24, r25
     5ce:	81 70       	andi	r24, 0x01	; 1
		return 0;
	} else {
		return 1;
	}
}
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	08 95       	ret

000005d4 <CAN_message_send>:
	mcp2515_bit_modify(MCP_CANINTE, 0x01, 1);

	return 0;
}

int CAN_message_send(CAN_message_t* message) {
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	ec 01       	movw	r28, r24
	uint8_t i;
	
	//Check if there is no pending transmission
	if (CAN_transmit_complete()) {
     5dc:	0e 94 df 02 	call	0x5be	; 0x5be <CAN_transmit_complete>
     5e0:	89 2b       	or	r24, r25
     5e2:	99 f1       	breq	.+102    	; 0x64a <CAN_message_send+0x76>
		
		//Set the message id (use standard identifier)
		mcp2515_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     5e4:	68 81       	ld	r22, Y
     5e6:	79 81       	ldd	r23, Y+1	; 0x01
     5e8:	75 95       	asr	r23
     5ea:	67 95       	ror	r22
     5ec:	75 95       	asr	r23
     5ee:	67 95       	ror	r22
     5f0:	75 95       	asr	r23
     5f2:	67 95       	ror	r22
     5f4:	81 e3       	ldi	r24, 0x31	; 49
     5f6:	0e 94 1f 06 	call	0xc3e	; 0xc3e <mcp2515_write>
		mcp2515_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     5fa:	68 81       	ld	r22, Y
     5fc:	79 81       	ldd	r23, Y+1	; 0x01
     5fe:	66 0f       	add	r22, r22
     600:	77 1f       	adc	r23, r23
     602:	62 95       	swap	r22
     604:	72 95       	swap	r23
     606:	70 7f       	andi	r23, 0xF0	; 240
     608:	76 27       	eor	r23, r22
     60a:	60 7f       	andi	r22, 0xF0	; 240
     60c:	76 27       	eor	r23, r22
     60e:	82 e3       	ldi	r24, 0x32	; 50
     610:	0e 94 1f 06 	call	0xc3e	; 0xc3e <mcp2515_write>
		
		//Set data length and use data frame (RTR = 0)
		mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));
     614:	6a 81       	ldd	r22, Y+2	; 0x02
     616:	6f 70       	andi	r22, 0x0F	; 15
     618:	85 e3       	ldi	r24, 0x35	; 53
     61a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <mcp2515_write>

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
     61e:	8a 81       	ldd	r24, Y+2	; 0x02
     620:	88 23       	and	r24, r24
     622:	69 f0       	breq	.+26     	; 0x63e <CAN_message_send+0x6a>
     624:	10 e0       	ldi	r17, 0x00	; 0
			mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
     626:	fe 01       	movw	r30, r28
     628:	e1 0f       	add	r30, r17
     62a:	f1 1d       	adc	r31, r1
     62c:	63 81       	ldd	r22, Z+3	; 0x03
     62e:	81 2f       	mov	r24, r17
     630:	8a 5c       	subi	r24, 0xCA	; 202
     632:	0e 94 1f 06 	call	0xc3e	; 0xc3e <mcp2515_write>
		
		//Set data length and use data frame (RTR = 0)
		mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
     636:	1f 5f       	subi	r17, 0xFF	; 255
     638:	8a 81       	ldd	r24, Y+2	; 0x02
     63a:	18 17       	cp	r17, r24
     63c:	a0 f3       	brcs	.-24     	; 0x626 <CAN_message_send+0x52>
			mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
		}
		
		//Request to send via TX0
		mcp2515_request_to_send(1);
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 35 06 	call	0xc6a	; 0xc6a <mcp2515_request_to_send>
		if (CAN_error() < 0) {
			return -1;
		}
	}
	
	return 0;
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	0a c0       	rjmp	.+20     	; 0x65e <CAN_message_send+0x8a>
		
		//Request to send via TX0
		mcp2515_request_to_send(1);
		
	} else {
		if (CAN_error() < 0) {
     64a:	0e 94 cd 02 	call	0x59a	; 0x59a <CAN_error>
			return -1;
     64e:	90 95       	com	r25
     650:	29 2f       	mov	r18, r25
     652:	22 1f       	adc	r18, r18
     654:	22 27       	eor	r18, r18
     656:	22 1f       	adc	r18, r18
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	21 50       	subi	r18, 0x01	; 1
     65c:	31 09       	sbc	r19, r1
		}
	}
	
	return 0;
}
     65e:	82 2f       	mov	r24, r18
     660:	93 2f       	mov	r25, r19
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	08 95       	ret

0000066a <CAN_int_vect>:
	}
}

int CAN_int_vect(void) {
	//Clear interrupt flag
	mcp2515_bit_modify(MCP_CANINTF, 0x01, 0);
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	8c e2       	ldi	r24, 0x2C	; 44
     670:	0e 94 47 06 	call	0xc8e	; 0xc8e <mcp2515_bit_modify>
	rx_flag = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	80 93 80 02 	sts	0x0280, r24

	return 0;
}
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	08 95       	ret

00000680 <CAN_data_receive>:

CAN_message_t CAN_data_receive(void) {
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	2b 97       	sbiw	r28, 0x0b	; 11
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	7c 01       	movw	r14, r24
	uint8_t i;
	CAN_message_t message;
	
	//Check if RX buffer has a message
	if (rx_flag == 1) {
     6a8:	90 91 80 02 	lds	r25, 0x0280
     6ac:	91 30       	cpi	r25, 0x01	; 1
     6ae:	99 f5       	brne	.+102    	; 0x716 <CAN_data_receive+0x96>
		
		//Get message id
		message.id  = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     6b0:	81 e6       	ldi	r24, 0x61	; 97
     6b2:	0e 94 6d 06 	call	0xcda	; 0xcda <mcp2515_read>
     6b6:	c8 2e       	mov	r12, r24
     6b8:	82 e6       	ldi	r24, 0x62	; 98
     6ba:	0e 94 6d 06 	call	0xcda	; 0xcda <mcp2515_read>
     6be:	82 95       	swap	r24
     6c0:	86 95       	lsr	r24
     6c2:	87 70       	andi	r24, 0x07	; 7
     6c4:	d1 2c       	mov	r13, r1
     6c6:	cc 0c       	add	r12, r12
     6c8:	dd 1c       	adc	r13, r13
     6ca:	cc 0c       	add	r12, r12
     6cc:	dd 1c       	adc	r13, r13
     6ce:	cc 0c       	add	r12, r12
     6d0:	dd 1c       	adc	r13, r13
     6d2:	c8 2a       	or	r12, r24
	
		//Get message length
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
     6d4:	85 e6       	ldi	r24, 0x65	; 101
     6d6:	0e 94 6d 06 	call	0xcda	; 0xcda <mcp2515_read>
     6da:	0f 2e       	mov	r0, r31
     6dc:	ff e0       	ldi	r31, 0x0F	; 15
     6de:	9f 2e       	mov	r9, r31
     6e0:	f0 2d       	mov	r31, r0
     6e2:	98 22       	and	r9, r24
	
		//Get message data
		for(i = 0; i < message.length; i++) {
     6e4:	a9 f0       	breq	.+42     	; 0x710 <CAN_data_receive+0x90>
     6e6:	8e 01       	movw	r16, r28
     6e8:	0c 5f       	subi	r16, 0xFC	; 252
     6ea:	1f 4f       	sbci	r17, 0xFF	; 255
	rx_flag = 1;

	return 0;
}

CAN_message_t CAN_data_receive(void) {
     6ec:	0f 2e       	mov	r0, r31
     6ee:	f6 e6       	ldi	r31, 0x66	; 102
     6f0:	af 2e       	mov	r10, r31
     6f2:	f0 2d       	mov	r31, r0
     6f4:	a9 0c       	add	r10, r9
     6f6:	0f 2e       	mov	r0, r31
     6f8:	f6 e6       	ldi	r31, 0x66	; 102
     6fa:	bf 2e       	mov	r11, r31
     6fc:	f0 2d       	mov	r31, r0
		//Get message length
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
	
		//Get message data
		for(i = 0; i < message.length; i++) {
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     6fe:	8b 2d       	mov	r24, r11
     700:	0e 94 6d 06 	call	0xcda	; 0xcda <mcp2515_read>
     704:	f8 01       	movw	r30, r16
     706:	81 93       	st	Z+, r24
     708:	8f 01       	movw	r16, r30
     70a:	b3 94       	inc	r11
	
		//Get message length
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
	
		//Get message data
		for(i = 0; i < message.length; i++) {
     70c:	ba 10       	cpse	r11, r10
     70e:	f7 cf       	rjmp	.-18     	; 0x6fe <CAN_data_receive+0x7e>
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}
		
		//Clear interrupt flag
		rx_flag = 0;
     710:	10 92 80 02 	sts	0x0280, r1
     714:	03 c0       	rjmp	.+6      	; 0x71c <CAN_data_receive+0x9c>
				
	} else {
		//Message not received
		message.id = -1;
     716:	cc 24       	eor	r12, r12
     718:	ca 94       	dec	r12
     71a:	dc 2c       	mov	r13, r12
	}
	
	return message;
     71c:	da 82       	std	Y+2, r13	; 0x02
     71e:	c9 82       	std	Y+1, r12	; 0x01
     720:	9b 82       	std	Y+3, r9	; 0x03
     722:	8b e0       	ldi	r24, 0x0B	; 11
     724:	fe 01       	movw	r30, r28
     726:	31 96       	adiw	r30, 0x01	; 1
     728:	d7 01       	movw	r26, r14
     72a:	01 90       	ld	r0, Z+
     72c:	0d 92       	st	X+, r0
     72e:	8a 95       	dec	r24
     730:	e1 f7       	brne	.-8      	; 0x72a <CAN_data_receive+0xaa>
}
     732:	c7 01       	movw	r24, r14
     734:	2b 96       	adiw	r28, 0x0b	; 11
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	df 90       	pop	r13
     74e:	cf 90       	pop	r12
     750:	bf 90       	pop	r11
     752:	af 90       	pop	r10
     754:	9f 90       	pop	r9
     756:	08 95       	ret

00000758 <__vector_1>:

//Interrupt service routine for CAN bus
ISR(INT0_vect) {
     758:	1f 92       	push	r1
     75a:	0f 92       	push	r0
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	0f 92       	push	r0
     760:	11 24       	eor	r1, r1
     762:	2f 93       	push	r18
     764:	3f 93       	push	r19
     766:	4f 93       	push	r20
     768:	5f 93       	push	r21
     76a:	6f 93       	push	r22
     76c:	7f 93       	push	r23
     76e:	8f 93       	push	r24
     770:	9f 93       	push	r25
     772:	af 93       	push	r26
     774:	bf 93       	push	r27
     776:	ef 93       	push	r30
     778:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e3       	ldi	r25, 0x30	; 48
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <__vector_1+0x26>
     782:	00 c0       	rjmp	.+0      	; 0x784 <__vector_1+0x2c>
	_delay_ms(10);
	CAN_int_vect();
     784:	0e 94 35 03 	call	0x66a	; 0x66a <CAN_int_vect>
     788:	ff 91       	pop	r31
     78a:	ef 91       	pop	r30
     78c:	bf 91       	pop	r27
     78e:	af 91       	pop	r26
     790:	9f 91       	pop	r25
     792:	8f 91       	pop	r24
     794:	7f 91       	pop	r23
     796:	6f 91       	pop	r22
     798:	5f 91       	pop	r21
     79a:	4f 91       	pop	r20
     79c:	3f 91       	pop	r19
     79e:	2f 91       	pop	r18
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <JOY_calibrate>:
	
	return 0;
}

int JOY_calibrate(void) {
	mid_x = ADC_read(0);
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0e 94 ad 02 	call	0x55a	; 0x55a <ADC_read>
     7b0:	80 93 82 02 	sts	0x0282, r24
	mid_y = ADC_read(1);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 ad 02 	call	0x55a	; 0x55a <ADC_read>
     7ba:	80 93 81 02 	sts	0x0281, r24
	
	return 0;
}
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	08 95       	ret

000007c4 <JOY_init>:

uint8_t mid_x, mid_y;

int JOY_init(void) {
	//Setup the ADC
	ADC_init();
     7c4:	0e 94 a3 02 	call	0x546	; 0x546 <ADC_init>
	
	//Set button pins to input
	DDRB &= ~(1<<PINB0) & ~(1<<PINB1) & ~(1<<PINB2);
     7c8:	87 b3       	in	r24, 0x17	; 23
     7ca:	88 7f       	andi	r24, 0xF8	; 248
     7cc:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PINB0) | (1<<PINB1) | (1<<PINB2);		//Enable pull-up resistors
     7ce:	88 b3       	in	r24, 0x18	; 24
     7d0:	87 60       	ori	r24, 0x07	; 7
     7d2:	88 bb       	out	0x18, r24	; 24
	
	//Calibrate joystick
	JOY_calibrate();
     7d4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <JOY_calibrate>
	
	return 0;
}
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	08 95       	ret

000007de <JOY_button>:
	
	return 0;
}

int JOY_button(int button) {
	switch (button) {
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	91 05       	cpc	r25, r1
     7e2:	61 f0       	breq	.+24     	; 0x7fc <JOY_button+0x1e>
     7e4:	82 30       	cpi	r24, 0x02	; 2
     7e6:	91 05       	cpc	r25, r1
     7e8:	79 f0       	breq	.+30     	; 0x808 <JOY_button+0x2a>
     7ea:	89 2b       	or	r24, r25
     7ec:	99 f4       	brne	.+38     	; 0x814 <JOY_button+0x36>
		case 0: //Joystick button
			if(!test_bit(PINB, PINB0)) return 1;
     7ee:	96 b3       	in	r25, 0x16	; 22
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	89 27       	eor	r24, r25
     7f4:	28 2f       	mov	r18, r24
     7f6:	21 70       	andi	r18, 0x01	; 1
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	0e c0       	rjmp	.+28     	; 0x818 <JOY_button+0x3a>
			break;
		case 1: //Left touch button
			if(test_bit(PINB, PINB1)) return 1;
     7fc:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button(int button) {
	switch (button) {
		case 0: //Joystick button
			if(!test_bit(PINB, PINB0)) return 1;
     7fe:	81 fb       	bst	r24, 1
     800:	22 27       	eor	r18, r18
     802:	20 f9       	bld	r18, 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	08 c0       	rjmp	.+16     	; 0x818 <JOY_button+0x3a>
			break;
		case 1: //Left touch button
			if(test_bit(PINB, PINB1)) return 1;
			break;
		case 2: //Right touch button
			if(test_bit(PINB, PINB2)) return 1;
     808:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button(int button) {
	switch (button) {
		case 0: //Joystick button
			if(!test_bit(PINB, PINB0)) return 1;
     80a:	82 fb       	bst	r24, 2
     80c:	22 27       	eor	r18, r18
     80e:	20 f9       	bld	r18, 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	02 c0       	rjmp	.+4      	; 0x818 <JOY_button+0x3a>
			if(test_bit(PINB, PINB2)) return 1;
			break;
		default:
			break;
	}
	return 0;
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
}
     818:	82 2f       	mov	r24, r18
     81a:	93 2f       	mov	r25, r19
     81c:	08 95       	ret

0000081e <JOY_getPosition>:

joy_position JOY_getPosition(void) {
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
	joy_position position;
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(0);
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 ad 02 	call	0x55a	; 0x55a <ADC_read>
     828:	d8 2f       	mov	r29, r24
	//Read position y from channel 1
	y = ADC_read(1);
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	0e 94 ad 02 	call	0x55a	; 0x55a <ADC_read>
     830:	c8 2f       	mov	r28, r24
	
	//Calculate position x percentage
	if(x > mid_x) {
     832:	20 91 82 02 	lds	r18, 0x0282
     836:	2d 17       	cp	r18, r29
     838:	a0 f4       	brcc	.+40     	; 0x862 <JOY_getPosition+0x44>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	6d 2f       	mov	r22, r29
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	62 1b       	sub	r22, r18
     842:	73 0b       	sbc	r23, r19
     844:	84 e6       	ldi	r24, 0x64	; 100
     846:	86 9f       	mul	r24, r22
     848:	a0 01       	movw	r20, r0
     84a:	87 9f       	mul	r24, r23
     84c:	50 0d       	add	r21, r0
     84e:	11 24       	eor	r1, r1
     850:	6f ef       	ldi	r22, 0xFF	; 255
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	62 1b       	sub	r22, r18
     856:	73 0b       	sbc	r23, r19
     858:	ca 01       	movw	r24, r20
     85a:	0e 94 37 0a 	call	0x146e	; 0x146e <__divmodhi4>
     85e:	e6 2f       	mov	r30, r22
     860:	14 c0       	rjmp	.+40     	; 0x88a <JOY_getPosition+0x6c>
	} else if (x < mid_x) {
     862:	d2 17       	cp	r29, r18
     864:	88 f4       	brcc	.+34     	; 0x888 <JOY_getPosition+0x6a>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
     866:	62 2f       	mov	r22, r18
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	ed 2f       	mov	r30, r29
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	e6 1b       	sub	r30, r22
     870:	f7 0b       	sbc	r31, r23
     872:	84 e6       	ldi	r24, 0x64	; 100
     874:	8e 9f       	mul	r24, r30
     876:	90 01       	movw	r18, r0
     878:	8f 9f       	mul	r24, r31
     87a:	30 0d       	add	r19, r0
     87c:	11 24       	eor	r1, r1
     87e:	c9 01       	movw	r24, r18
     880:	0e 94 37 0a 	call	0x146e	; 0x146e <__divmodhi4>
     884:	e6 2f       	mov	r30, r22
     886:	01 c0       	rjmp	.+2      	; 0x88a <JOY_getPosition+0x6c>
	} else {
		position.x = 0;
     888:	e0 e0       	ldi	r30, 0x00	; 0
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
     88a:	20 91 81 02 	lds	r18, 0x0281
     88e:	2c 17       	cp	r18, r28
     890:	a0 f4       	brcc	.+40     	; 0x8ba <JOY_getPosition+0x9c>
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	4c 2f       	mov	r20, r28
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	42 1b       	sub	r20, r18
     89a:	53 0b       	sbc	r21, r19
     89c:	64 e6       	ldi	r22, 0x64	; 100
     89e:	64 9f       	mul	r22, r20
     8a0:	c0 01       	movw	r24, r0
     8a2:	65 9f       	mul	r22, r21
     8a4:	90 0d       	add	r25, r0
     8a6:	11 24       	eor	r1, r1
     8a8:	4f ef       	ldi	r20, 0xFF	; 255
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	ba 01       	movw	r22, r20
     8ae:	62 1b       	sub	r22, r18
     8b0:	73 0b       	sbc	r23, r19
     8b2:	0e 94 37 0a 	call	0x146e	; 0x146e <__divmodhi4>
     8b6:	76 2f       	mov	r23, r22
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <JOY_getPosition+0xc2>
	} else if (y < mid_y) {
     8ba:	c2 17       	cp	r28, r18
     8bc:	80 f4       	brcc	.+32     	; 0x8de <JOY_getPosition+0xc0>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	4c 2f       	mov	r20, r28
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	42 1b       	sub	r20, r18
     8c6:	53 0b       	sbc	r21, r19
     8c8:	64 e6       	ldi	r22, 0x64	; 100
     8ca:	64 9f       	mul	r22, r20
     8cc:	c0 01       	movw	r24, r0
     8ce:	65 9f       	mul	r22, r21
     8d0:	90 0d       	add	r25, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	b9 01       	movw	r22, r18
     8d6:	0e 94 37 0a 	call	0x146e	; 0x146e <__divmodhi4>
     8da:	76 2f       	mov	r23, r22
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <JOY_getPosition+0xc2>
	} else {
		position.y = 0;
     8de:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	return position;
}
     8e0:	6e 2f       	mov	r22, r30
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <JOY_getDirection>:

joy_position JOY_getDirection(void) {
	joy_position position;
	
	//Get actual position of joystick
	position = JOY_getPosition();
     8ec:	0e 94 0f 04 	call	0x81e	; 0x81e <JOY_getPosition>
     8f0:	46 2f       	mov	r20, r22
     8f2:	57 2f       	mov	r21, r23
     8f4:	28 2f       	mov	r18, r24
     8f6:	39 2f       	mov	r19, r25
	
	if(position.x < 0) {
     8f8:	66 23       	and	r22, r22
     8fa:	1c f0       	brlt	.+6      	; 0x902 <JOY_getDirection+0x16>
		position.direction = "LEFT";
	} else if(position.x > 0) {
     8fc:	16 16       	cp	r1, r22
     8fe:	24 f0       	brlt	.+8      	; 0x908 <JOY_getDirection+0x1c>
     900:	05 c0       	rjmp	.+10     	; 0x90c <JOY_getDirection+0x20>
	
	//Get actual position of joystick
	position = JOY_getPosition();
	
	if(position.x < 0) {
		position.direction = "LEFT";
     902:	2a e0       	ldi	r18, 0x0A	; 10
     904:	31 e0       	ldi	r19, 0x01	; 1
     906:	02 c0       	rjmp	.+4      	; 0x90c <JOY_getDirection+0x20>
	} else if(position.x > 0) {
		position.direction = "RIGHT";
     908:	2f e0       	ldi	r18, 0x0F	; 15
     90a:	31 e0       	ldi	r19, 0x01	; 1
	}
	
	if(position.y < 0) {
     90c:	55 23       	and	r21, r21
     90e:	1c f0       	brlt	.+6      	; 0x916 <JOY_getDirection+0x2a>
		position.direction = "DOWN";
	} else if(position.y > 0) {
     910:	15 16       	cp	r1, r21
     912:	24 f0       	brlt	.+8      	; 0x91c <JOY_getDirection+0x30>
     914:	05 c0       	rjmp	.+10     	; 0x920 <JOY_getDirection+0x34>
	} else if(position.x > 0) {
		position.direction = "RIGHT";
	}
	
	if(position.y < 0) {
		position.direction = "DOWN";
     916:	25 e1       	ldi	r18, 0x15	; 21
     918:	31 e0       	ldi	r19, 0x01	; 1
     91a:	02 c0       	rjmp	.+4      	; 0x920 <JOY_getDirection+0x34>
	} else if(position.y > 0) {
		position.direction = "UP";
     91c:	2a e1       	ldi	r18, 0x1A	; 26
     91e:	31 e0       	ldi	r19, 0x01	; 1
	}
	
	if(position.x == 0 && position.y == 0){
     920:	41 11       	cpse	r20, r1
     922:	04 c0       	rjmp	.+8      	; 0x92c <JOY_getDirection+0x40>
     924:	51 11       	cpse	r21, r1
     926:	02 c0       	rjmp	.+4      	; 0x92c <JOY_getDirection+0x40>
		position.direction = "NEUTRAL";
     928:	2d e1       	ldi	r18, 0x1D	; 29
     92a:	31 e0       	ldi	r19, 0x01	; 1
	}
	
	return position;
}
     92c:	82 2f       	mov	r24, r18
     92e:	93 2f       	mov	r25, r19
     930:	08 95       	ret

00000932 <JOY_getSliderPosition>:

slider_position JOY_getSliderPosition(void) {
     932:	cf 93       	push	r28
	slider_position position;
	uint8_t l, r;
	
	//Read left slider from channel 2
	l = ADC_read(2);
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	0e 94 ad 02 	call	0x55a	; 0x55a <ADC_read>
     93a:	c8 2f       	mov	r28, r24
	//Read right slider from channel 3
	r = ADC_read(3);
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	0e 94 ad 02 	call	0x55a	; 0x55a <ADC_read>
     942:	f8 2f       	mov	r31, r24
	
	//Calculate position percentage
	position.left = 100 * l / 0xFF;
     944:	e4 e6       	ldi	r30, 0x64	; 100
     946:	ec 9f       	mul	r30, r28
     948:	c0 01       	movw	r24, r0
     94a:	11 24       	eor	r1, r1
     94c:	2f ef       	ldi	r18, 0xFF	; 255
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	b9 01       	movw	r22, r18
     952:	0e 94 37 0a 	call	0x146e	; 0x146e <__divmodhi4>
     956:	46 2f       	mov	r20, r22
	position.right = 100 * r / 0xFF;
     958:	ef 9f       	mul	r30, r31
     95a:	c0 01       	movw	r24, r0
     95c:	11 24       	eor	r1, r1
     95e:	b9 01       	movw	r22, r18
     960:	0e 94 37 0a 	call	0x146e	; 0x146e <__divmodhi4>
     964:	96 2f       	mov	r25, r22
	
	return position;
     966:	84 2f       	mov	r24, r20
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <main>:
#include "joystick.h"
#include "oled.h"
#include "menu.h"
#include "can.h"

int main(void) {
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	66 97       	sbiw	r28, 0x16	; 22
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
	/*-----Define pins-----*/
	DDRD &= ~(1 << PIND2);		//Set D2(INT0) as input
     980:	8a 98       	cbi	0x11, 2	; 17
	slider_position slider_pos;
	//slider_position slider_pos;
	uint8_t score = 0;
	
	/*-----Interrupts-----*/
	GICR |= (1 << INT0);		//Enable INT0
     982:	8b b7       	in	r24, 0x3b	; 59
     984:	80 64       	ori	r24, 0x40	; 64
     986:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC01);		//Trigger on falling edge
     988:	85 b7       	in	r24, 0x35	; 53
     98a:	82 60       	ori	r24, 0x02	; 2
     98c:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC00);		//Trigger on falling edge
     98e:	85 b7       	in	r24, 0x35	; 53
     990:	8e 7f       	andi	r24, 0xFE	; 254
     992:	85 bf       	out	0x35, r24	; 53
	
	/*-----Initialize UART-----*/
	UART_init(MYUBRR);
     994:	8f e1       	ldi	r24, 0x1F	; 31
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 0f 0a 	call	0x141e	; 0x141e <UART_init>
	printf("----UART working----\n\r");
     99c:	85 e2       	ldi	r24, 0x25	; 37
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
     9a4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <printf>
	
	/*-----Initialize JOYSTICK-----*/
	if (JOY_init() == 0) {
     9a8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <JOY_init>
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	89 2b       	or	r24, r25
     9b2:	49 f4       	brne	.+18     	; 0x9c6 <main+0x5a>
		printf("----Joystick working----\n\r");
     9b4:	8c e3       	ldi	r24, 0x3C	; 60
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	9f 93       	push	r25
     9ba:	8f 93       	push	r24
     9bc:	0e 94 b3 0a 	call	0x1566	; 0x1566 <printf>
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <main+0x6a>
	} else {
		printf("----Joystick error!!----\n\r");
     9c6:	87 e5       	ldi	r24, 0x57	; 87
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	9f 93       	push	r25
     9cc:	8f 93       	push	r24
     9ce:	0e 94 b3 0a 	call	0x1566	; 0x1566 <printf>
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
	}
	
	/*-----Initialize OLED-----*/
	OLED_init();
     9d6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <OLED_init>
	OLED_clear();
     9da:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <OLED_clear>
	OLED_draw_mario();
     9de:	0e 94 3a 09 	call	0x1274	; 0x1274 <OLED_draw_mario>
	OLED_pos(1, 5);
     9e2:	65 e0       	ldi	r22, 0x05	; 5
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
	OLED_print("Ping Pong");
     9ee:	82 e7       	ldi	r24, 0x72	; 114
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
	OLED_pos(3, 5);
     9f6:	65 e0       	ldi	r22, 0x05	; 5
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	83 e0       	ldi	r24, 0x03	; 3
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
	OLED_print("Press Button");
     a02:	8c e7       	ldi	r24, 0x7C	; 124
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
	OLED_pos(4, 5);
     a0a:	65 e0       	ldi	r22, 0x05	; 5
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
	OLED_print("to start");
     a16:	89 e8       	ldi	r24, 0x89	; 137
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>

	/*-----Initialize CAN-----*/
	if (CAN_init() == 0) {
     a1e:	0e 94 b9 02 	call	0x572	; 0x572 <CAN_init>
     a22:	89 2b       	or	r24, r25
     a24:	79 f4       	brne	.+30     	; 0xa44 <main+0xd8>
		printf("----CAN working----\n\r");
     a26:	82 e9       	ldi	r24, 0x92	; 146
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	9f 93       	push	r25
     a2c:	8f 93       	push	r24
     a2e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <printf>
		can_msg_send.id = 1;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	9a 83       	std	Y+2, r25	; 0x02
     a38:	89 83       	std	Y+1, r24	; 0x01
		can_msg_send.length = 3;
     a3a:	83 e0       	ldi	r24, 0x03	; 3
     a3c:	8b 83       	std	Y+3, r24	; 0x03
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	08 c0       	rjmp	.+16     	; 0xa54 <main+0xe8>
	} else {
		printf("----CAN error!!----\n\r");
     a44:	88 ea       	ldi	r24, 0xA8	; 168
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	9f 93       	push	r25
     a4a:	8f 93       	push	r24
     a4c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <printf>
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
	}
	
	//Configure menu
	init_menu();
     a54:	0e 94 9f 06 	call	0xd3e	; 0xd3e <init_menu>
	
	//Enable global interrupts
	sei();
     a58:	78 94       	sei
	int circle_inc = 2;				//min radius
	int circle_dec = 7;				//max radius
	joy_position joy_pos;
	slider_position slider_pos;
	//slider_position slider_pos;
	uint8_t score = 0;
     a5a:	00 e0       	ldi	r16, 0x00	; 0
	CAN_message_t can_msg_receive;
	uint8_t menu_display = 0;		//0=main menu, 1=start, 2=high scores
	uint8_t menu_item_selected = 0;
	uint8_t game_state = 1;			//1=animation, 2=menu, 3=play
	int circle_inc = 2;				//min radius
	int circle_dec = 7;				//max radius
     a5c:	0f 2e       	mov	r0, r31
     a5e:	f7 e0       	ldi	r31, 0x07	; 7
     a60:	ef 2e       	mov	r14, r31
     a62:	f1 2c       	mov	r15, r1
     a64:	f0 2d       	mov	r31, r0
	CAN_message_t can_msg_send;
	CAN_message_t can_msg_receive;
	uint8_t menu_display = 0;		//0=main menu, 1=start, 2=high scores
	uint8_t menu_item_selected = 0;
	uint8_t game_state = 1;			//1=animation, 2=menu, 3=play
	int circle_inc = 2;				//min radius
     a66:	68 94       	set
     a68:	aa 24       	eor	r10, r10
     a6a:	a1 f8       	bld	r10, 1
     a6c:	b1 2c       	mov	r11, r1
	/*-----Define variables-----*/
	CAN_message_t can_msg_send;
	CAN_message_t can_msg_receive;
	uint8_t menu_display = 0;		//0=main menu, 1=start, 2=high scores
	uint8_t menu_item_selected = 0;
	uint8_t game_state = 1;			//1=animation, 2=menu, 3=play
     a6e:	11 e0       	ldi	r17, 0x01	; 1
	
	/*-----Define variables-----*/
	CAN_message_t can_msg_send;
	CAN_message_t can_msg_receive;
	uint8_t menu_display = 0;		//0=main menu, 1=start, 2=high scores
	uint8_t menu_item_selected = 0;
     a70:	81 2c       	mov	r8, r1
	DDRD &= ~(1 << PIND2);		//Set D2(INT0) as input
	
	/*-----Define variables-----*/
	CAN_message_t can_msg_send;
	CAN_message_t can_msg_receive;
	uint8_t menu_display = 0;		//0=main menu, 1=start, 2=high scores
     a72:	41 2c       	mov	r4, r1
		_delay_ms(100);
		
		if (JOY_button(0) == 1) {
			switch (game_state) {
				case 1:
					game_state = 2;
     a74:	68 94       	set
     a76:	33 24       	eor	r3, r3
     a78:	31 f8       	bld	r3, 1
						}
						//High Scores Menu
					} else if (menu_display == 2) {
						//Selected Return
						if (menu_item_selected == 1) {
							menu_display = 0;
     a7a:	21 2c       	mov	r2, r1
				case 2:
					//Main Menu
					if (menu_display == 0) {
						//Selected Start
						if (menu_item_selected == 1) {
							menu_display = 1;
     a7c:	66 24       	eor	r6, r6
     a7e:	63 94       	inc	r6
		}
		
		switch (game_state) {
			case 1:
				//Startup animation
				if(circle_inc > 7) circle_inc = 2;
     a80:	68 94       	set
     a82:	cc 24       	eor	r12, r12
     a84:	c1 f8       	bld	r12, 1
     a86:	d1 2c       	mov	r13, r1
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <main+0x120>
				can_msg_send.data[2] = JOY_button(0);
				
				CAN_message_send(&can_msg_send);
				
				//End game
				if (score == 5) game_state = 1;
     a8a:	16 2d       	mov	r17, r6
     a8c:	24 e0       	ldi	r18, 0x04	; 4
     a8e:	80 e8       	ldi	r24, 0x80	; 128
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	21 50       	subi	r18, 0x01	; 1
     a94:	80 40       	sbci	r24, 0x00	; 0
     a96:	90 40       	sbci	r25, 0x00	; 0
     a98:	e1 f7       	brne	.-8      	; 0xa92 <main+0x126>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <main+0x130>
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <main+0x132>
	
	while(1) {

		_delay_ms(100);
		
		if (JOY_button(0) == 1) {
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 ef 03 	call	0x7de	; 0x7de <JOY_button>
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	11 f5       	brne	.+68     	; 0xaee <main+0x182>
			switch (game_state) {
     aaa:	11 30       	cpi	r17, 0x01	; 1
     aac:	91 f0       	breq	.+36     	; 0xad2 <main+0x166>
     aae:	12 30       	cpi	r17, 0x02	; 2
     ab0:	c1 f4       	brne	.+48     	; 0xae2 <main+0x176>
				case 1:
					game_state = 2;
					break;
				case 2:
					//Main Menu
					if (menu_display == 0) {
     ab2:	41 10       	cpse	r4, r1
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <main+0x158>
						//Selected Start
						if (menu_item_selected == 1) {
     ab6:	21 e0       	ldi	r18, 0x01	; 1
     ab8:	82 16       	cp	r8, r18
     aba:	69 f0       	breq	.+26     	; 0xad6 <main+0x16a>
							menu_display = 1;
							game_state = 3;
						//Selected High Scores
						} else if (menu_item_selected == 2) {
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	88 12       	cpse	r8, r24
     ac0:	10 c0       	rjmp	.+32     	; 0xae2 <main+0x176>
     ac2:	0c c0       	rjmp	.+24     	; 0xadc <main+0x170>
							menu_display = 2;
						}
						//High Scores Menu
					} else if (menu_display == 2) {
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	49 12       	cpse	r4, r25
     ac8:	0c c0       	rjmp	.+24     	; 0xae2 <main+0x176>
						//Selected Return
						if (menu_item_selected == 1) {
     aca:	21 e0       	ldi	r18, 0x01	; 1
     acc:	82 12       	cpse	r8, r18
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <main+0x176>
     ad0:	07 c0       	rjmp	.+14     	; 0xae0 <main+0x174>
		_delay_ms(100);
		
		if (JOY_button(0) == 1) {
			switch (game_state) {
				case 1:
					game_state = 2;
     ad2:	13 2d       	mov	r17, r3
     ad4:	06 c0       	rjmp	.+12     	; 0xae2 <main+0x176>
					//Main Menu
					if (menu_display == 0) {
						//Selected Start
						if (menu_item_selected == 1) {
							menu_display = 1;
							game_state = 3;
     ad6:	13 e0       	ldi	r17, 0x03	; 3
				case 2:
					//Main Menu
					if (menu_display == 0) {
						//Selected Start
						if (menu_item_selected == 1) {
							menu_display = 1;
     ad8:	46 2c       	mov	r4, r6
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <main+0x176>
							game_state = 3;
						//Selected High Scores
						} else if (menu_item_selected == 2) {
							menu_display = 2;
     adc:	43 2c       	mov	r4, r3
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <main+0x176>
						}
						//High Scores Menu
					} else if (menu_display == 2) {
						//Selected Return
						if (menu_item_selected == 1) {
							menu_display = 0;
     ae0:	42 2c       	mov	r4, r2
					break;
				default:
					break;
			}
			//Remove bouncing
			while (JOY_button(0) == 1);
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 ef 03 	call	0x7de	; 0x7de <JOY_button>
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	d1 f3       	breq	.-12     	; 0xae2 <main+0x176>
		}
		
		switch (game_state) {
     aee:	12 30       	cpi	r17, 0x02	; 2
     af0:	c1 f1       	breq	.+112    	; 0xb62 <main+0x1f6>
     af2:	13 30       	cpi	r17, 0x03	; 3
     af4:	09 f4       	brne	.+2      	; 0xaf8 <main+0x18c>
     af6:	71 c0       	rjmp	.+226    	; 0xbda <main+0x26e>
     af8:	11 30       	cpi	r17, 0x01	; 1
     afa:	41 f6       	brne	.-112    	; 0xa8c <main+0x120>
			case 1:
				//Startup animation
				if(circle_inc > 7) circle_inc = 2;
     afc:	88 e0       	ldi	r24, 0x08	; 8
     afe:	a8 16       	cp	r10, r24
     b00:	b1 04       	cpc	r11, r1
     b02:	0c f0       	brlt	.+2      	; 0xb06 <main+0x19a>
     b04:	56 01       	movw	r10, r12
				if(circle_dec < 2) circle_dec = 7;
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	e9 16       	cp	r14, r25
     b0a:	f1 04       	cpc	r15, r1
     b0c:	2c f4       	brge	.+10     	; 0xb18 <main+0x1ac>
     b0e:	0f 2e       	mov	r0, r31
     b10:	f7 e0       	ldi	r31, 0x07	; 7
     b12:	ef 2e       	mov	r14, r31
     b14:	f1 2c       	mov	r15, r1
     b16:	f0 2d       	mov	r31, r0
				OLED_draw_circle(5,50,1);
     b18:	46 2d       	mov	r20, r6
     b1a:	62 e3       	ldi	r22, 0x32	; 50
     b1c:	85 e0       	ldi	r24, 0x05	; 5
     b1e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <OLED_draw_circle>
				OLED_draw_circle(5,50,circle_inc);
     b22:	4a 2d       	mov	r20, r10
     b24:	62 e3       	ldi	r22, 0x32	; 50
     b26:	85 e0       	ldi	r24, 0x05	; 5
     b28:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <OLED_draw_circle>
		
				OLED_draw_circle(5,70,1);
     b2c:	46 2d       	mov	r20, r6
     b2e:	66 e4       	ldi	r22, 0x46	; 70
     b30:	85 e0       	ldi	r24, 0x05	; 5
     b32:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <OLED_draw_circle>
				OLED_draw_circle(5,70,circle_dec);
     b36:	4e 2d       	mov	r20, r14
     b38:	66 e4       	ldi	r22, 0x46	; 70
     b3a:	85 e0       	ldi	r24, 0x05	; 5
     b3c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <OLED_draw_circle>
		
				OLED_draw_circle(5,90,1);
     b40:	46 2d       	mov	r20, r6
     b42:	6a e5       	ldi	r22, 0x5A	; 90
     b44:	85 e0       	ldi	r24, 0x05	; 5
     b46:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <OLED_draw_circle>
				OLED_draw_circle(5,90,circle_inc);
     b4a:	4a 2d       	mov	r20, r10
     b4c:	6a e5       	ldi	r22, 0x5A	; 90
     b4e:	85 e0       	ldi	r24, 0x05	; 5
     b50:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <OLED_draw_circle>
				circle_inc++;
     b54:	2f ef       	ldi	r18, 0xFF	; 255
     b56:	a2 1a       	sub	r10, r18
     b58:	b2 0a       	sbc	r11, r18
				circle_dec--;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	e8 1a       	sub	r14, r24
     b5e:	f1 08       	sbc	r15, r1
				
				break;
     b60:	95 cf       	rjmp	.-214    	; 0xa8c <main+0x120>
			case 2:
				//Menu interface
				OLED_clear();
     b62:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <OLED_clear>
				joy_pos = JOY_getDirection();
     b66:	0e 94 76 04 	call	0x8ec	; 0x8ec <JOY_getDirection>
     b6a:	78 2e       	mov	r7, r24
     b6c:	89 2e       	mov	r8, r25
				
				if (strcmp(joy_pos.direction,"UP") == 0) {
     b6e:	6a e1       	ldi	r22, 0x1A	; 26
     b70:	71 e0       	ldi	r23, 0x01	; 1
     b72:	0e 94 5f 0a 	call	0x14be	; 0x14be <strcmp>
     b76:	28 2f       	mov	r18, r24
     b78:	39 2f       	mov	r19, r25
     b7a:	23 2b       	or	r18, r19
     b7c:	79 f4       	brne	.+30     	; 0xb9c <main+0x230>
					menu_item_selected = draw_menu(menu_display, 1);
     b7e:	66 2d       	mov	r22, r6
     b80:	84 2d       	mov	r24, r4
     b82:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <draw_menu>
     b86:	88 2e       	mov	r8, r24
     b88:	98 e1       	ldi	r25, 0x18	; 24
     b8a:	20 e8       	ldi	r18, 0x80	; 128
     b8c:	87 e0       	ldi	r24, 0x07	; 7
     b8e:	91 50       	subi	r25, 0x01	; 1
     b90:	20 40       	sbci	r18, 0x00	; 0
     b92:	80 40       	sbci	r24, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <main+0x222>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <main+0x22c>
     b98:	00 00       	nop
     b9a:	78 cf       	rjmp	.-272    	; 0xa8c <main+0x120>
					//Avoid changing selection too fast
					_delay_ms(500);
				} else if (strcmp(joy_pos.direction,"DOWN") == 0) {
     b9c:	65 e1       	ldi	r22, 0x15	; 21
     b9e:	71 e0       	ldi	r23, 0x01	; 1
     ba0:	87 2d       	mov	r24, r7
     ba2:	98 2d       	mov	r25, r8
     ba4:	0e 94 5f 0a 	call	0x14be	; 0x14be <strcmp>
     ba8:	28 2f       	mov	r18, r24
     baa:	39 2f       	mov	r19, r25
     bac:	23 2b       	or	r18, r19
     bae:	79 f4       	brne	.+30     	; 0xbce <main+0x262>
					menu_item_selected = draw_menu(menu_display, 2);
     bb0:	63 2d       	mov	r22, r3
     bb2:	84 2d       	mov	r24, r4
     bb4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <draw_menu>
     bb8:	88 2e       	mov	r8, r24
     bba:	98 e1       	ldi	r25, 0x18	; 24
     bbc:	20 e8       	ldi	r18, 0x80	; 128
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	91 50       	subi	r25, 0x01	; 1
     bc2:	20 40       	sbci	r18, 0x00	; 0
     bc4:	80 40       	sbci	r24, 0x00	; 0
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <main+0x254>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <main+0x25e>
     bca:	00 00       	nop
     bcc:	5f cf       	rjmp	.-322    	; 0xa8c <main+0x120>
					//Avoid changing selection too fast
					_delay_ms(500);
				} else {
					menu_item_selected = draw_menu(menu_display, 0);
     bce:	62 2d       	mov	r22, r2
     bd0:	84 2d       	mov	r24, r4
     bd2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <draw_menu>
     bd6:	88 2e       	mov	r8, r24
     bd8:	59 cf       	rjmp	.-334    	; 0xa8c <main+0x120>
				}
				
				break;
			case 3:
				//Start game
				OLED_clear();
     bda:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <OLED_clear>
				
				//Get the score of the game
				can_msg_receive = CAN_data_receive();
     bde:	ce 01       	movw	r24, r28
     be0:	0c 96       	adiw	r24, 0x0c	; 12
     be2:	0e 94 40 03 	call	0x680	; 0x680 <CAN_data_receive>
				if (can_msg_receive.id == 2) {
     be6:	8c 85       	ldd	r24, Y+12	; 0x0c
     be8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bea:	02 97       	sbiw	r24, 0x02	; 2
     bec:	69 f4       	brne	.+26     	; 0xc08 <main+0x29c>
					score = can_msg_receive.data[0];
     bee:	0f 85       	ldd	r16, Y+15	; 0x0f
					printf("Score %i",score); //testing
     bf0:	1f 92       	push	r1
     bf2:	0f 93       	push	r16
     bf4:	8e eb       	ldi	r24, 0xBE	; 190
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	0e 94 b3 0a 	call	0x1566	; 0x1566 <printf>
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
				}
				
				OLED_print("Score: ");
     c08:	87 ec       	ldi	r24, 0xC7	; 199
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
				OLED_print_char(score+0x30);
     c10:	80 2f       	mov	r24, r16
     c12:	80 5d       	subi	r24, 0xD0	; 208
     c14:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_print_char>
				
				//Send the joystick position to node 2
				joy_pos = JOY_getPosition();
     c18:	0e 94 0f 04 	call	0x81e	; 0x81e <JOY_getPosition>
				can_msg_send.data[0] = joy_pos.x;
     c1c:	6c 83       	std	Y+4, r22	; 0x04
				
				//Send the slider position to node 2
				slider_pos = JOY_getSliderPosition();
     c1e:	0e 94 99 04 	call	0x932	; 0x932 <JOY_getSliderPosition>
				can_msg_send.data[1] = slider_pos.right;
     c22:	9d 83       	std	Y+5, r25	; 0x05
				
				//Send the button click to node 2
				can_msg_send.data[2] = JOY_button(0);
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 ef 03 	call	0x7de	; 0x7de <JOY_button>
     c2c:	8e 83       	std	Y+6, r24	; 0x06
				
				CAN_message_send(&can_msg_send);
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <CAN_message_send>
				
				//End game
				if (score == 5) game_state = 1;
     c36:	05 30       	cpi	r16, 0x05	; 5
     c38:	09 f0       	breq	.+2      	; 0xc3c <main+0x2d0>
     c3a:	28 cf       	rjmp	.-432    	; 0xa8c <main+0x120>
     c3c:	26 cf       	rjmp	.-436    	; 0xa8a <main+0x11e>

00000c3e <mcp2515_write>:
	}
	
	return 0;
}

int mcp2515_write(uint8_t address, uint8_t data) {
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	d8 2f       	mov	r29, r24
     c44:	c6 2f       	mov	r28, r22
	//Select CAN-controller
	SPI_select();
     c46:	0e 94 01 0a 	call	0x1402	; 0x1402 <SPI_select>
		
	SPI_send(MCP_WRITE);	//Send write command
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
	SPI_send(address);		//Send address
     c50:	8d 2f       	mov	r24, r29
     c52:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
	SPI_send(data);			//Send data
     c56:	8c 2f       	mov	r24, r28
     c58:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
		
	//Deselect CAN-controller
	SPI_deselect();
     c5c:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_deselect>
		
	return 0;
}
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <mcp2515_request_to_send>:

int mcp2515_request_to_send(uint8_t command) {
     c6a:	cf 93       	push	r28
	#define MCP_RTS_TX2		0x84 -> command = 4
	#define MCP_RTS_ALL		0x87 -> command = 7
	*/

	//Check the last three bits for the commands
	if(command <= 7) {
     c6c:	88 30       	cpi	r24, 0x08	; 8
     c6e:	18 f4       	brcc	.+6      	; 0xc76 <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     c70:	c8 2f       	mov	r28, r24
     c72:	c0 68       	ori	r28, 0x80	; 128
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     c76:	c0 e8       	ldi	r28, 0x80	; 128
	}
	
	//Select CAN-controller
	SPI_select();
     c78:	0e 94 01 0a 	call	0x1402	; 0x1402 <SPI_select>
		
	SPI_send(command);		//Send RTS command
     c7c:	8c 2f       	mov	r24, r28
     c7e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
		
	//Deselect CAN-controller
	SPI_deselect();
     c82:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_deselect>
		
	return 0;
}
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <mcp2515_bit_modify>:

int mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	18 2f       	mov	r17, r24
     c96:	d6 2f       	mov	r29, r22
     c98:	c4 2f       	mov	r28, r20
	//Select CAN-controller
	SPI_select();
     c9a:	0e 94 01 0a 	call	0x1402	; 0x1402 <SPI_select>
		
	SPI_send(MCP_BITMOD);		//Send bit modify command
     c9e:	85 e0       	ldi	r24, 0x05	; 5
     ca0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
	SPI_send(address);			//Send address
     ca4:	81 2f       	mov	r24, r17
     ca6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
	SPI_send(mask);				//Send mask byte
     caa:	8d 2f       	mov	r24, r29
     cac:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
	SPI_send(data);				//Send data
     cb0:	8c 2f       	mov	r24, r28
     cb2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
		
	//Deselect CAN-controller
	SPI_deselect();
     cb6:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_deselect>
		
	return 0;
}
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <mcp2515_reset>:

int mcp2515_reset(void) {
	//Select CAN-controller
	SPI_select();
     cc6:	0e 94 01 0a 	call	0x1402	; 0x1402 <SPI_select>
	
	SPI_send(MCP_RESET);	//Send reset command
     cca:	80 ec       	ldi	r24, 0xC0	; 192
     ccc:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
	
	//Deselect CAN-controller
	SPI_deselect();
     cd0:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_deselect>
	
	return 0;
}
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	08 95       	ret

00000cda <mcp2515_read>:

uint8_t mcp2515_read(uint8_t address) {
     cda:	cf 93       	push	r28
     cdc:	c8 2f       	mov	r28, r24
	uint8_t result;

	//Select CAN-controller
	SPI_select();
     cde:	0e 94 01 0a 	call	0x1402	; 0x1402 <SPI_select>
	
	SPI_send(MCP_READ);		//Send read command
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
	SPI_send(address);		//Send address
     ce8:	8c 2f       	mov	r24, r28
     cea:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
	result = SPI_read();	//Read result
     cee:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SPI_read>
     cf2:	c8 2f       	mov	r28, r24
	
	//Deselect CAN-controller
	SPI_deselect();
     cf4:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_deselect>
	
	return result;
}
     cf8:	8c 2f       	mov	r24, r28
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret

00000cfe <mcp2515_init>:
#include <avr/io.h>
#include "uart.h"
#include "spi.h"
#include "mcp2515.h"

int mcp2515_init(void) {
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	1f 92       	push	r1
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//Initialize SPI driver
	SPI_init();
     d08:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <SPI_init>
	
	//Reset the CAN controller
	mcp2515_reset();
     d0c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <mcp2515_reset>
	
	//Self-test
	value = mcp2515_read(MCP_CANSTAT);
     d10:	8e e0       	ldi	r24, 0x0E	; 14
     d12:	0e 94 6d 06 	call	0xcda	; 0xcda <mcp2515_read>
     d16:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	80 7e       	andi	r24, 0xE0	; 224
     d1c:	80 38       	cpi	r24, 0x80	; 128
     d1e:	39 f0       	breq	.+14     	; 0xd2e <mcp2515_init+0x30>
		UART_print("MCP2515 is NOT in configuration mode after reset!");
     d20:	8f ec       	ldi	r24, 0xCF	; 207
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	0e 94 22 0a 	call	0x1444	; 0x1444 <UART_print>
		return 1;
     d28:	21 e0       	ldi	r18, 0x01	; 1
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <mcp2515_init+0x34>
	}
	
	return 0;
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
}
     d32:	82 2f       	mov	r24, r18
     d34:	93 2f       	mov	r25, r19
     d36:	0f 90       	pop	r0
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	08 95       	ret

00000d3e <init_menu>:
struct menu_t main_menu;
struct menu_item_t start, playing;
struct menu_item_t high_scores, scores;
uint8_t item_selected;
	
void init_menu(void) {
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
	//Define the menu structure
	main_menu.name = "Menu";
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	92 e0       	ldi	r25, 0x02	; 2
     d46:	90 93 93 02 	sts	0x0293, r25
     d4a:	80 93 92 02 	sts	0x0292, r24
	main_menu.items[0] = &start;
     d4e:	a9 e9       	ldi	r26, 0x99	; 153
     d50:	b2 e0       	ldi	r27, 0x02	; 2
     d52:	b0 93 95 02 	sts	0x0295, r27
     d56:	a0 93 94 02 	sts	0x0294, r26
	main_menu.items[1] = &high_scores;
     d5a:	e0 ea       	ldi	r30, 0xA0	; 160
     d5c:	f2 e0       	ldi	r31, 0x02	; 2
     d5e:	f0 93 97 02 	sts	0x0297, r31
     d62:	e0 93 96 02 	sts	0x0296, r30
	main_menu.selected = 1;
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	20 93 98 02 	sts	0x0298, r18
	
	start.name = "1.Start";
     d6c:	86 e0       	ldi	r24, 0x06	; 6
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	8e 93       	st	-X, r24
	start.parent_item = NULL;
     d76:	10 92 9c 02 	sts	0x029C, r1
     d7a:	10 92 9b 02 	sts	0x029B, r1
	start.sub_item = &playing;
     d7e:	cb e8       	ldi	r28, 0x8B	; 139
     d80:	d2 e0       	ldi	r29, 0x02	; 2
     d82:	d0 93 9e 02 	sts	0x029E, r29
     d86:	c0 93 9d 02 	sts	0x029D, r28
	start.selected = 0;
     d8a:	10 92 9f 02 	sts	0x029F, r1
	
	playing.name = "---Game on---";
     d8e:	8e e0       	ldi	r24, 0x0E	; 14
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	99 83       	std	Y+1, r25	; 0x01
     d94:	88 83       	st	Y, r24
	playing.parent_item = &start;
     d96:	b0 93 8e 02 	sts	0x028E, r27
     d9a:	a0 93 8d 02 	sts	0x028D, r26
	playing.sub_item = NULL;
     d9e:	10 92 90 02 	sts	0x0290, r1
     da2:	10 92 8f 02 	sts	0x028F, r1
	playing.selected = 0;
     da6:	10 92 91 02 	sts	0x0291, r1
	
	high_scores.name = "2.High Scores";
     daa:	8c e1       	ldi	r24, 0x1C	; 28
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	91 83       	std	Z+1, r25	; 0x01
     db0:	80 83       	st	Z, r24
	high_scores.parent_item = NULL;
     db2:	10 92 a3 02 	sts	0x02A3, r1
     db6:	10 92 a2 02 	sts	0x02A2, r1
	high_scores.sub_item = &scores;
     dba:	a4 e8       	ldi	r26, 0x84	; 132
     dbc:	b2 e0       	ldi	r27, 0x02	; 2
     dbe:	b0 93 a5 02 	sts	0x02A5, r27
     dc2:	a0 93 a4 02 	sts	0x02A4, r26
	high_scores.selected = 0;
     dc6:	10 92 a6 02 	sts	0x02A6, r1
	
	scores.name = "---High Scores---";
     dca:	8a e2       	ldi	r24, 0x2A	; 42
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	8d 93       	st	X+, r24
     dd0:	9c 93       	st	X, r25
	scores.parent_item = &high_scores;
     dd2:	f0 93 87 02 	sts	0x0287, r31
     dd6:	e0 93 86 02 	sts	0x0286, r30
	scores.sub_item = NULL;
     dda:	10 92 89 02 	sts	0x0289, r1
     dde:	10 92 88 02 	sts	0x0288, r1
	scores.selected = 0;
     de2:	10 92 8a 02 	sts	0x028A, r1
	
	item_selected = 1;
     de6:	20 93 83 02 	sts	0x0283, r18
}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <draw_menu>:

uint8_t draw_menu(uint8_t menu_display, uint8_t direction) {
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	16 2f       	mov	r17, r22
	
	switch(menu_display) {
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <draw_menu+0xe>
     dfc:	9e c0       	rjmp	.+316    	; 0xf3a <draw_menu+0x14a>
     dfe:	20 f0       	brcs	.+8      	; 0xe08 <draw_menu+0x18>
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	09 f0       	breq	.+2      	; 0xe06 <draw_menu+0x16>
     e04:	d7 c0       	rjmp	.+430    	; 0xfb4 <draw_menu+0x1c4>
     e06:	ae c0       	rjmp	.+348    	; 0xf64 <draw_menu+0x174>
		//Draw main menu (2 sub-items)
		case 0:
			//Draw the main menu
			OLED_home();
     e08:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <OLED_home>
			OLED_print("======Menu======");
     e0c:	8c e3       	ldi	r24, 0x3C	; 60
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
			OLED_goto_line(1);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 05 08 	call	0x100a	; 0x100a <OLED_goto_line>
     e1c:	c0 e1       	ldi	r28, 0x10	; 16
     e1e:	d0 e0       	ldi	r29, 0x00	; 0
			for(int i = 0; i < 16; i++) {
				OLED_print("-");
     e20:	8a e1       	ldi	r24, 0x1A	; 26
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
     e28:	21 97       	sbiw	r28, 0x01	; 1
		case 0:
			//Draw the main menu
			OLED_home();
			OLED_print("======Menu======");
			OLED_goto_line(1);
			for(int i = 0; i < 16; i++) {
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <draw_menu+0x30>
     e2c:	c2 e0       	ldi	r28, 0x02	; 2
     e2e:	d0 e0       	ldi	r29, 0x00	; 0
				OLED_print("-");
			}
			for(int i = 2; i < 7; i++){
				OLED_pos(i,0);
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	ce 01       	movw	r24, r28
     e36:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
				OLED_print_char('|');
     e3a:	8c e7       	ldi	r24, 0x7C	; 124
     e3c:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_print_char>
			OLED_print("======Menu======");
			OLED_goto_line(1);
			for(int i = 0; i < 16; i++) {
				OLED_print("-");
			}
			for(int i = 2; i < 7; i++){
     e40:	21 96       	adiw	r28, 0x01	; 1
     e42:	c7 30       	cpi	r28, 0x07	; 7
     e44:	d1 05       	cpc	r29, r1
     e46:	a1 f7       	brne	.-24     	; 0xe30 <draw_menu+0x40>
     e48:	c2 e0       	ldi	r28, 0x02	; 2
     e4a:	d0 e0       	ldi	r29, 0x00	; 0
				OLED_pos(i,0);
				OLED_print_char('|');
			}
			for(int i = 2; i < 7; i++){
				OLED_pos(i,15);
     e4c:	6f e0       	ldi	r22, 0x0F	; 15
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	ce 01       	movw	r24, r28
     e52:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
				OLED_print_char('|');
     e56:	8c e7       	ldi	r24, 0x7C	; 124
     e58:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_print_char>
			}
			for(int i = 2; i < 7; i++){
				OLED_pos(i,0);
				OLED_print_char('|');
			}
			for(int i = 2; i < 7; i++){
     e5c:	21 96       	adiw	r28, 0x01	; 1
     e5e:	c7 30       	cpi	r28, 0x07	; 7
     e60:	d1 05       	cpc	r29, r1
     e62:	a1 f7       	brne	.-24     	; 0xe4c <draw_menu+0x5c>
				OLED_pos(i,15);
				OLED_print_char('|');
			}
			
			OLED_pos(2,3);
     e64:	63 e0       	ldi	r22, 0x03	; 3
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
			OLED_print(main_menu.items[0]->name);
     e70:	e0 91 94 02 	lds	r30, 0x0294
     e74:	f0 91 95 02 	lds	r31, 0x0295
     e78:	80 81       	ld	r24, Z
     e7a:	91 81       	ldd	r25, Z+1	; 0x01
     e7c:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
			OLED_pos(3,3);
     e80:	63 e0       	ldi	r22, 0x03	; 3
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
			OLED_print(main_menu.items[1]->name);
     e8c:	e0 91 96 02 	lds	r30, 0x0296
     e90:	f0 91 97 02 	lds	r31, 0x0297
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
			OLED_pos(4,4);
     e9c:	64 e0       	ldi	r22, 0x04	; 4
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	84 e0       	ldi	r24, 0x04	; 4
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
			OLED_print(" Option 3");
     ea8:	8d e4       	ldi	r24, 0x4D	; 77
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
			OLED_pos(5,4);
     eb0:	64 e0       	ldi	r22, 0x04	; 4
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	85 e0       	ldi	r24, 0x05	; 5
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
			OLED_print(" Option 4");
     ebc:	87 e5       	ldi	r24, 0x57	; 87
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
			OLED_pos(6,4);
     ec4:	64 e0       	ldi	r22, 0x04	; 4
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	86 e0       	ldi	r24, 0x06	; 6
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
			OLED_print(" Option 5");
     ed0:	81 e6       	ldi	r24, 0x61	; 97
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
			
			OLED_goto_line(7);
     ed8:	87 e0       	ldi	r24, 0x07	; 7
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 05 08 	call	0x100a	; 0x100a <OLED_goto_line>
			OLED_print_char('+');
     ee0:	8b e2       	ldi	r24, 0x2B	; 43
     ee2:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_print_char>
     ee6:	ce e0       	ldi	r28, 0x0E	; 14
     ee8:	d0 e0       	ldi	r29, 0x00	; 0
			for(int i = 1; i < 15; i++){
				OLED_print("-");
     eea:	8a e1       	ldi	r24, 0x1A	; 26
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
     ef2:	21 97       	sbiw	r28, 0x01	; 1
			OLED_pos(6,4);
			OLED_print(" Option 5");
			
			OLED_goto_line(7);
			OLED_print_char('+');
			for(int i = 1; i < 15; i++){
     ef4:	d1 f7       	brne	.-12     	; 0xeea <draw_menu+0xfa>
				OLED_print("-");
			}
			OLED_print_char('+');
     ef6:	8b e2       	ldi	r24, 0x2B	; 43
     ef8:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_print_char>
			
			//Draw cursor
			if (direction == 1 && item_selected == 2) {			//Move cursor up
     efc:	11 30       	cpi	r17, 0x01	; 1
     efe:	41 f4       	brne	.+16     	; 0xf10 <draw_menu+0x120>
     f00:	80 91 83 02 	lds	r24, 0x0283
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	69 f4       	brne	.+26     	; 0xf22 <draw_menu+0x132>
				item_selected--;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	80 93 83 02 	sts	0x0283, r24
     f0e:	09 c0       	rjmp	.+18     	; 0xf22 <draw_menu+0x132>
			} else if (direction == 2 && item_selected == 1) {	//Move cursor down
     f10:	12 30       	cpi	r17, 0x02	; 2
     f12:	39 f4       	brne	.+14     	; 0xf22 <draw_menu+0x132>
     f14:	80 91 83 02 	lds	r24, 0x0283
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	19 f4       	brne	.+6      	; 0xf22 <draw_menu+0x132>
				item_selected++;
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	80 93 83 02 	sts	0x0283, r24
			}
			OLED_pos(item_selected+1,1);
     f22:	80 91 83 02 	lds	r24, 0x0283
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
			OLED_print_char('x');
     f32:	88 e7       	ldi	r24, 0x78	; 120
     f34:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_print_char>
		break;
     f38:	3d c0       	rjmp	.+122    	; 0xfb4 <draw_menu+0x1c4>
		
		//Draw start game (no sub-items)
		case 1:	
			//Draw screen
			OLED_home();
     f3a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <OLED_home>
			OLED_print(playing.name);
     f3e:	80 91 8b 02 	lds	r24, 0x028B
     f42:	90 91 8c 02 	lds	r25, 0x028C
     f46:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
		
			//Draw cursor
			item_selected = 1;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 83 02 	sts	0x0283, r24
			OLED_pos(item_selected,0);
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
			OLED_print_char('x');
     f5c:	88 e7       	ldi	r24, 0x78	; 120
     f5e:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_print_char>
		break;
     f62:	28 c0       	rjmp	.+80     	; 0xfb4 <draw_menu+0x1c4>
		
		//Draw high scores menu (1 sub-item)
		case 2:
			//Draw screen
			OLED_home();
     f64:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <OLED_home>
			OLED_print(scores.name);
     f68:	80 91 84 02 	lds	r24, 0x0284
     f6c:	90 91 85 02 	lds	r25, 0x0285
     f70:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
			OLED_pos(1,2);
     f74:	62 e0       	ldi	r22, 0x02	; 2
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
			OLED_print("1000 - Erick");
     f80:	8b e6       	ldi	r24, 0x6B	; 107
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
			OLED_pos(2,2);
     f88:	62 e0       	ldi	r22, 0x02	; 2
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
			OLED_print("RETURN");
     f94:	88 e7       	ldi	r24, 0x78	; 120
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 29 09 	call	0x1252	; 0x1252 <OLED_print>
					
			//Draw cursor
			item_selected = 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 83 02 	sts	0x0283, r24
			OLED_pos(item_selected+1,0);
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
			OLED_print_char('x');
     fae:	88 e7       	ldi	r24, 0x78	; 120
     fb0:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_print_char>
		default:
		break;
	}
	
	return item_selected;
     fb4:	80 91 83 02 	lds	r24, 0x0283
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	08 95       	ret

00000fc0 <OLED_home>:
	return 0;
}

//TODO: Comment what it does
int OLED_home(){
	*OLED_cmd = 0x21;
     fc0:	e0 91 08 01 	lds	r30, 0x0108
     fc4:	f0 91 09 01 	lds	r31, 0x0109
     fc8:	81 e2       	ldi	r24, 0x21	; 33
     fca:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
     fcc:	e0 91 08 01 	lds	r30, 0x0108
     fd0:	f0 91 09 01 	lds	r31, 0x0109
     fd4:	10 82       	st	Z, r1
	*OLED_cmd = 0x7f;
     fd6:	e0 91 08 01 	lds	r30, 0x0108
     fda:	f0 91 09 01 	lds	r31, 0x0109
     fde:	8f e7       	ldi	r24, 0x7F	; 127
     fe0:	80 83       	st	Z, r24
	
	*OLED_cmd = 0x22;
     fe2:	e0 91 08 01 	lds	r30, 0x0108
     fe6:	f0 91 09 01 	lds	r31, 0x0109
     fea:	82 e2       	ldi	r24, 0x22	; 34
     fec:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
     fee:	e0 91 08 01 	lds	r30, 0x0108
     ff2:	f0 91 09 01 	lds	r31, 0x0109
     ff6:	10 82       	st	Z, r1
	*OLED_cmd = 0x7;
     ff8:	e0 91 08 01 	lds	r30, 0x0108
     ffc:	f0 91 09 01 	lds	r31, 0x0109
    1000:	87 e0       	ldi	r24, 0x07	; 7
    1002:	80 83       	st	Z, r24
	
	return 0;
}
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	08 95       	ret

0000100a <OLED_goto_line>:

int OLED_goto_line(int line) {
	//Set lower column address
	*OLED_cmd = 0x00;
    100a:	e0 91 08 01 	lds	r30, 0x0108
    100e:	f0 91 09 01 	lds	r31, 0x0109
    1012:	10 82       	st	Z, r1
	//Set higher column address
	*OLED_cmd = 0x10;
    1014:	e0 91 08 01 	lds	r30, 0x0108
    1018:	f0 91 09 01 	lds	r31, 0x0109
    101c:	20 e1       	ldi	r18, 0x10	; 16
    101e:	20 83       	st	Z, r18
	//Set page address
	if (line < 8) {
    1020:	88 30       	cpi	r24, 0x08	; 8
    1022:	91 05       	cpc	r25, r1
    1024:	3c f4       	brge	.+14     	; 0x1034 <OLED_goto_line+0x2a>
		//*OLED_cmd = 0xB0;
		*OLED_cmd = 0xB0 | line;
    1026:	e0 91 08 01 	lds	r30, 0x0108
    102a:	f0 91 09 01 	lds	r31, 0x0109
    102e:	80 6b       	ori	r24, 0xB0	; 176
    1030:	9f 6f       	ori	r25, 0xFF	; 255
    1032:	80 83       	st	Z, r24
	}

	return 0;
}
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	08 95       	ret

0000103a <OLED_pos>:

int OLED_pos(int row, int column) {
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	8c 01       	movw	r16, r24
    1044:	eb 01       	movw	r28, r22
	OLED_home();
    1046:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <OLED_home>
	OLED_goto_line(row);
    104a:	c8 01       	movw	r24, r16
    104c:	0e 94 05 08 	call	0x100a	; 0x100a <OLED_goto_line>
	
	if (column < (128/FONTWIDTH)) {
    1050:	c0 31       	cpi	r28, 0x10	; 16
    1052:	d1 05       	cpc	r29, r1
    1054:	cc f4       	brge	.+50     	; 0x1088 <OLED_pos+0x4e>
		//Set lower column start address
		*OLED_cmd = 0x00 + (column*(FONTWIDTH)>>4);
    1056:	e0 91 08 01 	lds	r30, 0x0108
    105a:	f0 91 09 01 	lds	r31, 0x0109
    105e:	cc 0f       	add	r28, r28
    1060:	dd 1f       	adc	r29, r29
    1062:	cc 0f       	add	r28, r28
    1064:	dd 1f       	adc	r29, r29
    1066:	cc 0f       	add	r28, r28
    1068:	dd 1f       	adc	r29, r29
    106a:	d5 95       	asr	r29
    106c:	c7 95       	ror	r28
    106e:	d5 95       	asr	r29
    1070:	c7 95       	ror	r28
    1072:	d5 95       	asr	r29
    1074:	c7 95       	ror	r28
    1076:	d5 95       	asr	r29
    1078:	c7 95       	ror	r28
    107a:	c0 83       	st	Z, r28
		//Set higher column start address
		*OLED_cmd = 0x10 + (column*(FONTWIDTH)>>4);
    107c:	e0 91 08 01 	lds	r30, 0x0108
    1080:	f0 91 09 01 	lds	r31, 0x0109
    1084:	c0 5f       	subi	r28, 0xF0	; 240
    1086:	c0 83       	st	Z, r28
	}
	
	return 0;
}
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <OLED_clear_line>:

int OLED_clear_line(int line) {
	//Set page address
	OLED_goto_line(line);
    1096:	0e 94 05 08 	call	0x100a	; 0x100a <OLED_goto_line>
    109a:	80 e8       	ldi	r24, 0x80	; 128
    109c:	90 e0       	ldi	r25, 0x00	; 0
	
	//Clear the page
	for(int i = 0; i < 128 ; i++) {
		*OLED_data=0x00;
    109e:	e0 91 06 01 	lds	r30, 0x0106
    10a2:	f0 91 07 01 	lds	r31, 0x0107
    10a6:	10 82       	st	Z, r1
    10a8:	01 97       	sbiw	r24, 0x01	; 1
int OLED_clear_line(int line) {
	//Set page address
	OLED_goto_line(line);
	
	//Clear the page
	for(int i = 0; i < 128 ; i++) {
    10aa:	c9 f7       	brne	.-14     	; 0x109e <OLED_clear_line+0x8>
		*OLED_data=0x00;
	}	
	
	OLED_home();
    10ac:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <OLED_home>
	
	return 0;
}
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	08 95       	ret

000010b6 <OLED_clear>:

int OLED_clear(){
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
	//Clear every page
	for (int k = 0; k < 8; k++) {
    10ba:	c0 e0       	ldi	r28, 0x00	; 0
    10bc:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_clear_line(k);
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 4b 08 	call	0x1096	; 0x1096 <OLED_clear_line>
	return 0;
}

int OLED_clear(){
	//Clear every page
	for (int k = 0; k < 8; k++) {
    10c4:	21 96       	adiw	r28, 0x01	; 1
    10c6:	c8 30       	cpi	r28, 0x08	; 8
    10c8:	d1 05       	cpc	r29, r1
    10ca:	c9 f7       	brne	.-14     	; 0x10be <OLED_clear+0x8>
		OLED_clear_line(k);
	}
	
	return 0;
}
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <OLED_init>:
//Address for the OLED data
volatile char *OLED_data = (char *) 0x1200;

int OLED_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
    10d6:	85 b7       	in	r24, 0x35	; 53
    10d8:	80 68       	ori	r24, 0x80	; 128
    10da:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    10dc:	80 b7       	in	r24, 0x30	; 48
    10de:	80 62       	ori	r24, 0x20	; 32
    10e0:	80 bf       	out	0x30, r24	; 48

	//Setup the OLED display
	
	//display off
	*OLED_cmd = 0xAE;
    10e2:	e0 91 08 01 	lds	r30, 0x0108
    10e6:	f0 91 09 01 	lds	r31, 0x0109
    10ea:	8e ea       	ldi	r24, 0xAE	; 174
    10ec:	80 83       	st	Z, r24
	//segment remap
	*OLED_cmd = 0xA1;
    10ee:	e0 91 08 01 	lds	r30, 0x0108
    10f2:	f0 91 09 01 	lds	r31, 0x0109
    10f6:	81 ea       	ldi	r24, 0xA1	; 161
    10f8:	80 83       	st	Z, r24
	
	//common pads hardware: alternative
	*OLED_cmd = 0xDA; 
    10fa:	e0 91 08 01 	lds	r30, 0x0108
    10fe:	f0 91 09 01 	lds	r31, 0x0109
    1102:	8a ed       	ldi	r24, 0xDA	; 218
    1104:	80 83       	st	Z, r24
	*OLED_cmd = 0x12;
    1106:	e0 91 08 01 	lds	r30, 0x0108
    110a:	f0 91 09 01 	lds	r31, 0x0109
    110e:	82 e1       	ldi	r24, 0x12	; 18
    1110:	80 83       	st	Z, r24
	
	//common output scan direction:com63~com0
	*OLED_cmd = 0xC8; 
    1112:	e0 91 08 01 	lds	r30, 0x0108
    1116:	f0 91 09 01 	lds	r31, 0x0109
    111a:	88 ec       	ldi	r24, 0xC8	; 200
    111c:	80 83       	st	Z, r24

	//multiplex ration mode:63
	*OLED_cmd = 0xA8; 
    111e:	e0 91 08 01 	lds	r30, 0x0108
    1122:	f0 91 09 01 	lds	r31, 0x0109
    1126:	88 ea       	ldi	r24, 0xA8	; 168
    1128:	80 83       	st	Z, r24
	*OLED_cmd = 0x3F;
    112a:	e0 91 08 01 	lds	r30, 0x0108
    112e:	f0 91 09 01 	lds	r31, 0x0109
    1132:	8f e3       	ldi	r24, 0x3F	; 63
    1134:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_cmd = 0xD5; 
    1136:	e0 91 08 01 	lds	r30, 0x0108
    113a:	f0 91 09 01 	lds	r31, 0x0109
    113e:	85 ed       	ldi	r24, 0xD5	; 213
    1140:	80 83       	st	Z, r24
	*OLED_cmd = 0x80;
    1142:	e0 91 08 01 	lds	r30, 0x0108
    1146:	f0 91 09 01 	lds	r31, 0x0109
    114a:	80 e8       	ldi	r24, 0x80	; 128
    114c:	80 83       	st	Z, r24

	//contrast control
	*OLED_cmd = 0x81; 
    114e:	e0 91 08 01 	lds	r30, 0x0108
    1152:	f0 91 09 01 	lds	r31, 0x0109
    1156:	81 e8       	ldi	r24, 0x81	; 129
    1158:	80 83       	st	Z, r24
	*OLED_cmd = 0x50;
    115a:	e0 91 08 01 	lds	r30, 0x0108
    115e:	f0 91 09 01 	lds	r31, 0x0109
    1162:	80 e5       	ldi	r24, 0x50	; 80
    1164:	80 83       	st	Z, r24

	//set pre-charge period
	*OLED_cmd = 0xD9; 
    1166:	e0 91 08 01 	lds	r30, 0x0108
    116a:	f0 91 09 01 	lds	r31, 0x0109
    116e:	89 ed       	ldi	r24, 0xD9	; 217
    1170:	80 83       	st	Z, r24
	*OLED_cmd = 0x21;
    1172:	e0 91 08 01 	lds	r30, 0x0108
    1176:	f0 91 09 01 	lds	r31, 0x0109
    117a:	81 e2       	ldi	r24, 0x21	; 33
    117c:	80 83       	st	Z, r24

	//set Memory Addressing Mode
	*OLED_cmd = 0x20; 
    117e:	e0 91 08 01 	lds	r30, 0x0108
    1182:	f0 91 09 01 	lds	r31, 0x0109
    1186:	80 e2       	ldi	r24, 0x20	; 32
    1188:	80 83       	st	Z, r24
	*OLED_cmd = 0x02;
    118a:	e0 91 08 01 	lds	r30, 0x0108
    118e:	f0 91 09 01 	lds	r31, 0x0109
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	80 83       	st	Z, r24

	//VCOM deselect level mode
	*OLED_cmd = 0xDB;
    1196:	e0 91 08 01 	lds	r30, 0x0108
    119a:	f0 91 09 01 	lds	r31, 0x0109
    119e:	8b ed       	ldi	r24, 0xDB	; 219
    11a0:	80 83       	st	Z, r24
	*OLED_cmd = 0x30;
    11a2:	e0 91 08 01 	lds	r30, 0x0108
    11a6:	f0 91 09 01 	lds	r31, 0x0109
    11aa:	80 e3       	ldi	r24, 0x30	; 48
    11ac:	80 83       	st	Z, r24

	//master configuration
	*OLED_cmd = 0xAD; 
    11ae:	e0 91 08 01 	lds	r30, 0x0108
    11b2:	f0 91 09 01 	lds	r31, 0x0109
    11b6:	8d ea       	ldi	r24, 0xAD	; 173
    11b8:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
    11ba:	e0 91 08 01 	lds	r30, 0x0108
    11be:	f0 91 09 01 	lds	r31, 0x0109
    11c2:	10 82       	st	Z, r1

	//out follows RAM content
	*OLED_cmd = 0xA4; 
    11c4:	e0 91 08 01 	lds	r30, 0x0108
    11c8:	f0 91 09 01 	lds	r31, 0x0109
    11cc:	84 ea       	ldi	r24, 0xA4	; 164
    11ce:	80 83       	st	Z, r24

	//set normal display
	*OLED_cmd = 0xA6;
    11d0:	e0 91 08 01 	lds	r30, 0x0108
    11d4:	f0 91 09 01 	lds	r31, 0x0109
    11d8:	86 ea       	ldi	r24, 0xA6	; 166
    11da:	80 83       	st	Z, r24
	//display on
	*OLED_cmd = 0xAF; 
    11dc:	e0 91 08 01 	lds	r30, 0x0108
    11e0:	f0 91 09 01 	lds	r31, 0x0109
    11e4:	8f ea       	ldi	r24, 0xAF	; 175
    11e6:	80 83       	st	Z, r24
	
	//Set page start address
	*OLED_cmd = 0xB0;
    11e8:	e0 91 08 01 	lds	r30, 0x0108
    11ec:	f0 91 09 01 	lds	r31, 0x0109
    11f0:	80 eb       	ldi	r24, 0xB0	; 176
    11f2:	80 83       	st	Z, r24
	//Set lower column start address
	*OLED_cmd = 0x00;
    11f4:	e0 91 08 01 	lds	r30, 0x0108
    11f8:	f0 91 09 01 	lds	r31, 0x0109
    11fc:	10 82       	st	Z, r1
	//Set higher column start address
	*OLED_cmd = 0x10;
    11fe:	e0 91 08 01 	lds	r30, 0x0108
    1202:	f0 91 09 01 	lds	r31, 0x0109
    1206:	80 e1       	ldi	r24, 0x10	; 16
    1208:	80 83       	st	Z, r24
	
	//Clear the display
	OLED_clear();
    120a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <OLED_clear>
	OLED_home();
    120e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <OLED_home>

	return 0;
}
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	08 95       	ret

00001218 <OLED_print_char>:
	return 0;
}

int OLED_print_char(char c) {
	//Write the complete character
	for(int i = 0; i < FONTWIDTH; i++) {
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	80 97       	sbiw	r24, 0x20	; 32
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	a0 91 06 01 	lds	r26, 0x0106
    1230:	b0 91 07 01 	lds	r27, 0x0107
    1234:	fc 01       	movw	r30, r24
    1236:	e2 0f       	add	r30, r18
    1238:	f3 1f       	adc	r31, r19
    123a:	e0 5f       	subi	r30, 0xF0	; 240
    123c:	fd 4f       	sbci	r31, 0xFD	; 253
    123e:	e4 91       	lpm	r30, Z
    1240:	ec 93       	st	X, r30
	return 0;
}

int OLED_print_char(char c) {
	//Write the complete character
	for(int i = 0; i < FONTWIDTH; i++) {
    1242:	2f 5f       	subi	r18, 0xFF	; 255
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	28 30       	cpi	r18, 0x08	; 8
    1248:	31 05       	cpc	r19, r1
    124a:	81 f7       	brne	.-32     	; 0x122c <OLED_print_char+0x14>
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
	}
	return 0;
}
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	08 95       	ret

00001252 <OLED_print>:

int OLED_print(char *data) {
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	ec 01       	movw	r28, r24
	int i = 0;
	
	while(data[i] != '\0'){
    1258:	88 81       	ld	r24, Y
    125a:	88 23       	and	r24, r24
    125c:	31 f0       	breq	.+12     	; 0x126a <OLED_print+0x18>
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
	}
	return 0;
}

int OLED_print(char *data) {
    125e:	21 96       	adiw	r28, 0x01	; 1
	int i = 0;
	
	while(data[i] != '\0'){
		OLED_print_char(data[i]);
    1260:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_print_char>
}

int OLED_print(char *data) {
	int i = 0;
	
	while(data[i] != '\0'){
    1264:	89 91       	ld	r24, Y+
    1266:	81 11       	cpse	r24, r1
    1268:	fb cf       	rjmp	.-10     	; 0x1260 <OLED_print+0xe>
		OLED_print_char(data[i]);
		i++;
	}
	return 0;
}
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <OLED_draw_mario>:

int OLED_draw_mario(void) {
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
	OLED_home();
    1278:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <OLED_home>

	for (int j = 0; j < 8; j++) {
    127c:	c0 e0       	ldi	r28, 0x00	; 0
    127e:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(j,0);
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	ce 01       	movw	r24, r28
    1286:	0e 94 1d 08 	call	0x103a	; 0x103a <OLED_pos>
		for(int i = 0; i < 24; i++) {
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
			*OLED_data = pgm_read_byte(&mario[j][i]);
    128e:	ae 01       	movw	r20, r28
    1290:	44 0f       	add	r20, r20
    1292:	55 1f       	adc	r21, r21
    1294:	4c 0f       	add	r20, r28
    1296:	5d 1f       	adc	r21, r29
    1298:	44 0f       	add	r20, r20
    129a:	55 1f       	adc	r21, r21
    129c:	44 0f       	add	r20, r20
    129e:	55 1f       	adc	r21, r21
    12a0:	44 0f       	add	r20, r20
    12a2:	55 1f       	adc	r21, r21
    12a4:	a0 91 06 01 	lds	r26, 0x0106
    12a8:	b0 91 07 01 	lds	r27, 0x0107
    12ac:	fa 01       	movw	r30, r20
    12ae:	e2 0f       	add	r30, r18
    12b0:	f3 1f       	adc	r31, r19
    12b2:	e0 5b       	subi	r30, 0xB0	; 176
    12b4:	fe 4f       	sbci	r31, 0xFE	; 254
    12b6:	e4 91       	lpm	r30, Z
    12b8:	ec 93       	st	X, r30
int OLED_draw_mario(void) {
	OLED_home();

	for (int j = 0; j < 8; j++) {
		OLED_pos(j,0);
		for(int i = 0; i < 24; i++) {
    12ba:	2f 5f       	subi	r18, 0xFF	; 255
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
    12be:	28 31       	cpi	r18, 0x18	; 24
    12c0:	31 05       	cpc	r19, r1
    12c2:	81 f7       	brne	.-32     	; 0x12a4 <OLED_draw_mario+0x30>
}

int OLED_draw_mario(void) {
	OLED_home();

	for (int j = 0; j < 8; j++) {
    12c4:	21 96       	adiw	r28, 0x01	; 1
    12c6:	c8 30       	cpi	r28, 0x08	; 8
    12c8:	d1 05       	cpc	r29, r1
    12ca:	d1 f6       	brne	.-76     	; 0x1280 <OLED_draw_mario+0xc>
			*OLED_data = pgm_read_byte(&mario[j][i]);
		}
	}

	return 0;
}
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <OLED_draw_circle>:

int OLED_draw_circle(uint8_t x, uint8_t y, uint8_t r) {
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	f6 2e       	mov	r15, r22
	int circle;
	
	if (r < 8) {
    12e4:	48 30       	cpi	r20, 0x08	; 8
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <OLED_draw_circle+0x14>
    12e8:	52 c0       	rjmp	.+164    	; 0x138e <OLED_draw_circle+0xb8>
		circle = r - 1;
    12ea:	c4 2f       	mov	r28, r20
    12ec:	d0 e0       	ldi	r29, 0x00	; 0
    12ee:	21 97       	sbiw	r28, 0x01	; 1
	} else {
		return -1;
	}
	
	//Set position
	OLED_goto_line(x);
    12f0:	08 2f       	mov	r16, r24
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	c8 01       	movw	r24, r16
    12f6:	0e 94 05 08 	call	0x100a	; 0x100a <OLED_goto_line>
	if (y < 128) {
    12fa:	ef 2c       	mov	r14, r15
    12fc:	ff 20       	and	r15, r15
    12fe:	0c f4       	brge	.+2      	; 0x1302 <OLED_draw_circle+0x2c>
    1300:	4b c0       	rjmp	.+150    	; 0x1398 <OLED_draw_circle+0xc2>
		*OLED_cmd = 0x00 + (y >> 4);
    1302:	e0 91 08 01 	lds	r30, 0x0108
    1306:	f0 91 09 01 	lds	r31, 0x0109
    130a:	8f 2d       	mov	r24, r15
    130c:	82 95       	swap	r24
    130e:	8f 70       	andi	r24, 0x0F	; 15
    1310:	80 83       	st	Z, r24
		*OLED_cmd = 0x10 + (y >> 4);
    1312:	e0 91 08 01 	lds	r30, 0x0108
    1316:	f0 91 09 01 	lds	r31, 0x0109
    131a:	80 5f       	subi	r24, 0xF0	; 240
    131c:	80 83       	st	Z, r24
    131e:	3c c0       	rjmp	.+120    	; 0x1398 <OLED_draw_circle+0xc2>
	}

	//Draw circle (first part)
	for(int i = 0; i < 16; i++) {
		*OLED_data = pgm_read_byte(&circles[circle][i]);
    1320:	a0 91 06 01 	lds	r26, 0x0106
    1324:	b0 91 07 01 	lds	r27, 0x0107
    1328:	fc 01       	movw	r30, r24
    132a:	e2 0f       	add	r30, r18
    132c:	f3 1f       	adc	r31, r19
    132e:	e0 59       	subi	r30, 0x90	; 144
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	e4 91       	lpm	r30, Z
    1334:	ec 93       	st	X, r30
		*OLED_cmd = 0x00 + (y >> 4);
		*OLED_cmd = 0x10 + (y >> 4);
	}

	//Draw circle (first part)
	for(int i = 0; i < 16; i++) {
    1336:	2f 5f       	subi	r18, 0xFF	; 255
    1338:	3f 4f       	sbci	r19, 0xFF	; 255
    133a:	20 31       	cpi	r18, 0x10	; 16
    133c:	31 05       	cpc	r19, r1
    133e:	81 f7       	brne	.-32     	; 0x1320 <OLED_draw_circle+0x4a>
		*OLED_data = pgm_read_byte(&circles[circle][i]);
	}
	
	//Set position
	OLED_goto_line(x+1);
    1340:	c8 01       	movw	r24, r16
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	0e 94 05 08 	call	0x100a	; 0x100a <OLED_goto_line>
	if (y < 128) {
    1348:	ee 20       	and	r14, r14
    134a:	94 f1       	brlt	.+100    	; 0x13b0 <OLED_draw_circle+0xda>
		*OLED_cmd = 0x00 + (y >> 4);
    134c:	e0 91 08 01 	lds	r30, 0x0108
    1350:	f0 91 09 01 	lds	r31, 0x0109
    1354:	8f 2d       	mov	r24, r15
    1356:	82 95       	swap	r24
    1358:	8f 70       	andi	r24, 0x0F	; 15
    135a:	80 83       	st	Z, r24
		*OLED_cmd = 0x10 + (y >> 4);
    135c:	e0 91 08 01 	lds	r30, 0x0108
    1360:	f0 91 09 01 	lds	r31, 0x0109
    1364:	80 5f       	subi	r24, 0xF0	; 240
    1366:	80 83       	st	Z, r24
    1368:	23 c0       	rjmp	.+70     	; 0x13b0 <OLED_draw_circle+0xda>
	}
	
	//Draw circle (second part)
	for(int i = 16; i < 32; i++) {
		*OLED_data = pgm_read_byte(&circles[circle][i]);
    136a:	a0 91 06 01 	lds	r26, 0x0106
    136e:	b0 91 07 01 	lds	r27, 0x0107
    1372:	f9 01       	movw	r30, r18
    1374:	e8 0f       	add	r30, r24
    1376:	f9 1f       	adc	r31, r25
    1378:	e0 59       	subi	r30, 0x90	; 144
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	e4 91       	lpm	r30, Z
    137e:	ec 93       	st	X, r30
		*OLED_cmd = 0x00 + (y >> 4);
		*OLED_cmd = 0x10 + (y >> 4);
	}
	
	//Draw circle (second part)
	for(int i = 16; i < 32; i++) {
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	80 32       	cpi	r24, 0x20	; 32
    1384:	91 05       	cpc	r25, r1
    1386:	89 f7       	brne	.-30     	; 0x136a <OLED_draw_circle+0x94>
		*OLED_data = pgm_read_byte(&circles[circle][i]);

	}

	return 0;
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <OLED_draw_circle+0xbc>
	int circle;
	
	if (r < 8) {
		circle = r - 1;
	} else {
		return -1;
    138e:	2f ef       	ldi	r18, 0xFF	; 255
    1390:	3f ef       	ldi	r19, 0xFF	; 255
    1392:	82 2f       	mov	r24, r18
    1394:	93 2f       	mov	r25, r19
    1396:	18 c0       	rjmp	.+48     	; 0x13c8 <OLED_draw_circle+0xf2>
	}

	return 0;
}

int OLED_draw_circle(uint8_t x, uint8_t y, uint8_t r) {
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
		*OLED_cmd = 0x10 + (y >> 4);
	}

	//Draw circle (first part)
	for(int i = 0; i < 16; i++) {
		*OLED_data = pgm_read_byte(&circles[circle][i]);
    139c:	ce 01       	movw	r24, r28
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	82 95       	swap	r24
    13a4:	92 95       	swap	r25
    13a6:	90 7f       	andi	r25, 0xF0	; 240
    13a8:	98 27       	eor	r25, r24
    13aa:	80 7f       	andi	r24, 0xF0	; 240
    13ac:	98 27       	eor	r25, r24
    13ae:	b8 cf       	rjmp	.-144    	; 0x1320 <OLED_draw_circle+0x4a>
	}

	return 0;
}

int OLED_draw_circle(uint8_t x, uint8_t y, uint8_t r) {
    13b0:	80 e1       	ldi	r24, 0x10	; 16
    13b2:	90 e0       	ldi	r25, 0x00	; 0
		*OLED_cmd = 0x10 + (y >> 4);
	}
	
	//Draw circle (second part)
	for(int i = 16; i < 32; i++) {
		*OLED_data = pgm_read_byte(&circles[circle][i]);
    13b4:	9e 01       	movw	r18, r28
    13b6:	22 0f       	add	r18, r18
    13b8:	33 1f       	adc	r19, r19
    13ba:	22 95       	swap	r18
    13bc:	32 95       	swap	r19
    13be:	30 7f       	andi	r19, 0xF0	; 240
    13c0:	32 27       	eor	r19, r18
    13c2:	20 7f       	andi	r18, 0xF0	; 240
    13c4:	32 27       	eor	r19, r18
    13c6:	d1 cf       	rjmp	.-94     	; 0x136a <OLED_draw_circle+0x94>

	}

	return 0;
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	08 95       	ret

000013d6 <SPI_init>:
#define SPI_MISO PB6
#define SPI_SCK PB7

int SPI_init(void) {
	//Set MOSI, SCK and SS as output pins
	DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_SS);
    13d6:	87 b3       	in	r24, 0x17	; 23
    13d8:	80 6b       	ori	r24, 0xB0	; 176
    13da:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= ~(1<<SPI_MISO);
    13dc:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    13de:	81 e5       	ldi	r24, 0x51	; 81
    13e0:	8d b9       	out	0x0d, r24	; 13
	
	return 0;
}
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	08 95       	ret

000013e8 <SPI_send>:

int SPI_send(char data) {
	//Start the transmission
	SPDR = data;
    13e8:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for data to be transmitted (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
    13ea:	77 9b       	sbis	0x0e, 7	; 14
    13ec:	fe cf       	rjmp	.-4      	; 0x13ea <SPI_send+0x2>
	
	return 0;
}
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	08 95       	ret

000013f4 <SPI_read>:

uint8_t SPI_read(void) {
	//Send dummy data to read from slave
	SPI_send(0);
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <SPI_send>
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
    13fa:	77 9b       	sbis	0x0e, 7	; 14
    13fc:	fe cf       	rjmp	.-4      	; 0x13fa <SPI_read+0x6>
	
	return SPDR;
    13fe:	8f b1       	in	r24, 0x0f	; 15
}
    1400:	08 95       	ret

00001402 <SPI_select>:

void SPI_select(void) {
	//Set !SS to 0 to select the slave
	PORTB &= ~(1<<SPI_SS);
    1402:	c4 98       	cbi	0x18, 4	; 24
    1404:	08 95       	ret

00001406 <SPI_deselect>:
}

void SPI_deselect(void) {
	//Set !SS to 1 to deselect the slave
	PORTB |= (1<<SPI_SS);
    1406:	c4 9a       	sbi	0x18, 4	; 24
    1408:	08 95       	ret

0000140a <UART_putchar>:
	return 0;
}

int UART_putchar(char c, FILE *f) {
	//Wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    140a:	5d 9b       	sbis	0x0b, 5	; 11
    140c:	fe cf       	rjmp	.-4      	; 0x140a <UART_putchar>
	
	//Put data into buffer
	UDR0 = c;
    140e:	8c b9       	out	0x0c, r24	; 12

	return 0;
}
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	08 95       	ret

00001416 <UART_recchar>:

unsigned char UART_recchar(void) {
	//Wait for data to be received
	while (!(UCSR0A & (1<<RXC0)));
    1416:	5f 9b       	sbis	0x0b, 7	; 11
    1418:	fe cf       	rjmp	.-4      	; 0x1416 <UART_recchar>
	
	//Return data
	return UDR0;	
    141a:	8c b1       	in	r24, 0x0c	; 12
}
    141c:	08 95       	ret

0000141e <UART_init>:

FILE *uart;

int UART_init(unsigned int baudrate) {
	//Set UART0 baud rate
	UBRR0L = (unsigned char)(baudrate);
    141e:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (unsigned char)(baudrate >> 8);
    1420:	90 bd       	out	0x20, r25	; 32
	
	//Enable TX0 and RX0
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1422:	88 e1       	ldi	r24, 0x18	; 24
    1424:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1426:	8e e8       	ldi	r24, 0x8E	; 142
    1428:	80 bd       	out	0x20, r24	; 32
	
	//Connect printf
	uart = fdevopen(&UART_putchar, &UART_recchar);
    142a:	6b e0       	ldi	r22, 0x0B	; 11
    142c:	7a e0       	ldi	r23, 0x0A	; 10
    142e:	85 e0       	ldi	r24, 0x05	; 5
    1430:	9a e0       	ldi	r25, 0x0A	; 10
    1432:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fdevopen>
    1436:	90 93 a8 02 	sts	0x02A8, r25
    143a:	80 93 a7 02 	sts	0x02A7, r24

	return 0;
}
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	08 95       	ret

00001444 <UART_print>:
	
	//Return data
	return UDR0;	
}

int UART_print(char * str){
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	ec 01       	movw	r28, r24
	int i = 0;
	while (str[i] != 0x00){
    144a:	88 81       	ld	r24, Y
    144c:	88 23       	and	r24, r24
    144e:	51 f0       	breq	.+20     	; 0x1464 <UART_print+0x20>
	
	//Return data
	return UDR0;	
}

int UART_print(char * str){
    1450:	21 96       	adiw	r28, 0x01	; 1
	int i = 0;
	while (str[i] != 0x00){
		UART_putchar(str[i],uart);
    1452:	60 91 a7 02 	lds	r22, 0x02A7
    1456:	70 91 a8 02 	lds	r23, 0x02A8
    145a:	0e 94 05 0a 	call	0x140a	; 0x140a <UART_putchar>
	return UDR0;	
}

int UART_print(char * str){
	int i = 0;
	while (str[i] != 0x00){
    145e:	89 91       	ld	r24, Y+
    1460:	81 11       	cpse	r24, r1
    1462:	f7 cf       	rjmp	.-18     	; 0x1452 <UART_print+0xe>
		UART_putchar(str[i],uart);
		i++;
	}
	return 0;
}
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	08 95       	ret

0000146e <__divmodhi4>:
    146e:	97 fb       	bst	r25, 7
    1470:	07 2e       	mov	r0, r23
    1472:	16 f4       	brtc	.+4      	; 0x1478 <__divmodhi4+0xa>
    1474:	00 94       	com	r0
    1476:	07 d0       	rcall	.+14     	; 0x1486 <__divmodhi4_neg1>
    1478:	77 fd       	sbrc	r23, 7
    147a:	09 d0       	rcall	.+18     	; 0x148e <__divmodhi4_neg2>
    147c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__udivmodhi4>
    1480:	07 fc       	sbrc	r0, 7
    1482:	05 d0       	rcall	.+10     	; 0x148e <__divmodhi4_neg2>
    1484:	3e f4       	brtc	.+14     	; 0x1494 <__divmodhi4_exit>

00001486 <__divmodhi4_neg1>:
    1486:	90 95       	com	r25
    1488:	81 95       	neg	r24
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	08 95       	ret

0000148e <__divmodhi4_neg2>:
    148e:	70 95       	com	r23
    1490:	61 95       	neg	r22
    1492:	7f 4f       	sbci	r23, 0xFF	; 255

00001494 <__divmodhi4_exit>:
    1494:	08 95       	ret

00001496 <__udivmodhi4>:
    1496:	aa 1b       	sub	r26, r26
    1498:	bb 1b       	sub	r27, r27
    149a:	51 e1       	ldi	r21, 0x11	; 17
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <__udivmodhi4_ep>

0000149e <__udivmodhi4_loop>:
    149e:	aa 1f       	adc	r26, r26
    14a0:	bb 1f       	adc	r27, r27
    14a2:	a6 17       	cp	r26, r22
    14a4:	b7 07       	cpc	r27, r23
    14a6:	10 f0       	brcs	.+4      	; 0x14ac <__udivmodhi4_ep>
    14a8:	a6 1b       	sub	r26, r22
    14aa:	b7 0b       	sbc	r27, r23

000014ac <__udivmodhi4_ep>:
    14ac:	88 1f       	adc	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	5a 95       	dec	r21
    14b2:	a9 f7       	brne	.-22     	; 0x149e <__udivmodhi4_loop>
    14b4:	80 95       	com	r24
    14b6:	90 95       	com	r25
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	08 95       	ret

000014be <strcmp>:
    14be:	fb 01       	movw	r30, r22
    14c0:	dc 01       	movw	r26, r24
    14c2:	8d 91       	ld	r24, X+
    14c4:	01 90       	ld	r0, Z+
    14c6:	80 19       	sub	r24, r0
    14c8:	01 10       	cpse	r0, r1
    14ca:	d9 f3       	breq	.-10     	; 0x14c2 <strcmp+0x4>
    14cc:	99 0b       	sbc	r25, r25
    14ce:	08 95       	ret

000014d0 <fdevopen>:
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	ec 01       	movw	r28, r24
    14da:	8b 01       	movw	r16, r22
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	31 f4       	brne	.+12     	; 0x14ec <fdevopen+0x1c>
    14e0:	61 15       	cp	r22, r1
    14e2:	71 05       	cpc	r23, r1
    14e4:	19 f4       	brne	.+6      	; 0x14ec <fdevopen+0x1c>
    14e6:	e0 e0       	ldi	r30, 0x00	; 0
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	37 c0       	rjmp	.+110    	; 0x155a <fdevopen+0x8a>
    14ec:	6e e0       	ldi	r22, 0x0E	; 14
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <calloc>
    14f8:	fc 01       	movw	r30, r24
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	a1 f3       	breq	.-24     	; 0x14e6 <fdevopen+0x16>
    14fe:	80 e8       	ldi	r24, 0x80	; 128
    1500:	83 83       	std	Z+3, r24	; 0x03
    1502:	01 15       	cp	r16, r1
    1504:	11 05       	cpc	r17, r1
    1506:	71 f0       	breq	.+28     	; 0x1524 <fdevopen+0x54>
    1508:	13 87       	std	Z+11, r17	; 0x0b
    150a:	02 87       	std	Z+10, r16	; 0x0a
    150c:	81 e8       	ldi	r24, 0x81	; 129
    150e:	83 83       	std	Z+3, r24	; 0x03
    1510:	80 91 a9 02 	lds	r24, 0x02A9
    1514:	90 91 aa 02 	lds	r25, 0x02AA
    1518:	89 2b       	or	r24, r25
    151a:	21 f4       	brne	.+8      	; 0x1524 <fdevopen+0x54>
    151c:	f0 93 aa 02 	sts	0x02AA, r31
    1520:	e0 93 a9 02 	sts	0x02A9, r30
    1524:	20 97       	sbiw	r28, 0x00	; 0
    1526:	c9 f0       	breq	.+50     	; 0x155a <fdevopen+0x8a>
    1528:	d1 87       	std	Z+9, r29	; 0x09
    152a:	c0 87       	std	Z+8, r28	; 0x08
    152c:	83 81       	ldd	r24, Z+3	; 0x03
    152e:	82 60       	ori	r24, 0x02	; 2
    1530:	83 83       	std	Z+3, r24	; 0x03
    1532:	80 91 ab 02 	lds	r24, 0x02AB
    1536:	90 91 ac 02 	lds	r25, 0x02AC
    153a:	89 2b       	or	r24, r25
    153c:	71 f4       	brne	.+28     	; 0x155a <fdevopen+0x8a>
    153e:	f0 93 ac 02 	sts	0x02AC, r31
    1542:	e0 93 ab 02 	sts	0x02AB, r30
    1546:	80 91 ad 02 	lds	r24, 0x02AD
    154a:	90 91 ae 02 	lds	r25, 0x02AE
    154e:	89 2b       	or	r24, r25
    1550:	21 f4       	brne	.+8      	; 0x155a <fdevopen+0x8a>
    1552:	f0 93 ae 02 	sts	0x02AE, r31
    1556:	e0 93 ad 02 	sts	0x02AD, r30
    155a:	cf 01       	movw	r24, r30
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	08 95       	ret

00001566 <printf>:
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e9 eb       	ldi	r30, 0xB9	; 185
    156c:	fa e0       	ldi	r31, 0x0A	; 10
    156e:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__prologue_saves__+0x20>
    1572:	fe 01       	movw	r30, r28
    1574:	35 96       	adiw	r30, 0x05	; 5
    1576:	61 91       	ld	r22, Z+
    1578:	71 91       	ld	r23, Z+
    157a:	af 01       	movw	r20, r30
    157c:	80 91 ab 02 	lds	r24, 0x02AB
    1580:	90 91 ac 02 	lds	r25, 0x02AC
    1584:	0e 94 c7 0a 	call	0x158e	; 0x158e <vfprintf>
    1588:	e2 e0       	ldi	r30, 0x02	; 2
    158a:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__epilogue_restores__+0x20>

0000158e <vfprintf>:
    158e:	ac e0       	ldi	r26, 0x0C	; 12
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ed ec       	ldi	r30, 0xCD	; 205
    1594:	fa e0       	ldi	r31, 0x0A	; 10
    1596:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__prologue_saves__>
    159a:	7c 01       	movw	r14, r24
    159c:	6b 01       	movw	r12, r22
    159e:	8a 01       	movw	r16, r20
    15a0:	fc 01       	movw	r30, r24
    15a2:	17 82       	std	Z+7, r1	; 0x07
    15a4:	16 82       	std	Z+6, r1	; 0x06
    15a6:	83 81       	ldd	r24, Z+3	; 0x03
    15a8:	81 ff       	sbrs	r24, 1
    15aa:	c6 c1       	rjmp	.+908    	; 0x1938 <vfprintf+0x3aa>
    15ac:	88 24       	eor	r8, r8
    15ae:	83 94       	inc	r8
    15b0:	91 2c       	mov	r9, r1
    15b2:	8c 0e       	add	r8, r28
    15b4:	9d 1e       	adc	r9, r29
    15b6:	f7 01       	movw	r30, r14
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	f6 01       	movw	r30, r12
    15bc:	93 fd       	sbrc	r25, 3
    15be:	85 91       	lpm	r24, Z+
    15c0:	93 ff       	sbrs	r25, 3
    15c2:	81 91       	ld	r24, Z+
    15c4:	6f 01       	movw	r12, r30
    15c6:	88 23       	and	r24, r24
    15c8:	09 f4       	brne	.+2      	; 0x15cc <vfprintf+0x3e>
    15ca:	b2 c1       	rjmp	.+868    	; 0x1930 <vfprintf+0x3a2>
    15cc:	85 32       	cpi	r24, 0x25	; 37
    15ce:	39 f4       	brne	.+14     	; 0x15de <vfprintf+0x50>
    15d0:	93 fd       	sbrc	r25, 3
    15d2:	85 91       	lpm	r24, Z+
    15d4:	93 ff       	sbrs	r25, 3
    15d6:	81 91       	ld	r24, Z+
    15d8:	6f 01       	movw	r12, r30
    15da:	85 32       	cpi	r24, 0x25	; 37
    15dc:	29 f4       	brne	.+10     	; 0x15e8 <vfprintf+0x5a>
    15de:	b7 01       	movw	r22, r14
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fputc>
    15e6:	e7 cf       	rjmp	.-50     	; 0x15b6 <vfprintf+0x28>
    15e8:	51 2c       	mov	r5, r1
    15ea:	31 2c       	mov	r3, r1
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	20 32       	cpi	r18, 0x20	; 32
    15f0:	a8 f4       	brcc	.+42     	; 0x161c <vfprintf+0x8e>
    15f2:	8b 32       	cpi	r24, 0x2B	; 43
    15f4:	61 f0       	breq	.+24     	; 0x160e <vfprintf+0x80>
    15f6:	28 f4       	brcc	.+10     	; 0x1602 <vfprintf+0x74>
    15f8:	80 32       	cpi	r24, 0x20	; 32
    15fa:	51 f0       	breq	.+20     	; 0x1610 <vfprintf+0x82>
    15fc:	83 32       	cpi	r24, 0x23	; 35
    15fe:	71 f4       	brne	.+28     	; 0x161c <vfprintf+0x8e>
    1600:	0b c0       	rjmp	.+22     	; 0x1618 <vfprintf+0x8a>
    1602:	8d 32       	cpi	r24, 0x2D	; 45
    1604:	39 f0       	breq	.+14     	; 0x1614 <vfprintf+0x86>
    1606:	80 33       	cpi	r24, 0x30	; 48
    1608:	49 f4       	brne	.+18     	; 0x161c <vfprintf+0x8e>
    160a:	21 60       	ori	r18, 0x01	; 1
    160c:	28 c0       	rjmp	.+80     	; 0x165e <vfprintf+0xd0>
    160e:	22 60       	ori	r18, 0x02	; 2
    1610:	24 60       	ori	r18, 0x04	; 4
    1612:	25 c0       	rjmp	.+74     	; 0x165e <vfprintf+0xd0>
    1614:	28 60       	ori	r18, 0x08	; 8
    1616:	23 c0       	rjmp	.+70     	; 0x165e <vfprintf+0xd0>
    1618:	20 61       	ori	r18, 0x10	; 16
    161a:	21 c0       	rjmp	.+66     	; 0x165e <vfprintf+0xd0>
    161c:	27 fd       	sbrc	r18, 7
    161e:	27 c0       	rjmp	.+78     	; 0x166e <vfprintf+0xe0>
    1620:	38 2f       	mov	r19, r24
    1622:	30 53       	subi	r19, 0x30	; 48
    1624:	3a 30       	cpi	r19, 0x0A	; 10
    1626:	78 f4       	brcc	.+30     	; 0x1646 <vfprintf+0xb8>
    1628:	26 ff       	sbrs	r18, 6
    162a:	06 c0       	rjmp	.+12     	; 0x1638 <vfprintf+0xaa>
    162c:	fa e0       	ldi	r31, 0x0A	; 10
    162e:	5f 9e       	mul	r5, r31
    1630:	30 0d       	add	r19, r0
    1632:	11 24       	eor	r1, r1
    1634:	53 2e       	mov	r5, r19
    1636:	13 c0       	rjmp	.+38     	; 0x165e <vfprintf+0xd0>
    1638:	8a e0       	ldi	r24, 0x0A	; 10
    163a:	38 9e       	mul	r3, r24
    163c:	30 0d       	add	r19, r0
    163e:	11 24       	eor	r1, r1
    1640:	33 2e       	mov	r3, r19
    1642:	20 62       	ori	r18, 0x20	; 32
    1644:	0c c0       	rjmp	.+24     	; 0x165e <vfprintf+0xd0>
    1646:	8e 32       	cpi	r24, 0x2E	; 46
    1648:	21 f4       	brne	.+8      	; 0x1652 <vfprintf+0xc4>
    164a:	26 fd       	sbrc	r18, 6
    164c:	71 c1       	rjmp	.+738    	; 0x1930 <vfprintf+0x3a2>
    164e:	20 64       	ori	r18, 0x40	; 64
    1650:	06 c0       	rjmp	.+12     	; 0x165e <vfprintf+0xd0>
    1652:	8c 36       	cpi	r24, 0x6C	; 108
    1654:	11 f4       	brne	.+4      	; 0x165a <vfprintf+0xcc>
    1656:	20 68       	ori	r18, 0x80	; 128
    1658:	02 c0       	rjmp	.+4      	; 0x165e <vfprintf+0xd0>
    165a:	88 36       	cpi	r24, 0x68	; 104
    165c:	41 f4       	brne	.+16     	; 0x166e <vfprintf+0xe0>
    165e:	f6 01       	movw	r30, r12
    1660:	93 fd       	sbrc	r25, 3
    1662:	85 91       	lpm	r24, Z+
    1664:	93 ff       	sbrs	r25, 3
    1666:	81 91       	ld	r24, Z+
    1668:	6f 01       	movw	r12, r30
    166a:	81 11       	cpse	r24, r1
    166c:	c0 cf       	rjmp	.-128    	; 0x15ee <vfprintf+0x60>
    166e:	98 2f       	mov	r25, r24
    1670:	95 54       	subi	r25, 0x45	; 69
    1672:	93 30       	cpi	r25, 0x03	; 3
    1674:	18 f0       	brcs	.+6      	; 0x167c <vfprintf+0xee>
    1676:	90 52       	subi	r25, 0x20	; 32
    1678:	93 30       	cpi	r25, 0x03	; 3
    167a:	28 f4       	brcc	.+10     	; 0x1686 <vfprintf+0xf8>
    167c:	0c 5f       	subi	r16, 0xFC	; 252
    167e:	1f 4f       	sbci	r17, 0xFF	; 255
    1680:	ff e3       	ldi	r31, 0x3F	; 63
    1682:	f9 83       	std	Y+1, r31	; 0x01
    1684:	0d c0       	rjmp	.+26     	; 0x16a0 <vfprintf+0x112>
    1686:	83 36       	cpi	r24, 0x63	; 99
    1688:	31 f0       	breq	.+12     	; 0x1696 <vfprintf+0x108>
    168a:	83 37       	cpi	r24, 0x73	; 115
    168c:	71 f0       	breq	.+28     	; 0x16aa <vfprintf+0x11c>
    168e:	83 35       	cpi	r24, 0x53	; 83
    1690:	09 f0       	breq	.+2      	; 0x1694 <vfprintf+0x106>
    1692:	5e c0       	rjmp	.+188    	; 0x1750 <vfprintf+0x1c2>
    1694:	23 c0       	rjmp	.+70     	; 0x16dc <vfprintf+0x14e>
    1696:	f8 01       	movw	r30, r16
    1698:	80 81       	ld	r24, Z
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	0e 5f       	subi	r16, 0xFE	; 254
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	44 24       	eor	r4, r4
    16a2:	43 94       	inc	r4
    16a4:	51 2c       	mov	r5, r1
    16a6:	54 01       	movw	r10, r8
    16a8:	15 c0       	rjmp	.+42     	; 0x16d4 <vfprintf+0x146>
    16aa:	38 01       	movw	r6, r16
    16ac:	f2 e0       	ldi	r31, 0x02	; 2
    16ae:	6f 0e       	add	r6, r31
    16b0:	71 1c       	adc	r7, r1
    16b2:	f8 01       	movw	r30, r16
    16b4:	a0 80       	ld	r10, Z
    16b6:	b1 80       	ldd	r11, Z+1	; 0x01
    16b8:	26 ff       	sbrs	r18, 6
    16ba:	03 c0       	rjmp	.+6      	; 0x16c2 <vfprintf+0x134>
    16bc:	65 2d       	mov	r22, r5
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <vfprintf+0x138>
    16c2:	6f ef       	ldi	r22, 0xFF	; 255
    16c4:	7f ef       	ldi	r23, 0xFF	; 255
    16c6:	c5 01       	movw	r24, r10
    16c8:	2c 87       	std	Y+12, r18	; 0x0c
    16ca:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <strnlen>
    16ce:	2c 01       	movw	r4, r24
    16d0:	83 01       	movw	r16, r6
    16d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16d4:	6f e7       	ldi	r22, 0x7F	; 127
    16d6:	26 2e       	mov	r2, r22
    16d8:	22 22       	and	r2, r18
    16da:	18 c0       	rjmp	.+48     	; 0x170c <vfprintf+0x17e>
    16dc:	38 01       	movw	r6, r16
    16de:	f2 e0       	ldi	r31, 0x02	; 2
    16e0:	6f 0e       	add	r6, r31
    16e2:	71 1c       	adc	r7, r1
    16e4:	f8 01       	movw	r30, r16
    16e6:	a0 80       	ld	r10, Z
    16e8:	b1 80       	ldd	r11, Z+1	; 0x01
    16ea:	26 ff       	sbrs	r18, 6
    16ec:	03 c0       	rjmp	.+6      	; 0x16f4 <vfprintf+0x166>
    16ee:	65 2d       	mov	r22, r5
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <vfprintf+0x16a>
    16f4:	6f ef       	ldi	r22, 0xFF	; 255
    16f6:	7f ef       	ldi	r23, 0xFF	; 255
    16f8:	c5 01       	movw	r24, r10
    16fa:	2c 87       	std	Y+12, r18	; 0x0c
    16fc:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <strnlen_P>
    1700:	2c 01       	movw	r4, r24
    1702:	2c 85       	ldd	r18, Y+12	; 0x0c
    1704:	50 e8       	ldi	r21, 0x80	; 128
    1706:	25 2e       	mov	r2, r21
    1708:	22 2a       	or	r2, r18
    170a:	83 01       	movw	r16, r6
    170c:	23 fc       	sbrc	r2, 3
    170e:	1c c0       	rjmp	.+56     	; 0x1748 <vfprintf+0x1ba>
    1710:	06 c0       	rjmp	.+12     	; 0x171e <vfprintf+0x190>
    1712:	b7 01       	movw	r22, r14
    1714:	80 e2       	ldi	r24, 0x20	; 32
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fputc>
    171c:	3a 94       	dec	r3
    171e:	83 2d       	mov	r24, r3
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	48 16       	cp	r4, r24
    1724:	59 06       	cpc	r5, r25
    1726:	a8 f3       	brcs	.-22     	; 0x1712 <vfprintf+0x184>
    1728:	0f c0       	rjmp	.+30     	; 0x1748 <vfprintf+0x1ba>
    172a:	f5 01       	movw	r30, r10
    172c:	27 fc       	sbrc	r2, 7
    172e:	85 91       	lpm	r24, Z+
    1730:	27 fe       	sbrs	r2, 7
    1732:	81 91       	ld	r24, Z+
    1734:	5f 01       	movw	r10, r30
    1736:	b7 01       	movw	r22, r14
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fputc>
    173e:	31 10       	cpse	r3, r1
    1740:	3a 94       	dec	r3
    1742:	f1 e0       	ldi	r31, 0x01	; 1
    1744:	4f 1a       	sub	r4, r31
    1746:	51 08       	sbc	r5, r1
    1748:	41 14       	cp	r4, r1
    174a:	51 04       	cpc	r5, r1
    174c:	71 f7       	brne	.-36     	; 0x172a <vfprintf+0x19c>
    174e:	ed c0       	rjmp	.+474    	; 0x192a <vfprintf+0x39c>
    1750:	84 36       	cpi	r24, 0x64	; 100
    1752:	11 f0       	breq	.+4      	; 0x1758 <vfprintf+0x1ca>
    1754:	89 36       	cpi	r24, 0x69	; 105
    1756:	41 f5       	brne	.+80     	; 0x17a8 <vfprintf+0x21a>
    1758:	f8 01       	movw	r30, r16
    175a:	27 ff       	sbrs	r18, 7
    175c:	07 c0       	rjmp	.+14     	; 0x176c <vfprintf+0x1de>
    175e:	60 81       	ld	r22, Z
    1760:	71 81       	ldd	r23, Z+1	; 0x01
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	0c 5f       	subi	r16, 0xFC	; 252
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	08 c0       	rjmp	.+16     	; 0x177c <vfprintf+0x1ee>
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	88 27       	eor	r24, r24
    1772:	77 fd       	sbrc	r23, 7
    1774:	80 95       	com	r24
    1776:	98 2f       	mov	r25, r24
    1778:	0e 5f       	subi	r16, 0xFE	; 254
    177a:	1f 4f       	sbci	r17, 0xFF	; 255
    177c:	4f e6       	ldi	r20, 0x6F	; 111
    177e:	b4 2e       	mov	r11, r20
    1780:	b2 22       	and	r11, r18
    1782:	97 ff       	sbrs	r25, 7
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <vfprintf+0x20a>
    1786:	90 95       	com	r25
    1788:	80 95       	com	r24
    178a:	70 95       	com	r23
    178c:	61 95       	neg	r22
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	8f 4f       	sbci	r24, 0xFF	; 255
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	f0 e8       	ldi	r31, 0x80	; 128
    1796:	bf 2a       	or	r11, r31
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	a4 01       	movw	r20, r8
    179e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__ultoa_invert>
    17a2:	a8 2e       	mov	r10, r24
    17a4:	a8 18       	sub	r10, r8
    17a6:	43 c0       	rjmp	.+134    	; 0x182e <vfprintf+0x2a0>
    17a8:	85 37       	cpi	r24, 0x75	; 117
    17aa:	31 f4       	brne	.+12     	; 0x17b8 <vfprintf+0x22a>
    17ac:	3f ee       	ldi	r19, 0xEF	; 239
    17ae:	b3 2e       	mov	r11, r19
    17b0:	b2 22       	and	r11, r18
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	24 c0       	rjmp	.+72     	; 0x1800 <vfprintf+0x272>
    17b8:	99 ef       	ldi	r25, 0xF9	; 249
    17ba:	b9 2e       	mov	r11, r25
    17bc:	b2 22       	and	r11, r18
    17be:	8f 36       	cpi	r24, 0x6F	; 111
    17c0:	b9 f0       	breq	.+46     	; 0x17f0 <vfprintf+0x262>
    17c2:	20 f4       	brcc	.+8      	; 0x17cc <vfprintf+0x23e>
    17c4:	88 35       	cpi	r24, 0x58	; 88
    17c6:	09 f0       	breq	.+2      	; 0x17ca <vfprintf+0x23c>
    17c8:	b3 c0       	rjmp	.+358    	; 0x1930 <vfprintf+0x3a2>
    17ca:	0d c0       	rjmp	.+26     	; 0x17e6 <vfprintf+0x258>
    17cc:	80 37       	cpi	r24, 0x70	; 112
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <vfprintf+0x24a>
    17d0:	88 37       	cpi	r24, 0x78	; 120
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <vfprintf+0x248>
    17d4:	ad c0       	rjmp	.+346    	; 0x1930 <vfprintf+0x3a2>
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <vfprintf+0x24e>
    17d8:	20 e1       	ldi	r18, 0x10	; 16
    17da:	b2 2a       	or	r11, r18
    17dc:	b4 fe       	sbrs	r11, 4
    17de:	0b c0       	rjmp	.+22     	; 0x17f6 <vfprintf+0x268>
    17e0:	84 e0       	ldi	r24, 0x04	; 4
    17e2:	b8 2a       	or	r11, r24
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <vfprintf+0x268>
    17e6:	24 ff       	sbrs	r18, 4
    17e8:	09 c0       	rjmp	.+18     	; 0x17fc <vfprintf+0x26e>
    17ea:	e6 e0       	ldi	r30, 0x06	; 6
    17ec:	be 2a       	or	r11, r30
    17ee:	06 c0       	rjmp	.+12     	; 0x17fc <vfprintf+0x26e>
    17f0:	28 e0       	ldi	r18, 0x08	; 8
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	05 c0       	rjmp	.+10     	; 0x1800 <vfprintf+0x272>
    17f6:	20 e1       	ldi	r18, 0x10	; 16
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <vfprintf+0x272>
    17fc:	20 e1       	ldi	r18, 0x10	; 16
    17fe:	32 e0       	ldi	r19, 0x02	; 2
    1800:	f8 01       	movw	r30, r16
    1802:	b7 fe       	sbrs	r11, 7
    1804:	07 c0       	rjmp	.+14     	; 0x1814 <vfprintf+0x286>
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	0c 5f       	subi	r16, 0xFC	; 252
    1810:	1f 4f       	sbci	r17, 0xFF	; 255
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <vfprintf+0x292>
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 5f       	subi	r16, 0xFE	; 254
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	a4 01       	movw	r20, r8
    1822:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__ultoa_invert>
    1826:	a8 2e       	mov	r10, r24
    1828:	a8 18       	sub	r10, r8
    182a:	ff e7       	ldi	r31, 0x7F	; 127
    182c:	bf 22       	and	r11, r31
    182e:	b6 fe       	sbrs	r11, 6
    1830:	0b c0       	rjmp	.+22     	; 0x1848 <vfprintf+0x2ba>
    1832:	2b 2d       	mov	r18, r11
    1834:	2e 7f       	andi	r18, 0xFE	; 254
    1836:	a5 14       	cp	r10, r5
    1838:	50 f4       	brcc	.+20     	; 0x184e <vfprintf+0x2c0>
    183a:	b4 fe       	sbrs	r11, 4
    183c:	0a c0       	rjmp	.+20     	; 0x1852 <vfprintf+0x2c4>
    183e:	b2 fc       	sbrc	r11, 2
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <vfprintf+0x2c4>
    1842:	2b 2d       	mov	r18, r11
    1844:	2e 7e       	andi	r18, 0xEE	; 238
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <vfprintf+0x2c4>
    1848:	7a 2c       	mov	r7, r10
    184a:	2b 2d       	mov	r18, r11
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <vfprintf+0x2c6>
    184e:	7a 2c       	mov	r7, r10
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <vfprintf+0x2c6>
    1852:	75 2c       	mov	r7, r5
    1854:	24 ff       	sbrs	r18, 4
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <vfprintf+0x2e4>
    1858:	fe 01       	movw	r30, r28
    185a:	ea 0d       	add	r30, r10
    185c:	f1 1d       	adc	r31, r1
    185e:	80 81       	ld	r24, Z
    1860:	80 33       	cpi	r24, 0x30	; 48
    1862:	11 f4       	brne	.+4      	; 0x1868 <vfprintf+0x2da>
    1864:	29 7e       	andi	r18, 0xE9	; 233
    1866:	09 c0       	rjmp	.+18     	; 0x187a <vfprintf+0x2ec>
    1868:	22 ff       	sbrs	r18, 2
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <vfprintf+0x2ea>
    186c:	73 94       	inc	r7
    186e:	73 94       	inc	r7
    1870:	04 c0       	rjmp	.+8      	; 0x187a <vfprintf+0x2ec>
    1872:	82 2f       	mov	r24, r18
    1874:	86 78       	andi	r24, 0x86	; 134
    1876:	09 f0       	breq	.+2      	; 0x187a <vfprintf+0x2ec>
    1878:	73 94       	inc	r7
    187a:	23 fd       	sbrc	r18, 3
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <vfprintf+0x318>
    187e:	20 ff       	sbrs	r18, 0
    1880:	0f c0       	rjmp	.+30     	; 0x18a0 <vfprintf+0x312>
    1882:	5a 2c       	mov	r5, r10
    1884:	73 14       	cp	r7, r3
    1886:	60 f4       	brcc	.+24     	; 0x18a0 <vfprintf+0x312>
    1888:	53 0c       	add	r5, r3
    188a:	57 18       	sub	r5, r7
    188c:	73 2c       	mov	r7, r3
    188e:	08 c0       	rjmp	.+16     	; 0x18a0 <vfprintf+0x312>
    1890:	b7 01       	movw	r22, r14
    1892:	80 e2       	ldi	r24, 0x20	; 32
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	2c 87       	std	Y+12, r18	; 0x0c
    1898:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fputc>
    189c:	73 94       	inc	r7
    189e:	2c 85       	ldd	r18, Y+12	; 0x0c
    18a0:	73 14       	cp	r7, r3
    18a2:	b0 f3       	brcs	.-20     	; 0x1890 <vfprintf+0x302>
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <vfprintf+0x320>
    18a6:	73 14       	cp	r7, r3
    18a8:	10 f4       	brcc	.+4      	; 0x18ae <vfprintf+0x320>
    18aa:	37 18       	sub	r3, r7
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <vfprintf+0x322>
    18ae:	31 2c       	mov	r3, r1
    18b0:	24 ff       	sbrs	r18, 4
    18b2:	12 c0       	rjmp	.+36     	; 0x18d8 <vfprintf+0x34a>
    18b4:	b7 01       	movw	r22, r14
    18b6:	80 e3       	ldi	r24, 0x30	; 48
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	2c 87       	std	Y+12, r18	; 0x0c
    18bc:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fputc>
    18c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    18c2:	22 ff       	sbrs	r18, 2
    18c4:	1e c0       	rjmp	.+60     	; 0x1902 <vfprintf+0x374>
    18c6:	21 ff       	sbrs	r18, 1
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <vfprintf+0x342>
    18ca:	88 e5       	ldi	r24, 0x58	; 88
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <vfprintf+0x346>
    18d0:	88 e7       	ldi	r24, 0x78	; 120
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	b7 01       	movw	r22, r14
    18d6:	0c c0       	rjmp	.+24     	; 0x18f0 <vfprintf+0x362>
    18d8:	82 2f       	mov	r24, r18
    18da:	86 78       	andi	r24, 0x86	; 134
    18dc:	91 f0       	breq	.+36     	; 0x1902 <vfprintf+0x374>
    18de:	21 fd       	sbrc	r18, 1
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <vfprintf+0x358>
    18e2:	80 e2       	ldi	r24, 0x20	; 32
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <vfprintf+0x35a>
    18e6:	8b e2       	ldi	r24, 0x2B	; 43
    18e8:	27 fd       	sbrc	r18, 7
    18ea:	8d e2       	ldi	r24, 0x2D	; 45
    18ec:	b7 01       	movw	r22, r14
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fputc>
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <vfprintf+0x374>
    18f6:	b7 01       	movw	r22, r14
    18f8:	80 e3       	ldi	r24, 0x30	; 48
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fputc>
    1900:	5a 94       	dec	r5
    1902:	a5 14       	cp	r10, r5
    1904:	c0 f3       	brcs	.-16     	; 0x18f6 <vfprintf+0x368>
    1906:	aa 94       	dec	r10
    1908:	f4 01       	movw	r30, r8
    190a:	ea 0d       	add	r30, r10
    190c:	f1 1d       	adc	r31, r1
    190e:	b7 01       	movw	r22, r14
    1910:	80 81       	ld	r24, Z
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fputc>
    1918:	a1 10       	cpse	r10, r1
    191a:	f5 cf       	rjmp	.-22     	; 0x1906 <vfprintf+0x378>
    191c:	06 c0       	rjmp	.+12     	; 0x192a <vfprintf+0x39c>
    191e:	b7 01       	movw	r22, r14
    1920:	80 e2       	ldi	r24, 0x20	; 32
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fputc>
    1928:	3a 94       	dec	r3
    192a:	31 10       	cpse	r3, r1
    192c:	f8 cf       	rjmp	.-16     	; 0x191e <vfprintf+0x390>
    192e:	43 ce       	rjmp	.-890    	; 0x15b6 <vfprintf+0x28>
    1930:	f7 01       	movw	r30, r14
    1932:	26 81       	ldd	r18, Z+6	; 0x06
    1934:	37 81       	ldd	r19, Z+7	; 0x07
    1936:	02 c0       	rjmp	.+4      	; 0x193c <vfprintf+0x3ae>
    1938:	2f ef       	ldi	r18, 0xFF	; 255
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	c9 01       	movw	r24, r18
    193e:	2c 96       	adiw	r28, 0x0c	; 12
    1940:	e2 e1       	ldi	r30, 0x12	; 18
    1942:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__epilogue_restores__>

00001946 <calloc>:
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	68 9f       	mul	r22, r24
    1950:	80 01       	movw	r16, r0
    1952:	69 9f       	mul	r22, r25
    1954:	10 0d       	add	r17, r0
    1956:	78 9f       	mul	r23, r24
    1958:	10 0d       	add	r17, r0
    195a:	11 24       	eor	r1, r1
    195c:	c8 01       	movw	r24, r16
    195e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <malloc>
    1962:	c8 2f       	mov	r28, r24
    1964:	d9 2f       	mov	r29, r25
    1966:	20 97       	sbiw	r28, 0x00	; 0
    1968:	31 f0       	breq	.+12     	; 0x1976 <calloc+0x30>
    196a:	a8 01       	movw	r20, r16
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	8c 2f       	mov	r24, r28
    1972:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <memset>
    1976:	ce 01       	movw	r24, r28
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	08 95       	ret

00001982 <malloc>:
    1982:	0f 93       	push	r16
    1984:	1f 93       	push	r17
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	82 30       	cpi	r24, 0x02	; 2
    198c:	91 05       	cpc	r25, r1
    198e:	10 f4       	brcc	.+4      	; 0x1994 <malloc+0x12>
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	e0 91 b1 02 	lds	r30, 0x02B1
    1998:	f0 91 b2 02 	lds	r31, 0x02B2
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	c0 e0       	ldi	r28, 0x00	; 0
    19a2:	d0 e0       	ldi	r29, 0x00	; 0
    19a4:	23 c0       	rjmp	.+70     	; 0x19ec <malloc+0x6a>
    19a6:	40 81       	ld	r20, Z
    19a8:	51 81       	ldd	r21, Z+1	; 0x01
    19aa:	48 17       	cp	r20, r24
    19ac:	59 07       	cpc	r21, r25
    19ae:	a8 f0       	brcs	.+42     	; 0x19da <malloc+0x58>
    19b0:	48 17       	cp	r20, r24
    19b2:	59 07       	cpc	r21, r25
    19b4:	61 f4       	brne	.+24     	; 0x19ce <malloc+0x4c>
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	20 97       	sbiw	r28, 0x00	; 0
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <malloc+0x42>
    19be:	9b 83       	std	Y+3, r25	; 0x03
    19c0:	8a 83       	std	Y+2, r24	; 0x02
    19c2:	2e c0       	rjmp	.+92     	; 0x1a20 <malloc+0x9e>
    19c4:	90 93 b2 02 	sts	0x02B2, r25
    19c8:	80 93 b1 02 	sts	0x02B1, r24
    19cc:	29 c0       	rjmp	.+82     	; 0x1a20 <malloc+0x9e>
    19ce:	21 15       	cp	r18, r1
    19d0:	31 05       	cpc	r19, r1
    19d2:	29 f0       	breq	.+10     	; 0x19de <malloc+0x5c>
    19d4:	42 17       	cp	r20, r18
    19d6:	53 07       	cpc	r21, r19
    19d8:	10 f0       	brcs	.+4      	; 0x19de <malloc+0x5c>
    19da:	a9 01       	movw	r20, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <malloc+0x60>
    19de:	be 01       	movw	r22, r28
    19e0:	df 01       	movw	r26, r30
    19e2:	02 81       	ldd	r16, Z+2	; 0x02
    19e4:	13 81       	ldd	r17, Z+3	; 0x03
    19e6:	ef 01       	movw	r28, r30
    19e8:	9a 01       	movw	r18, r20
    19ea:	f8 01       	movw	r30, r16
    19ec:	30 97       	sbiw	r30, 0x00	; 0
    19ee:	d9 f6       	brne	.-74     	; 0x19a6 <malloc+0x24>
    19f0:	21 15       	cp	r18, r1
    19f2:	31 05       	cpc	r19, r1
    19f4:	09 f1       	breq	.+66     	; 0x1a38 <malloc+0xb6>
    19f6:	28 1b       	sub	r18, r24
    19f8:	39 0b       	sbc	r19, r25
    19fa:	24 30       	cpi	r18, 0x04	; 4
    19fc:	31 05       	cpc	r19, r1
    19fe:	90 f4       	brcc	.+36     	; 0x1a24 <malloc+0xa2>
    1a00:	12 96       	adiw	r26, 0x02	; 2
    1a02:	8d 91       	ld	r24, X+
    1a04:	9c 91       	ld	r25, X
    1a06:	13 97       	sbiw	r26, 0x03	; 3
    1a08:	61 15       	cp	r22, r1
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	21 f0       	breq	.+8      	; 0x1a16 <malloc+0x94>
    1a0e:	fb 01       	movw	r30, r22
    1a10:	93 83       	std	Z+3, r25	; 0x03
    1a12:	82 83       	std	Z+2, r24	; 0x02
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <malloc+0x9c>
    1a16:	90 93 b2 02 	sts	0x02B2, r25
    1a1a:	80 93 b1 02 	sts	0x02B1, r24
    1a1e:	fd 01       	movw	r30, r26
    1a20:	32 96       	adiw	r30, 0x02	; 2
    1a22:	44 c0       	rjmp	.+136    	; 0x1aac <malloc+0x12a>
    1a24:	fd 01       	movw	r30, r26
    1a26:	e2 0f       	add	r30, r18
    1a28:	f3 1f       	adc	r31, r19
    1a2a:	81 93       	st	Z+, r24
    1a2c:	91 93       	st	Z+, r25
    1a2e:	22 50       	subi	r18, 0x02	; 2
    1a30:	31 09       	sbc	r19, r1
    1a32:	2d 93       	st	X+, r18
    1a34:	3c 93       	st	X, r19
    1a36:	3a c0       	rjmp	.+116    	; 0x1aac <malloc+0x12a>
    1a38:	20 91 af 02 	lds	r18, 0x02AF
    1a3c:	30 91 b0 02 	lds	r19, 0x02B0
    1a40:	23 2b       	or	r18, r19
    1a42:	41 f4       	brne	.+16     	; 0x1a54 <malloc+0xd2>
    1a44:	20 91 02 01 	lds	r18, 0x0102
    1a48:	30 91 03 01 	lds	r19, 0x0103
    1a4c:	30 93 b0 02 	sts	0x02B0, r19
    1a50:	20 93 af 02 	sts	0x02AF, r18
    1a54:	20 91 00 01 	lds	r18, 0x0100
    1a58:	30 91 01 01 	lds	r19, 0x0101
    1a5c:	21 15       	cp	r18, r1
    1a5e:	31 05       	cpc	r19, r1
    1a60:	41 f4       	brne	.+16     	; 0x1a72 <malloc+0xf0>
    1a62:	2d b7       	in	r18, 0x3d	; 61
    1a64:	3e b7       	in	r19, 0x3e	; 62
    1a66:	40 91 04 01 	lds	r20, 0x0104
    1a6a:	50 91 05 01 	lds	r21, 0x0105
    1a6e:	24 1b       	sub	r18, r20
    1a70:	35 0b       	sbc	r19, r21
    1a72:	e0 91 af 02 	lds	r30, 0x02AF
    1a76:	f0 91 b0 02 	lds	r31, 0x02B0
    1a7a:	e2 17       	cp	r30, r18
    1a7c:	f3 07       	cpc	r31, r19
    1a7e:	a0 f4       	brcc	.+40     	; 0x1aa8 <malloc+0x126>
    1a80:	2e 1b       	sub	r18, r30
    1a82:	3f 0b       	sbc	r19, r31
    1a84:	28 17       	cp	r18, r24
    1a86:	39 07       	cpc	r19, r25
    1a88:	78 f0       	brcs	.+30     	; 0x1aa8 <malloc+0x126>
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	4e 5f       	subi	r20, 0xFE	; 254
    1a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a90:	24 17       	cp	r18, r20
    1a92:	35 07       	cpc	r19, r21
    1a94:	48 f0       	brcs	.+18     	; 0x1aa8 <malloc+0x126>
    1a96:	4e 0f       	add	r20, r30
    1a98:	5f 1f       	adc	r21, r31
    1a9a:	50 93 b0 02 	sts	0x02B0, r21
    1a9e:	40 93 af 02 	sts	0x02AF, r20
    1aa2:	81 93       	st	Z+, r24
    1aa4:	91 93       	st	Z+, r25
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <malloc+0x12a>
    1aa8:	e0 e0       	ldi	r30, 0x00	; 0
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	cf 01       	movw	r24, r30
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <free>:
    1ab8:	ef 92       	push	r14
    1aba:	ff 92       	push	r15
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <free+0x12>
    1ac8:	8f c0       	rjmp	.+286    	; 0x1be8 <free+0x130>
    1aca:	dc 01       	movw	r26, r24
    1acc:	12 97       	sbiw	r26, 0x02	; 2
    1ace:	13 96       	adiw	r26, 0x03	; 3
    1ad0:	1c 92       	st	X, r1
    1ad2:	1e 92       	st	-X, r1
    1ad4:	12 97       	sbiw	r26, 0x02	; 2
    1ad6:	e0 90 b1 02 	lds	r14, 0x02B1
    1ada:	f0 90 b2 02 	lds	r15, 0x02B2
    1ade:	e1 14       	cp	r14, r1
    1ae0:	f1 04       	cpc	r15, r1
    1ae2:	89 f4       	brne	.+34     	; 0x1b06 <free+0x4e>
    1ae4:	2d 91       	ld	r18, X+
    1ae6:	3c 91       	ld	r19, X
    1ae8:	11 97       	sbiw	r26, 0x01	; 1
    1aea:	28 0f       	add	r18, r24
    1aec:	39 1f       	adc	r19, r25
    1aee:	80 91 af 02 	lds	r24, 0x02AF
    1af2:	90 91 b0 02 	lds	r25, 0x02B0
    1af6:	82 17       	cp	r24, r18
    1af8:	93 07       	cpc	r25, r19
    1afa:	89 f5       	brne	.+98     	; 0x1b5e <free+0xa6>
    1afc:	b0 93 b0 02 	sts	0x02B0, r27
    1b00:	a0 93 af 02 	sts	0x02AF, r26
    1b04:	71 c0       	rjmp	.+226    	; 0x1be8 <free+0x130>
    1b06:	e7 01       	movw	r28, r14
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <free+0x58>
    1b0e:	ea 01       	movw	r28, r20
    1b10:	ca 17       	cp	r28, r26
    1b12:	db 07       	cpc	r29, r27
    1b14:	38 f4       	brcc	.+14     	; 0x1b24 <free+0x6c>
    1b16:	4a 81       	ldd	r20, Y+2	; 0x02
    1b18:	5b 81       	ldd	r21, Y+3	; 0x03
    1b1a:	9e 01       	movw	r18, r28
    1b1c:	41 15       	cp	r20, r1
    1b1e:	51 05       	cpc	r21, r1
    1b20:	b1 f7       	brne	.-20     	; 0x1b0e <free+0x56>
    1b22:	22 c0       	rjmp	.+68     	; 0x1b68 <free+0xb0>
    1b24:	bc 01       	movw	r22, r24
    1b26:	62 50       	subi	r22, 0x02	; 2
    1b28:	71 09       	sbc	r23, r1
    1b2a:	fb 01       	movw	r30, r22
    1b2c:	d3 83       	std	Z+3, r29	; 0x03
    1b2e:	c2 83       	std	Z+2, r28	; 0x02
    1b30:	00 81       	ld	r16, Z
    1b32:	11 81       	ldd	r17, Z+1	; 0x01
    1b34:	ac 01       	movw	r20, r24
    1b36:	40 0f       	add	r20, r16
    1b38:	51 1f       	adc	r21, r17
    1b3a:	4c 17       	cp	r20, r28
    1b3c:	5d 07       	cpc	r21, r29
    1b3e:	61 f4       	brne	.+24     	; 0x1b58 <free+0xa0>
    1b40:	48 81       	ld	r20, Y
    1b42:	59 81       	ldd	r21, Y+1	; 0x01
    1b44:	40 0f       	add	r20, r16
    1b46:	51 1f       	adc	r21, r17
    1b48:	4e 5f       	subi	r20, 0xFE	; 254
    1b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4c:	51 83       	std	Z+1, r21	; 0x01
    1b4e:	40 83       	st	Z, r20
    1b50:	4a 81       	ldd	r20, Y+2	; 0x02
    1b52:	5b 81       	ldd	r21, Y+3	; 0x03
    1b54:	53 83       	std	Z+3, r21	; 0x03
    1b56:	42 83       	std	Z+2, r20	; 0x02
    1b58:	21 15       	cp	r18, r1
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	29 f4       	brne	.+10     	; 0x1b68 <free+0xb0>
    1b5e:	b0 93 b2 02 	sts	0x02B2, r27
    1b62:	a0 93 b1 02 	sts	0x02B1, r26
    1b66:	40 c0       	rjmp	.+128    	; 0x1be8 <free+0x130>
    1b68:	f9 01       	movw	r30, r18
    1b6a:	b3 83       	std	Z+3, r27	; 0x03
    1b6c:	a2 83       	std	Z+2, r26	; 0x02
    1b6e:	e9 01       	movw	r28, r18
    1b70:	69 91       	ld	r22, Y+
    1b72:	79 91       	ld	r23, Y+
    1b74:	c6 0f       	add	r28, r22
    1b76:	d7 1f       	adc	r29, r23
    1b78:	ac 17       	cp	r26, r28
    1b7a:	bd 07       	cpc	r27, r29
    1b7c:	79 f4       	brne	.+30     	; 0x1b9c <free+0xe4>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	5e 91       	ld	r21, -X
    1b82:	4e 91       	ld	r20, -X
    1b84:	46 0f       	add	r20, r22
    1b86:	57 1f       	adc	r21, r23
    1b88:	4e 5f       	subi	r20, 0xFE	; 254
    1b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8c:	51 83       	std	Z+1, r21	; 0x01
    1b8e:	40 83       	st	Z, r20
    1b90:	12 96       	adiw	r26, 0x02	; 2
    1b92:	8d 91       	ld	r24, X+
    1b94:	9c 91       	ld	r25, X
    1b96:	13 97       	sbiw	r26, 0x03	; 3
    1b98:	93 83       	std	Z+3, r25	; 0x03
    1b9a:	82 83       	std	Z+2, r24	; 0x02
    1b9c:	a0 e0       	ldi	r26, 0x00	; 0
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <free+0xee>
    1ba2:	d7 01       	movw	r26, r14
    1ba4:	7c 01       	movw	r14, r24
    1ba6:	f7 01       	movw	r30, r14
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	93 81       	ldd	r25, Z+3	; 0x03
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	c9 f7       	brne	.-14     	; 0x1ba2 <free+0xea>
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	02 96       	adiw	r24, 0x02	; 2
    1bb4:	20 81       	ld	r18, Z
    1bb6:	31 81       	ldd	r19, Z+1	; 0x01
    1bb8:	82 0f       	add	r24, r18
    1bba:	93 1f       	adc	r25, r19
    1bbc:	20 91 af 02 	lds	r18, 0x02AF
    1bc0:	30 91 b0 02 	lds	r19, 0x02B0
    1bc4:	28 17       	cp	r18, r24
    1bc6:	39 07       	cpc	r19, r25
    1bc8:	79 f4       	brne	.+30     	; 0x1be8 <free+0x130>
    1bca:	10 97       	sbiw	r26, 0x00	; 0
    1bcc:	29 f4       	brne	.+10     	; 0x1bd8 <free+0x120>
    1bce:	10 92 b2 02 	sts	0x02B2, r1
    1bd2:	10 92 b1 02 	sts	0x02B1, r1
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <free+0x128>
    1bd8:	13 96       	adiw	r26, 0x03	; 3
    1bda:	1c 92       	st	X, r1
    1bdc:	1e 92       	st	-X, r1
    1bde:	12 97       	sbiw	r26, 0x02	; 2
    1be0:	f0 92 b0 02 	sts	0x02B0, r15
    1be4:	e0 92 af 02 	sts	0x02AF, r14
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	e6 e0       	ldi	r30, 0x06	; 6
    1bee:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__epilogue_restores__+0x18>

00001bf2 <strnlen_P>:
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	05 90       	lpm	r0, Z+
    1bf6:	61 50       	subi	r22, 0x01	; 1
    1bf8:	70 40       	sbci	r23, 0x00	; 0
    1bfa:	01 10       	cpse	r0, r1
    1bfc:	d8 f7       	brcc	.-10     	; 0x1bf4 <strnlen_P+0x2>
    1bfe:	80 95       	com	r24
    1c00:	90 95       	com	r25
    1c02:	8e 0f       	add	r24, r30
    1c04:	9f 1f       	adc	r25, r31
    1c06:	08 95       	ret

00001c08 <memset>:
    1c08:	dc 01       	movw	r26, r24
    1c0a:	01 c0       	rjmp	.+2      	; 0x1c0e <memset+0x6>
    1c0c:	6d 93       	st	X+, r22
    1c0e:	41 50       	subi	r20, 0x01	; 1
    1c10:	50 40       	sbci	r21, 0x00	; 0
    1c12:	e0 f7       	brcc	.-8      	; 0x1c0c <memset+0x4>
    1c14:	08 95       	ret

00001c16 <strnlen>:
    1c16:	fc 01       	movw	r30, r24
    1c18:	61 50       	subi	r22, 0x01	; 1
    1c1a:	70 40       	sbci	r23, 0x00	; 0
    1c1c:	01 90       	ld	r0, Z+
    1c1e:	01 10       	cpse	r0, r1
    1c20:	d8 f7       	brcc	.-10     	; 0x1c18 <strnlen+0x2>
    1c22:	80 95       	com	r24
    1c24:	90 95       	com	r25
    1c26:	8e 0f       	add	r24, r30
    1c28:	9f 1f       	adc	r25, r31
    1c2a:	08 95       	ret

00001c2c <fputc>:
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	8c 01       	movw	r16, r24
    1c36:	eb 01       	movw	r28, r22
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	81 fd       	sbrc	r24, 1
    1c3c:	03 c0       	rjmp	.+6      	; 0x1c44 <fputc+0x18>
    1c3e:	0f ef       	ldi	r16, 0xFF	; 255
    1c40:	1f ef       	ldi	r17, 0xFF	; 255
    1c42:	1a c0       	rjmp	.+52     	; 0x1c78 <fputc+0x4c>
    1c44:	82 ff       	sbrs	r24, 2
    1c46:	0d c0       	rjmp	.+26     	; 0x1c62 <fputc+0x36>
    1c48:	2e 81       	ldd	r18, Y+6	; 0x06
    1c4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c50:	28 17       	cp	r18, r24
    1c52:	39 07       	cpc	r19, r25
    1c54:	64 f4       	brge	.+24     	; 0x1c6e <fputc+0x42>
    1c56:	e8 81       	ld	r30, Y
    1c58:	f9 81       	ldd	r31, Y+1	; 0x01
    1c5a:	01 93       	st	Z+, r16
    1c5c:	f9 83       	std	Y+1, r31	; 0x01
    1c5e:	e8 83       	st	Y, r30
    1c60:	06 c0       	rjmp	.+12     	; 0x1c6e <fputc+0x42>
    1c62:	e8 85       	ldd	r30, Y+8	; 0x08
    1c64:	f9 85       	ldd	r31, Y+9	; 0x09
    1c66:	80 2f       	mov	r24, r16
    1c68:	09 95       	icall
    1c6a:	89 2b       	or	r24, r25
    1c6c:	41 f7       	brne	.-48     	; 0x1c3e <fputc+0x12>
    1c6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c70:	9f 81       	ldd	r25, Y+7	; 0x07
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	9f 83       	std	Y+7, r25	; 0x07
    1c76:	8e 83       	std	Y+6, r24	; 0x06
    1c78:	c8 01       	movw	r24, r16
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	08 95       	ret

00001c84 <__ultoa_invert>:
    1c84:	fa 01       	movw	r30, r20
    1c86:	aa 27       	eor	r26, r26
    1c88:	28 30       	cpi	r18, 0x08	; 8
    1c8a:	51 f1       	breq	.+84     	; 0x1ce0 <__ultoa_invert+0x5c>
    1c8c:	20 31       	cpi	r18, 0x10	; 16
    1c8e:	81 f1       	breq	.+96     	; 0x1cf0 <__ultoa_invert+0x6c>
    1c90:	e8 94       	clt
    1c92:	6f 93       	push	r22
    1c94:	6e 7f       	andi	r22, 0xFE	; 254
    1c96:	6e 5f       	subi	r22, 0xFE	; 254
    1c98:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9e:	af 4f       	sbci	r26, 0xFF	; 255
    1ca0:	b1 e0       	ldi	r27, 0x01	; 1
    1ca2:	3e d0       	rcall	.+124    	; 0x1d20 <__ultoa_invert+0x9c>
    1ca4:	b4 e0       	ldi	r27, 0x04	; 4
    1ca6:	3c d0       	rcall	.+120    	; 0x1d20 <__ultoa_invert+0x9c>
    1ca8:	67 0f       	add	r22, r23
    1caa:	78 1f       	adc	r23, r24
    1cac:	89 1f       	adc	r24, r25
    1cae:	9a 1f       	adc	r25, r26
    1cb0:	a1 1d       	adc	r26, r1
    1cb2:	68 0f       	add	r22, r24
    1cb4:	79 1f       	adc	r23, r25
    1cb6:	8a 1f       	adc	r24, r26
    1cb8:	91 1d       	adc	r25, r1
    1cba:	a1 1d       	adc	r26, r1
    1cbc:	6a 0f       	add	r22, r26
    1cbe:	71 1d       	adc	r23, r1
    1cc0:	81 1d       	adc	r24, r1
    1cc2:	91 1d       	adc	r25, r1
    1cc4:	a1 1d       	adc	r26, r1
    1cc6:	20 d0       	rcall	.+64     	; 0x1d08 <__ultoa_invert+0x84>
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <__ultoa_invert+0x48>
    1cca:	68 94       	set
    1ccc:	3f 91       	pop	r19
    1cce:	2a e0       	ldi	r18, 0x0A	; 10
    1cd0:	26 9f       	mul	r18, r22
    1cd2:	11 24       	eor	r1, r1
    1cd4:	30 19       	sub	r19, r0
    1cd6:	30 5d       	subi	r19, 0xD0	; 208
    1cd8:	31 93       	st	Z+, r19
    1cda:	de f6       	brtc	.-74     	; 0x1c92 <__ultoa_invert+0xe>
    1cdc:	cf 01       	movw	r24, r30
    1cde:	08 95       	ret
    1ce0:	46 2f       	mov	r20, r22
    1ce2:	47 70       	andi	r20, 0x07	; 7
    1ce4:	40 5d       	subi	r20, 0xD0	; 208
    1ce6:	41 93       	st	Z+, r20
    1ce8:	b3 e0       	ldi	r27, 0x03	; 3
    1cea:	0f d0       	rcall	.+30     	; 0x1d0a <__ultoa_invert+0x86>
    1cec:	c9 f7       	brne	.-14     	; 0x1ce0 <__ultoa_invert+0x5c>
    1cee:	f6 cf       	rjmp	.-20     	; 0x1cdc <__ultoa_invert+0x58>
    1cf0:	46 2f       	mov	r20, r22
    1cf2:	4f 70       	andi	r20, 0x0F	; 15
    1cf4:	40 5d       	subi	r20, 0xD0	; 208
    1cf6:	4a 33       	cpi	r20, 0x3A	; 58
    1cf8:	18 f0       	brcs	.+6      	; 0x1d00 <__ultoa_invert+0x7c>
    1cfa:	49 5d       	subi	r20, 0xD9	; 217
    1cfc:	31 fd       	sbrc	r19, 1
    1cfe:	40 52       	subi	r20, 0x20	; 32
    1d00:	41 93       	st	Z+, r20
    1d02:	02 d0       	rcall	.+4      	; 0x1d08 <__ultoa_invert+0x84>
    1d04:	a9 f7       	brne	.-22     	; 0x1cf0 <__ultoa_invert+0x6c>
    1d06:	ea cf       	rjmp	.-44     	; 0x1cdc <__ultoa_invert+0x58>
    1d08:	b4 e0       	ldi	r27, 0x04	; 4
    1d0a:	a6 95       	lsr	r26
    1d0c:	97 95       	ror	r25
    1d0e:	87 95       	ror	r24
    1d10:	77 95       	ror	r23
    1d12:	67 95       	ror	r22
    1d14:	ba 95       	dec	r27
    1d16:	c9 f7       	brne	.-14     	; 0x1d0a <__ultoa_invert+0x86>
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	61 05       	cpc	r22, r1
    1d1c:	71 05       	cpc	r23, r1
    1d1e:	08 95       	ret
    1d20:	9b 01       	movw	r18, r22
    1d22:	ac 01       	movw	r20, r24
    1d24:	0a 2e       	mov	r0, r26
    1d26:	06 94       	lsr	r0
    1d28:	57 95       	ror	r21
    1d2a:	47 95       	ror	r20
    1d2c:	37 95       	ror	r19
    1d2e:	27 95       	ror	r18
    1d30:	ba 95       	dec	r27
    1d32:	c9 f7       	brne	.-14     	; 0x1d26 <__ultoa_invert+0xa2>
    1d34:	62 0f       	add	r22, r18
    1d36:	73 1f       	adc	r23, r19
    1d38:	84 1f       	adc	r24, r20
    1d3a:	95 1f       	adc	r25, r21
    1d3c:	a0 1d       	adc	r26, r0
    1d3e:	08 95       	ret

00001d40 <__prologue_saves__>:
    1d40:	2f 92       	push	r2
    1d42:	3f 92       	push	r3
    1d44:	4f 92       	push	r4
    1d46:	5f 92       	push	r5
    1d48:	6f 92       	push	r6
    1d4a:	7f 92       	push	r7
    1d4c:	8f 92       	push	r8
    1d4e:	9f 92       	push	r9
    1d50:	af 92       	push	r10
    1d52:	bf 92       	push	r11
    1d54:	cf 92       	push	r12
    1d56:	df 92       	push	r13
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	ca 1b       	sub	r28, r26
    1d6a:	db 0b       	sbc	r29, r27
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	09 94       	ijmp

00001d78 <__epilogue_restores__>:
    1d78:	2a 88       	ldd	r2, Y+18	; 0x12
    1d7a:	39 88       	ldd	r3, Y+17	; 0x11
    1d7c:	48 88       	ldd	r4, Y+16	; 0x10
    1d7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d80:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d82:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d84:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d86:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d88:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d8a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d8c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d8e:	df 80       	ldd	r13, Y+7	; 0x07
    1d90:	ee 80       	ldd	r14, Y+6	; 0x06
    1d92:	fd 80       	ldd	r15, Y+5	; 0x05
    1d94:	0c 81       	ldd	r16, Y+4	; 0x04
    1d96:	1b 81       	ldd	r17, Y+3	; 0x03
    1d98:	aa 81       	ldd	r26, Y+2	; 0x02
    1d9a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d9c:	ce 0f       	add	r28, r30
    1d9e:	d1 1d       	adc	r29, r1
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	ed 01       	movw	r28, r26
    1dac:	08 95       	ret

00001dae <_exit>:
    1dae:	f8 94       	cli

00001db0 <__stop_program>:
    1db0:	ff cf       	rjmp	.-2      	; 0x1db0 <__stop_program>
